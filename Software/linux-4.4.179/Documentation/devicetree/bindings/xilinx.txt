Chinese translated version of Documentation/process/howto.rst

If you have any comment or update to the content, please contact the
original document maintainer directly.  However, if you have a problem
communicating in English you can also ask the Chinese maintainer for
help.  Contact the Chinese maintainer if this translation is outdated
or if there is a problem with the translation.

Maintainer: Greg Kroah-Hartman <greg@kroah.com>
Chinese maintainer: Li Yang <leoli@freescale.com>
---------------------------------------------------------------------
Documentation/process/howto.rst 的中文翻译

如果想评论或更新本文的内容，请直接联系原文档的维护者。如果你使用英文
交流有困难的话，也可以向中文版维护者求助。如果本翻译更新不及时或者翻
译存在问题，请联系中文版维护者。

英文版维护者： Greg Kroah-Hartman <greg@kroah.com>
中文版维护者： 李阳  Li Yang <leoli@freescale.com>
中文版翻译者： 李阳  Li Yang <leoli@freescale.com>
中文版校译者： 钟宇  TripleX Chung <xxx.phy@gmail.com>
               陈琦  Maggie Chen <chenqi@beyondsoft.com>
               王聪  Wang Cong <xiyou.wangcong@gmail.com>

以下为正文
---------------------------------------------------------------------

如何参与Linux内核开发
---------------------

这是一篇将如何参与Linux内核开发的相关问题一网打尽的终极秘笈。它将指导你
成为一名Linux内核开发者，并且学会如何同Linux内核开发社区合作。它尽可能不
包括任何关于内核编程的技术细节，但会给你指引一条获得这些知识的正确途径。

如果这篇文章中的任何内容不再适用，请给文末列出的文件维护者发送补丁。


入门
----

你想了解如何成为一名Linux内核开发者？或者老板吩咐你“给这个设备写个Linux
驱动程序”？这篇文章的目的就是教会你达成这些目标的全部诀窍，它将描述你需
要经过的流程以及给出如何同内核社区合作的一些提示。它还将试图解释内核社区
为何这样运作。

Linux内核大部分是由C语言写成的，一些体系结构相关的代码用到了汇编语言。要
参与内核开发，你必须精通C语言。除非你想为某个架构开发底层代码，否则你并
不需要了解（任何体系结构的）汇编语言。下面列举的书籍虽然不能替代扎实的C
语言教育和多年的开发经验，但如果需要的话，做为参考还是不错的：
 - "The C Programming Language" by Kernighan and Ritchie [Prentice Hall]
   《C程序设计语言（第2版·新版）》（徐宝文 李志 译）[机械工业出版社]
 - "Practical C Programming" by Steve Oualline [O'Reilly]
   《实用C语言编程（第三版）》（郭大海 译）[中国电力出版社]
 - "C:  A Reference Manual" by Harbison and Steele [Prentice Hall]
   《C语言参考手册（原书第5版）》（邱仲潘 等译）[机械工业出版社]

Linux内核使用GNU C和GNU工具链开发。虽然它遵循ISO C89标准，但也用到了一些
标准中没有定义的扩展。内核是自给自足的C环境，不依赖于标准C库的支持，所以
并不支持C标准中的部分定义。比如long long类型的大数除法和浮点运算就不允许
使用。有时候确实很难弄清楚内核对工具链的要求和它所使用的扩展，不幸的是目
前还没有明确的参考资料可以解释它们。请查阅gcc信息页（使用“info gcc”命令
显示）获得一些这方面信息。

请记住你是在学习怎么和已经存在的开发社区打交道。它由一群形形色色的人组成，
他们对代码、风格和过程有着很高的标准。这些标准是在长期实践中总结出来的，
适应于地理上分散的大型开发团队。它们已经被很好得整理成档，建议你在开发
之前尽可能多的学习这些标准，而不要期望别人来适应你或者你公司的行为方式。


法律问题
--------

Linux内核源代码都是在GPL（通用公共许可证）的保护下发布的。要了解这种许可
的细节请查看源代码主目录下的COPYING文件。如果你对它还有更深入问题请联系
律师，而不要在Linux内核邮件组上提问。因为邮件组里的人并不是律师，不要期
望他们的话有法律效力。

对于GPL的常见问题和解答，请访问以下链接：
	http://www.gnu.org/licenses/gpl-faq.html


文档
----

Linux内核代码中包含有大量的文档。这些文档对于学习如何与内核社区互动有着
不可估量的价值。当一个新的功能被加入内核，最好把解释如何使用这个功能的文
档也放进内核。当内核的改动导致面向用户空间的接口发生变化时，最好将相关信
息或手册页(manpages)的补丁发到mtk.manpages@gmail.com，以向手册页(manpages)
的维护者解释这些变化。

以下是内核代码中需要阅读的文档：
  README
    文件简要介绍了Linux内核的背景，并且描述了如何配置和编译内核。内核的
    新用户应该从这里开始。

  Documentation/process/changes.rst
    文件给出了用来编译和使用内核所需要的最小软件包列表。

  Documentation/process/coding-style.rst
    描述Linux内核的代码风格和理由。所有新代码需要遵守这篇文档中定义的规
    范。大多数维护者只会接收符合规定的补丁，很多人也只会帮忙检查符合风格
    的代码。

  Documentation/process/submitting-patches.rst
  Documentation/process/submitting-drivers.rst
    这两份文档明确描述如何创建和发送补丁，其中包括（但不仅限于)：
       - 邮件内容
       - 邮件格式
       - 选择收件人
    遵守这些规定并不能保证提交成功（因为所有补丁需要通过严格的内容和风格
    审查），但是忽视他们几乎就意味着失败。

    其他关于如何正确地生成补丁的优秀文档包括：
    "The Perfect Patch"
        http://www.ozlabs.org/~akpm/stuff/tpp.txt
    "Linux kernel patch submission format"
        http://linux.yyz.us/patch-format.html

  Documentation/process/stable-api-nonsense.rst
    论证内核为什么特意不包括稳定的内核内部API，也就是说不包括像这样的特
    性：
       - 子系统中间层（为了兼容性？）
       - 在不同操作系统间易于移植的驱动程序
       - 减缓（甚至阻止）内核代码的快速变化
    这篇文档对于理解Linux的开发哲学至关重要。对于将开发平台从其他操作系
    统转移到Linux的人来说也很重要。

  Documentation/admin-guide/security-bugs.rst
    如果你认为自己发现了Linux内核的安全性问题，请根据这篇文档中的步骤来
    提醒其他内核开发者并帮助解决这个问题。

  Documentation/process/management-style.rst
    描述内核维护者的工作方法及其共有特点。这对于刚刚接触内核开发（或者对
    它感到好奇）的人来说很重要，因为它解释了很多对于内核维护者独特行为的
    普遍误解与迷惑。

  Documentation/process/stable-kernel-rules.rst
    解释了稳定版内核发布的规则，以及如何将改动放入这些版本的步骤。

  Documentation/process/kernel-docs.rst
    有助于内核开发的外部文档列表。如果你在内核自带的文档中没有找到你想找
    的内容，可以查看这些文档。

  Documentation/process/applying-patches.rst
    关于补丁是什么以及如何将它打在不同内核开发分支上的好介绍

内核还拥有大量从代码自动生成的文档。它包含内核内部API的全面介绍以及如何
妥善处理加锁的规则。生成的文档会放在 Documentation/DocBook/目录下。在内
核源码的主目录中使用以下不同命令将会分别生成PDF、Postscript、HTML和手册
页等不同格式的文档：
    make pdfdocs
    make htmldocs


如何成为内核开发者
------------------
如果你对Linux内核开发一无所知，你应该访问“Linux内核新手”计划：
	http://kernelnewbies.org
它拥有一个可以问各种最基本的内核开发问题的邮件列表（在提问之前一定要记得
查找已往的邮件，确认是否有人已经回答过相同的问题）。它还拥有一个可以获得
实时反馈的IRC聊天频道，以及大量对于学习Linux内核开发相当有帮助的文档。

网站简要介绍了源代码组织结构、子系统划分以及目前正在进行的项目（包括内核
中的和单独维护的）。它还提供了一些基本的帮助信息，比如如何编译内核和打补
丁。

如果你想加入内核开发社区并协助完成一些任务，却找不到从哪里开始，可以访问
“Linux内核房管员”计划：
	http://kernelnewbies.org/KernelJanitors
这是极佳的起点。它提供一个相对简单的任务列表，列出内核代码中需要被重新
整理或者改正的地方。通过和负责这个计划的开发者们一同工作，你会学到将补丁
集成进内核的基本原理。如果还没有决定下一步要做什么的话，你还可能会得到方
向性的指点。

如果你已经有一些现成的代码想要放到内核中，但是需要一些帮助来使它们拥有正
确的格式。请访问“内核导师”计划。这个计划就是用来帮助你完成这个目标的。它
是一个邮件列表，地址如下：
	http://selenic.com/mailman/listinfo/kernel-mentors

在真正动手修改内核代码之前，理解要修改的代码如何运作是必需的。要达到这个
目的，没什么办法比直接读代码更有效了（大多数花招都会有相应的注释），而且
一些特制的工具还可以提供帮助。例如，“Linux代码交叉引用”项目就是一个值得
特别推荐的帮助工具，它将源代码显示在有编目和索引的网页上。其中一个更新及
时的内核源码库，可以通过以下地址访问：
	http://sosdg.org/~coywolf/lxr/


开发流程
--------

目前Linux内核开发流程包括几个“主内核分支”和很多子系统相关的内核分支。这
些分支包括：
  - 2.6.x主内核源码树
  - 2.6.x.y -stable内核源码树
  - 2.6.x -git内核补丁集
  - 2.6.x -mm内核补丁集
  - 子系统相关的内核源码树和补丁集


2.6.x内核主源码树
-----------------
2.6.x内核是由Linus Torvalds（Linux的创造者）亲自维护的。你可以在
kernel.org网站的pub/linux/kernel/v2.6/目录下找到它。它的开发遵循以下步
骤：
  - 每当一个新版本的内核被发布，为