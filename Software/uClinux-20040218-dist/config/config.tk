#!/usr/bin/wish -f
# FILE: header.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Remove unused do_cmd function (part of the 2.0 sound support).
# - Arrange buttons in three columns for better screen fitting.
# - Add CONSTANT_Y, CONSTANT_M, CONSTANT_N for commands like:
#     dep_tristate 'foo' CONFIG_FOO m
#
# 23 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Shut vfix the hell up.
#
# 24 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Improve the exit message (Jeff Ronne).

#
# This is a handy replacement for ".widget cget" that requires neither tk4
# nor additional source code uglification.
#
proc cget { w option } {
	return "[lindex [$w configure $option] 4]"
}

#
# Function to compensate for broken config.in scripts like the sound driver,
# which make dependencies on variables that are never even conditionally
# defined.
#
proc vfix { var } {
	global $var
	if [ catch {eval concat $$var} ] {
		set $var 4
	}
}

#
# Constant values used by certain dep_tristate commands.
#
set CONSTANT_Y 1
set CONSTANT_M 2
set CONSTANT_N 0
set CONSTANT_E 4

#
# Create a "reference" object to steal colors from.
#
button .ref

#
# On monochrome displays, -disabledforeground is blank by default; that's
# bad.  Fill it with -foreground instead.
#
if { [cget .ref -disabledforeground] == "" } {
	.ref configure -disabledforeground [cget .ref -foreground]
}


#
# Define some macros we will need to parse the config.in file.
#

proc mainmenu_name { text } {
	wm title . "$text"
}

proc menu_option { w menu_num text } {
	global menus_per_column
	global processed_top_level
	set processed_top_level [expr $processed_top_level + 1]
	if { $processed_top_level <= $menus_per_column } then {
	    set myframe left
	} elseif { $processed_top_level <= [expr 2 * $menus_per_column] } then {
	    set myframe middle
	} else {
	    set myframe right
	} 
	button .f0.x$menu_num -anchor w -text "$text" \
	    -command "$w .$w \"$text\""
	pack .f0.x$menu_num -pady 0 -side top -fill x -in .f0.$myframe
}

proc load_configfile { w title func } {
	catch {destroy $w}
	toplevel $w -class Dialog
	global loadfile
	frame $w.x
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	label $w.x.l -text "Enter filename:" -relief raised
	entry $w.x.x -width 35 -relief sunken -borderwidth 2 \
		-textvariable loadfile
	pack $w.x.l $w.x.x -anchor w -side left
	pack $w.x -side top -pady 10
	wm title $w "$title" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "destroy $w; focus $oldFocus;$func .fileio"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

bind all <Alt-q> {maybe_exit .maybe}

proc maybe_exit { w } {
	catch {destroy $w}
	toplevel $w -class Dialog
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	message $w.m -width 400 -aspect 300 \
		-text "Changes will be lost.  Are you sure?" -relief flat
	pack  $w.m -pady 10 -side top -padx 10
	wm title $w "Are you sure?" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "exit"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
  	bind $w <Return> "exit"
    	bind $w <Escape> "destroy $w; focus $oldFocus"
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc read_config_file { w } {
	global loadfile
	if { [string length $loadfile] != 0 && [file readable $loadfile] == 1 } then {
		read_config $loadfile
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to read file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "Bummer" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc write_config_file  { w } {
	global loadfile
	if { [string length $loadfile] != 0 
    		&& ([file writable $loadfile] == 1 || ([file exists $loadfile] == 0 && [file writable [file dirname $loadfile]] == 1)) } then {
		writeconfig $loadfile /dev/null
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to write file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "OK" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc read_config { filename } {
	set file1 [open $filename r]
	clear_choices
	while { [gets $file1 line] >= 0} {
		if [regexp {([0-9A-Za-z_]+)=([ynm])} $line foo var value] {
			if { $value == "y" } then { set cmd "global $var; set $var 1" }
			if { $value == "n" } then { set cmd "global $var; set $var 0" }
			if { $value == "m" } then { set cmd "global $var; set $var 2" }
			eval $cmd
		}
		if [regexp {# ([0-9A-Za-z_]+) is not set} $line foo var] {
			set cmd "global $var; set $var 0"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)=([0-9A-Fa-f]+)} $line foo var value] {
			set cmd "global $var; set $var $value"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)="([^"]*)"} $line foo var value] {
			set cmd "global $var; set $var \"$value\""
			eval $cmd
		}
	}
	close $file1
	update_choices
	update_mainmenu
}
proc write_comment { file1 file2 text } {
    	puts $file1 ""
	puts $file1 "#"
	puts $file1 "# $text"
	puts $file1 "#"
	puts $file2 "/*"
	puts $file2 " * $text"
	puts $file2 " */"
}

proc effective_dep { deplist } {
	global CONFIG_MODULES
	set depend 1
	foreach i $deplist {
		if {$i == 0} then {set depend 0}
		if {$i == 2 && $depend == 1} then {set depend 2}
	}
	if {$depend == 2 && $CONFIG_MODULES == 0} then {set depend 0}
	return $depend
}

proc sync_tristate { var dep } {
	global CONFIG_MODULES
	if {$dep == 0 && ($var == 1 || $var == 2)} then {
		set var 0
	} elseif {$dep == 2 && $var == 1} then {
		set var 2
	} elseif {$var == 2 && $CONFIG_MODULES == 0} then {
		if {$dep == 1} then {set var 1} else {set var 0}
	}
	return $var
}

proc sync_bool { var dep modset } {
	set var [sync_tristate $var $dep]
	if {$dep == 2 && $var == 2} then {
		set var $modset
	}
	return $var
}

proc write_tristate { file1 file2 varname variable deplist modset } {
	set variable [sync_tristate $variable [effective_dep $deplist]]
	if { $variable == 2 } \
		then { set variable $modset }
	if { $variable == 1 } \
		then { puts $file1 "$varname=y"; \
		       puts $file2 "#define $varname 1" } \
	elseif { $variable == 2 } \
		then { puts $file1 "$varname=m"; \
		       puts $file2 "#undef  $varname"; \
		       puts $file2 "#define ${varname}_MODULE 1" } \
	elseif { $variable == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else { \
	    puts stdout "ERROR - Attempting to write value for unconfigured variable ($varname)." \
	}
}

proc write_int { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts $file2 "#define $varname ($variable)"; \
	}
}

proc write_hex { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts -nonewline $file2 "#define $varname 0x"; \
		puts $file2 [exec echo $variable | sed s/^0\[xX\]//]; \
	}
}

proc write_string { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=\"$variable\""; \
		puts $file2 "#define $varname \"$variable\""; \
	}
}

proc option_name {w mnum line text helpidx} {
	button $w.x$line.l -text "$text" -relief groove -anchor w
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
				-activeback [cget $w.x$line.l -bg]
	button $w.x$line.help -text "Help" -relief raised \
		-command "dohelp .dohelp $helpidx .menu$mnum"
	pack $w.x$line.help -side right -fill y
	pack $w.x$line.l -side right -fill both -expand on
}

proc toggle_switch2 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "-"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc toggle_switch3 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "m"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	global CONFIG_MODULES
	if {($CONFIG_MODULES == 0)} then {
		$w.x$line.m configure -state disabled
	}
	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc bool {w mnum line text variable} {
	toggle_switch2 $w $mnum $line $text $variable
	$w.x$line.m configure -state disabled
	pack $w.x$line -anchor w -fill both -expand on
}

proc tristate {w mnum line text variable } {
	toggle_switch3 $w $mnum $line $text $variable
	pack $w.x$line -anchor w -fill both -expand on
}

proc dep_tristate {w mnum line text variable } {
	tristate $w $mnum $line $text $variable
}

proc dep_bool {w mnum line text variable } {
	bool $w $mnum $line $text $variable
}

proc int { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc hex { w mnum line text variable } {
	int $w $mnum $line $text $variable
}

proc istring { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc minimenu { w mnum line text variable helpidx } {
	frame $w.x$line
	menubutton $w.x$line.x -textvariable $variable -menu \
		$w.x$line.x.menu -relief raised \
		-anchor w
	option_name $w $mnum $line $text $helpidx
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc menusplit {w m n} {
	if { $n > 2 } then {
		update idletasks
		set menuoptsize [expr [$m yposition 2] - [$m yposition 1]]   
		set maxsize [winfo screenheight $w]
		set splitpoint [expr $maxsize * 4 / 5 / $menuoptsize - 1]
		for {set i [expr $splitpoint + 1]} {$i <= $n} {incr i $splitpoint} {
			$m entryconfigure $i -columnbreak 1
		}
	}
}

proc menutitle {text menu w} {
	wm title $w "$text"
}

proc submenu { w mnum line text subnum } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief raised -anchor w \
		-command "catch {destroy .menu$subnum}; menu$subnum .menu$subnum \"$text\""
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc comment {w mnum line text } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief groove -anchor w
	$w.x$line.m configure -activefore [cget $w.x$line.m -fg] \
		-activeback [cget $w.x$line.m -bg]
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc dohelp {w var parent}  {
	catch {destroy $w}
	toplevel $w -class Dialog

	set filefound 0
	set found 0
	set lineno 0

	global help_file

	if { [file readable $help_file ] == 1} then {
		set filefound 1
		# First escape sed regexp special characters in var:
		set var [exec echo "$var" | sed s/\[\]\[\/.^$*\]/\\\\&/g]
		# Now pick out right help text:
		set message [exec sed -n "
			/^$var\[ 	\]*\$/,\${
				/^$var\[ 	\]*\$/c\\
${var}:\\

				/^#/b
				/^\[^ 	\]/q
				s/^  //
				p
			}
			" $help_file ]
		set found [expr [string length "$message"] > 0]
	}

	frame $w.f1
	pack $w.f1 -fill both -expand on

	# Do the OK button
	#
	set oldFocus [focus]
	frame $w.f2
	button $w.f2.ok -text "OK" \
		-width 10 -command "destroy $w; catch {focus $oldFocus}"
	pack $w.f2.ok -side bottom -pady 6 -anchor n
	pack $w.f2 -side bottom -padx 10 -anchor s

	scrollbar $w.f1.vscroll -command "$w.f1.canvas yview"
	pack $w.f1.vscroll -side right -fill y

	canvas $w.f1.canvas -relief flat -borderwidth 0 \
		-yscrollcommand "$w.f1.vscroll set"
	frame $w.f1.f
	pack $w.f1.canvas -side right -fill y -expand on

	if { $found == 0 } then {
		if { $filefound == 0 } then {
		message $w.f1.f.m -width 750 -aspect 300 -relief flat -text \
			"No help available - unable to open file $help_file.  This file should have come with your distribution."
		} else {
		message $w.f1.f.m -width 400 -aspect 300 -relief flat -text \
			"No help available for $var"
		}
		label $w.f1.bm -bitmap error
		wm title $w "RTFM"
	} else {
		text $w.f1.f.m -width 73 -relief flat -wrap word
		$w.f1.f.m insert 0.0 $message
		$w.f1.f.m conf -state disabled -height [$w.f1.f.m index end]

		label $w.f1.bm -bitmap info
		wm title $w "Configuration help" 
	}
	pack $w.f1.f.m -side left
	pack $w.f1.bm $w.f1.f -side left -padx 10

	focus $w
	set winx [expr [winfo x $parent]+20]
	set winy [expr [winfo y $parent]+20]
	wm geometry $w +$winx+$winy
	set sizok [expr [winfo reqheight $w.f2.ok] + 12]
	set maxy [expr [winfo screenheight .] * 3 / 4]
	set canvtotal [winfo reqheight $w.f1.f.m]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy $canvtotal
	} else {
		set sizy [expr $maxy - $sizok]
	}
	$w.f1.canvas configure -height $sizy -width [winfo reqwidth $w.f1.f.m] \
		-scrollregion "0 0 [winfo reqwidth $w.f1.f.m] \
			[winfo reqheight $w.f1.f.m]"
	$w.f1.canvas create window 0 0 -anchor nw -window $w.f1.f
	update idletasks

	set maxy [winfo screenheight .]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy [expr $sizok + $canvtotal]
	} else {
		set sizy $maxy
	}
	wm maxsize $w [winfo width $w] $sizy
}

bind all <Alt-s> { catch {exec cp -f .config .config.old}; \
		writeconfig .config include/linux/autoconf.h; wrapup .wrap }

proc wrapup {w }  {
	catch {destroy $w}
	toplevel $w -class Dialog

	global CONFIG_MODVERSIONS; vfix CONFIG_MODVERSIONS
	if { ([file exists .hdepend] != 1) || ($CONFIG_MODVERSIONS == 1) } then {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you must run 'make dep'."
	} else {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you may 'make bzImage', 'make bzdisk', or 'make bzlilo.'"
	}
	label $w.bm -bitmap info
	pack $w.bm $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel build instructions" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" \
		-width 10 -command "exit"
	pack $w.f.back -side bottom -pady 10 -anchor s
	pack $w.f -pady 10 -side top -padx 10 -anchor s
	focus $w
        bind $w <Return> "exit"
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy

}

proc unregister_active {num} {
	global active_menus
	set index [lsearch -exact $active_menus $num]
	if {$index != -1} then {set active_menus [lreplace $active_menus $index $index]}
}

proc update_active {} {
	global active_menus total_menus
	set max 0
	if {[llength $active_menus] > 0} then {
		set max [lindex $active_menus end]
		update_define [toplevel_menu [lindex $active_menus 0]] $max 0
	}
	foreach i $active_menus {
		if {[winfo exists .menu$i] == 0} then {
			unregister_active $i
		} else {
			update_menu$i
		}
	}
	update_define [expr $max + 1] $total_menus 1
	update_mainmenu
}

proc configure_entry {w option items} {
	foreach i $items {
		$w.$i configure -state $option
	}
}

proc validate_int {name val default} {
	if {([exec echo $val | sed s/^-//g | tr -d \[:digit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc validate_hex {name val default} {
	if {([exec echo $val | tr -d \[:xdigit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc update_define {first last allow_update} {
	for {set i $first} {$i <= $last} {incr i} {
		update_define_menu$i
		if {$allow_update == 1} then update
	}
}

#
# Next set up the particulars for the top level menu, and define a few
# buttons which we will stick down at the bottom.
#

frame .f0 
frame .f0.left
frame .f0.middle
frame .f0.right

set active_menus [list]
set processed_top_level 0
set autoconf_file ""
set help_file ""
set menus_per_column 6
set total_menus 13

proc toplevel_menu {num} {
	return $num
}

mainmenu_name "SnapGear Embedded Linux Application Configuration"
menu_option menu1 1 "SnapGear Apps/Libs"
proc menu1 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 1}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 1]]
	message $w.m -width 400 -aspect 300 -text \
		"SnapGear Apps/Libs"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "SnapGear Apps/Libs" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 1; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu2 .menu2 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu0 .menu0 \"$title\""
	$w.f.prev configure -state disabled
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 1 0 "authd" CONFIG_PROP_AUTHD_AUTHD
	bool $w.config.f 1 1 "  Cerberian" CONFIG_PROP_AUTHD_CERBERIAN
	bool $w.config.f 1 2 "  Enable proxy authentication" CONFIG_PROP_AUTHD_USER
	bool $w.config.f 1 3 "    Enable Access Control Lists" CONFIG_PROP_AUTHD_USERACL
	bool $w.config.f 1 4 "  IP access lists" CONFIG_PROP_AUTHD_BWLIST
	bool $w.config.f 1 5 "  Local host allowed" CONFIG_PROP_AUTHD_LOCALHOST
	bool $w.config.f 1 6 "  NASL probing" CONFIG_PROP_AUTHD_NASL
	bool $w.config.f 1 7 "  Point to Point" CONFIG_PROP_AUTHD_P2P
	bool $w.config.f 1 8 "  WWW access lists" CONFIG_PROP_AUTHD_WWWLIST
	bool $w.config.f 1 9 "  Zonelabs" CONFIG_PROP_AUTHD_ZONELABS
	bool $w.config.f 1 10 "    Zonelabs AntiVirus" CONFIG_PROP_AUTHD_ZLAV
	bool $w.config.f 1 11 "    Zonelabs direct query" CONFIG_PROP_AUTHD_DIRECT
	bool $w.config.f 1 12 "  Authd test utility" CONFIG_PROP_AUTHD_TESTER
	bool $w.config.f 1 13 "Amazon LDAP boa hacks" CONFIG_PROP_AMAZON_BOA_LDAP
	bool $w.config.f 1 14 "Amazon timer daemon" CONFIG_PROP_AMAZON_TIMERD
	bool $w.config.f 1 15 "TAMS Concentrator" CONFIG_PROP_TAMS_CONCENTRATOR
	bool $w.config.f 1 16 "Conditional execute" CONFIG_PROP_CXEQ
	bool $w.config.f 1 17 "Filesystem test application" CONFIG_PROP_FSTHRASH_FSTHRASH
	bool $w.config.f 1 18 "Flash programmer" CONFIG_PROP_FLASHPROG
	bool $w.config.f 1 19 "Squid FS mounter" CONFIG_PROP_SQUID_MOUNT
	bool $w.config.f 1 20 "SnapGear/SecureEdge cgi" CONFIG_USER_CGI
	bool $w.config.f 1 21 "  Support for LAN/WAN bridging" CONFIG_USER_CGI_ETH1_BRIDGE
	bool $w.config.f 1 22 "  Disable Serial Support" CONFIG_USER_CGI_NO_SERIAL
	bool $w.config.f 1 23 "    Disable COM2 Support" CONFIG_USER_CGI_NO_COM2
	bool $w.config.f 1 24 "    COM2 is a modem" CONFIG_USER_CGI_COM2_MODEM
	bool $w.config.f 1 25 "    Disable Dialin Support" CONFIG_USER_CGI_NO_DIALIN
	bool $w.config.f 1 26 "  Support for DMZ config" CONFIG_USER_CGI_DMZ
	bool $w.config.f 1 27 "  Support for LOAD_BALANCING config" CONFIG_USER_CGI_LOAD_BALANCING
	bool $w.config.f 1 28 "  Support for VLAN config" CONFIG_USER_CGI_VLAN
	bool $w.config.f 1 29 "  Support for Advanced Bridging" CONFIG_USER_CGI_BRIDGE
	bool $w.config.f 1 30 "  Support for Loopback interfaces" CONFIG_USER_CGI_LOOPBACK
	bool $w.config.f 1 31 "SecureEdge DISKtel cgi" CONFIG_USER_CGI_DISKTEL
	bool $w.config.f 1 32 "firewall tools" CONFIG_USER_FIREWALL_TOOLS
	bool $w.config.f 1 33 "  Script-based firewall only - DO NOT ENABLE" CONFIG_USER_FIREWALL_SCRIPT_ONLY
	bool $w.config.f 1 34 "aesperf" CONFIG_USER_AES_PERF
	bool $w.config.f 1 35 "br" CONFIG_USER_BR_BR
	bool $w.config.f 1 36 "cerberian" CONFIG_USER_CERBERIAN_CERBERIAN
	bool $w.config.f 1 37 "  Enable proxy authentication" CONFIG_USER_CERBERIAN_PROXYAUTH
	bool $w.config.f 1 38 "  Enable Access Control Lists" CONFIG_USER_CERBERIAN_AUTHACL
	bool $w.config.f 1 39 "cerbtest" CONFIG_USER_CERBERIAN_CERBTEST
	bool $w.config.f 1 40 "cma" CONFIG_PROP_CMA_CMA
	bool $w.config.f 1 41 "crd" CONFIG_PROP_CRD_CRD
	bool $w.config.f 1 42 "crypto-test" CONFIG_USER_DESTEST_DESTEST
	bool $w.config.f 1 43 "crypto-perf" CONFIG_USER_DESTEST_DESPERF
	bool $w.config.f 1 44 "emctest" CONFIG_USER_EMCTEST_EMCTEST
	bool $w.config.f 1 45 "facttest" CONFIG_USER_FACTORY_FACTTEST
	istring $w.config.f 1 46 "  facttest ethernet interface" CONFIG_USER_FACTORY_ETHER_INTERFACE
	bool $w.config.f 1 47 "gdsd" CONFIG_USER_GDSD_GDSD
	dep_bool $w.config.f 1 48 "  gdsd also listens on tcp socket" CONFIG_USER_GDSD_GDSD_INET
	bool $w.config.f 1 49 "gre" CONFIG_USER_GRE_GRE
	bool $w.config.f 1 50 "idb" CONFIG_USER_IDB_IDB
	bool $w.config.f 1 51 "ifmond" CONFIG_PROP_IFMOND_IFMOND
	bool $w.config.f 1 52 "ipsec configurator" CONFIG_USER_IPSEC_CONFIGURATOR
	bool $w.config.f 1 53 "logging daemon" CONFIG_PROP_LOGD_LOGD
	bool $w.config.f 1 54 "redialer" CONFIG_USER_REDIALER_REDIALER
	bool $w.config.f 1 55 "pktdelay" CONFIG_USER_PKTDELAY_PKTDELAY
	bool $w.config.f 1 56 "protect" CONFIG_USER_PROTECT
	bool $w.config.f 1 57 "setkey" CONFIG_USER_SETKEY_SETKEY
	bool $w.config.f 1 58 "SnapGear IO daemon" CONFIG_USER_IOD
	bool $w.config.f 1 59 "swtest" CONFIG_USER_SWTEST_SWTEST
	bool $w.config.f 1 60 "SnapGear Centralised Management" CONFIG_USER_MGMT_MGMT
	bool $w.config.f 1 61 "  reportd reporting daemon" CONFIG_PROP_REPORTD_REPORTD
	bool $w.config.f 1 62 "SnapGear snmpd" CONFIG_USER_SGSNMPD_AGENT
	bool $w.config.f 1 63 "  Full MIB-2" CONFIG_PROP_SGSNMPD_FULLMIB2
	bool $w.config.f 1 64 "  SNMP over TCP" CONFIG_USER_SGSNMPD_TCP
	bool $w.config.f 1 65 "  SNMP over TCP/SSL" CONFIG_USER_SGSNMPD_TCPSSL
	bool $w.config.f 1 66 "  SnapGear MIB" CONFIG_USER_SGSNMPD_SNAPGEAR
	bool $w.config.f 1 67 "tcl web scripts" CONFIG_PROP_WCL_WCL
	bool $w.config.f 1 68 "tqrecv" CONFIG_USER_TQRECV_TQRECV
	bool $w.config.f 1 69 "upnpd" CONFIG_USER_UPNPD
	bool $w.config.f 1 70 "vlan" CONFIG_PROP_VLAN_VLAN
	bool $w.config.f 1 71 "ws" CONFIG_USER_WINSD_WS



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu1 {} {
	global CONFIG_USER_IPTABLES_IPTABLES
	global CONFIG_PROP_AUTHD_AUTHD
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1)} then {
	configure_entry .menu1.config.f.x0 normal {n l y}} else {configure_entry .menu1.config.f.x0 disabled {y n l}}
	global CONFIG_PROP_AUTHD_CERBERIAN
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x1 normal {n l y}} else {configure_entry .menu1.config.f.x1 disabled {y n l}}
	global CONFIG_PROP_AUTHD_USER
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x2 normal {n l y}} else {configure_entry .menu1.config.f.x2 disabled {y n l}}
	global CONFIG_PROP_AUTHD_USERACL
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_USER == 1)} then {
	configure_entry .menu1.config.f.x3 normal {n l y}} else {configure_entry .menu1.config.f.x3 disabled {y n l}}
	global CONFIG_PROP_AUTHD_BWLIST
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x4 normal {n l y}} else {configure_entry .menu1.config.f.x4 disabled {y n l}}
	global CONFIG_PROP_AUTHD_LOCALHOST
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x5 normal {n l y}} else {configure_entry .menu1.config.f.x5 disabled {y n l}}
	global CONFIG_PROP_AUTHD_NASL
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x6 normal {n l y}} else {configure_entry .menu1.config.f.x6 disabled {y n l}}
	global CONFIG_PROP_AUTHD_P2P
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x7 normal {n l y}} else {configure_entry .menu1.config.f.x7 disabled {y n l}}
	global CONFIG_PROP_AUTHD_WWWLIST
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x8 normal {n l y}} else {configure_entry .menu1.config.f.x8 disabled {y n l}}
	global CONFIG_PROP_AUTHD_ZONELABS
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x9 normal {n l y}} else {configure_entry .menu1.config.f.x9 disabled {y n l}}
	global CONFIG_PROP_AUTHD_ZLAV
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_ZONELABS == 1)} then {
	configure_entry .menu1.config.f.x10 normal {n l y}} else {configure_entry .menu1.config.f.x10 disabled {y n l}}
	global CONFIG_PROP_AUTHD_DIRECT
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_ZONELABS == 1)} then {
	configure_entry .menu1.config.f.x11 normal {n l y}} else {configure_entry .menu1.config.f.x11 disabled {y n l}}
	global CONFIG_PROP_AUTHD_TESTER
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	configure_entry .menu1.config.f.x12 normal {n l y}} else {configure_entry .menu1.config.f.x12 disabled {y n l}}
	global CONFIG_USER_CGI
	global CONFIG_USER_BR_BR
	global CONFIG_USER_CGI_ETH1_BRIDGE
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_BR_BR == 1)} then {
	configure_entry .menu1.config.f.x21 normal {n l y}} else {configure_entry .menu1.config.f.x21 disabled {y n l}}
	global CONFIG_USER_CGI_NO_SERIAL
	if {($CONFIG_USER_CGI == 1)} then {
	configure_entry .menu1.config.f.x22 normal {n l y}} else {configure_entry .menu1.config.f.x22 disabled {y n l}}
	global CONFIG_USER_CGI_NO_COM2
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1)} then {
	configure_entry .menu1.config.f.x23 normal {n l y}} else {configure_entry .menu1.config.f.x23 disabled {y n l}}
	global CONFIG_USER_CGI_COM2_MODEM
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1) && ($CONFIG_USER_CGI_NO_COM2 != 1)} then {
	configure_entry .menu1.config.f.x24 normal {n l y}} else {configure_entry .menu1.config.f.x24 disabled {y n l}}
	global CONFIG_USER_CGI_NO_DIALIN
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1)} then {
	configure_entry .menu1.config.f.x25 normal {n l y}} else {configure_entry .menu1.config.f.x25 disabled {y n l}}
	global CONFIG_USER_CGI_DMZ
	if {($CONFIG_USER_CGI == 1)} then {
	configure_entry .menu1.config.f.x26 normal {n l y}} else {configure_entry .menu1.config.f.x26 disabled {y n l}}
	global CONFIG_USER_CGI_LOAD_BALANCING
	if {($CONFIG_USER_CGI == 1)} then {
	configure_entry .menu1.config.f.x27 normal {n l y}} else {configure_entry .menu1.config.f.x27 disabled {y n l}}
	global CONFIG_USER_CGI_VLAN
	if {($CONFIG_USER_CGI == 1)} then {
	configure_entry .menu1.config.f.x28 normal {n l y}} else {configure_entry .menu1.config.f.x28 disabled {y n l}}
	global CONFIG_USER_CGI_BRIDGE
	if {($CONFIG_USER_CGI == 1)} then {
	configure_entry .menu1.config.f.x29 normal {n l y}} else {configure_entry .menu1.config.f.x29 disabled {y n l}}
	global CONFIG_USER_CGI_LOOPBACK
	if {($CONFIG_USER_CGI == 1)} then {
	configure_entry .menu1.config.f.x30 normal {n l y}} else {configure_entry .menu1.config.f.x30 disabled {y n l}}
	global CONFIG_USER_FIREWALL_TOOLS
	global CONFIG_USER_FIREWALL_SCRIPT_ONLY
	if {($CONFIG_USER_FIREWALL_TOOLS == 1)} then {
	configure_entry .menu1.config.f.x33 normal {n l y}} else {configure_entry .menu1.config.f.x33 disabled {y n l}}
	global CONFIG_USER_CERBERIAN_PROXYAUTH
	global CONFIG_USER_CERBERIAN_AUTHACL
	if {($CONFIG_USER_CERBERIAN_PROXYAUTH == 1)} then {
	configure_entry .menu1.config.f.x38 normal {n l y}} else {configure_entry .menu1.config.f.x38 disabled {y n l}}
	global CONFIG_USER_FACTORY_FACTTEST
	global CONFIG_USER_FACTORY_ETHER_INTERFACE
	if {($CONFIG_USER_FACTORY_FACTTEST == 1)} then {.menu1.config.f.x46.x configure -state normal -foreground [ cget .ref -foreground ]; .menu1.config.f.x46.l configure -state normal; } else {.menu1.config.f.x46.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu1.config.f.x46.l configure -state disabled}
	global CONFIG_USER_GDSD_GDSD
	global CONFIG_USER_GDSD_GDSD_INET
	if {($CONFIG_USER_GDSD_GDSD == 1 || $CONFIG_USER_GDSD_GDSD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_GDSD_GDSD]];set CONFIG_USER_GDSD_GDSD_INET [sync_bool $CONFIG_USER_GDSD_GDSD_INET $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu1.config.f.x48 disabled {y};} else {configure_entry .menu1.config.f.x48 normal {y};}; configure_entry .menu1.config.f.x48 normal {n l}} else {configure_entry .menu1.config.f.x48 disabled {y n l}}
	global CONFIG_USER_MGMT_MGMT
	global CONFIG_PROP_REPORTD_REPORTD
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {
	configure_entry .menu1.config.f.x61 normal {n l y}} else {configure_entry .menu1.config.f.x61 disabled {y n l}}
	global CONFIG_USER_SGSNMPD_AGENT
	global CONFIG_PROP_SGSNMPD_FULLMIB2
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	configure_entry .menu1.config.f.x63 normal {n l y}} else {configure_entry .menu1.config.f.x63 disabled {y n l}}
	global CONFIG_USER_SGSNMPD_TCP
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	configure_entry .menu1.config.f.x64 normal {n l y}} else {configure_entry .menu1.config.f.x64 disabled {y n l}}
	global CONFIG_USER_SGSNMPD_TCPSSL
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	configure_entry .menu1.config.f.x65 normal {n l y}} else {configure_entry .menu1.config.f.x65 disabled {y n l}}
	global CONFIG_USER_SGSNMPD_SNAPGEAR
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	configure_entry .menu1.config.f.x66 normal {n l y}} else {configure_entry .menu1.config.f.x66 disabled {y n l}}
}


proc update_define_menu1 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LIB_LIBLDAP
	global CONFIG_USER_BUSYBOX_MD5SUM
	global CONFIG_LIB_LIBSSL
	global CONFIG_PROP_LIBSNAPGEAR
	global CONFIG_USER_MIGRATE_CONFIG
	global CONFIG_LIB_LIBDES
	global CONFIG_LIB_LIBAES
	global CONFIG_PROP_LIBSNAPGEARPP
	global CONFIG_USER_SGSNMPD_AGENT
	global CONFIG_USER_SGSNMPD_SNAPGEAR
	global CONFIG_USER_SGSNMPD_UDP
	global CONFIG_USER_TINYTCL_TCLSH
	global CONFIG_PROP_AUTHD_AUTHD
set CONFIG_PROP_AUTHD_AUTHD [expr $CONFIG_PROP_AUTHD_AUTHD|16]
	global CONFIG_PROP_AUTHD_CERBERIAN
set CONFIG_PROP_AUTHD_CERBERIAN [expr $CONFIG_PROP_AUTHD_CERBERIAN|16]
	global CONFIG_PROP_AUTHD_USER
set CONFIG_PROP_AUTHD_USER [expr $CONFIG_PROP_AUTHD_USER|16]
	global CONFIG_PROP_AUTHD_USERACL
set CONFIG_PROP_AUTHD_USERACL [expr $CONFIG_PROP_AUTHD_USERACL|16]
	global CONFIG_PROP_AUTHD_BWLIST
set CONFIG_PROP_AUTHD_BWLIST [expr $CONFIG_PROP_AUTHD_BWLIST|16]
	global CONFIG_PROP_AUTHD_LOCALHOST
set CONFIG_PROP_AUTHD_LOCALHOST [expr $CONFIG_PROP_AUTHD_LOCALHOST|16]
	global CONFIG_PROP_AUTHD_NASL
set CONFIG_PROP_AUTHD_NASL [expr $CONFIG_PROP_AUTHD_NASL|16]
	global CONFIG_PROP_AUTHD_P2P
set CONFIG_PROP_AUTHD_P2P [expr $CONFIG_PROP_AUTHD_P2P|16]
	global CONFIG_PROP_AUTHD_WWWLIST
set CONFIG_PROP_AUTHD_WWWLIST [expr $CONFIG_PROP_AUTHD_WWWLIST|16]
	global CONFIG_PROP_AUTHD_ZONELABS
set CONFIG_PROP_AUTHD_ZONELABS [expr $CONFIG_PROP_AUTHD_ZONELABS|16]
	global CONFIG_PROP_AUTHD_ZLAV
set CONFIG_PROP_AUTHD_ZLAV [expr $CONFIG_PROP_AUTHD_ZLAV|16]
	global CONFIG_PROP_AUTHD_DIRECT
set CONFIG_PROP_AUTHD_DIRECT [expr $CONFIG_PROP_AUTHD_DIRECT|16]
	global CONFIG_PROP_AUTHD_TESTER
set CONFIG_PROP_AUTHD_TESTER [expr $CONFIG_PROP_AUTHD_TESTER|16]
	global CONFIG_USER_CGI_ETH1_BRIDGE
set CONFIG_USER_CGI_ETH1_BRIDGE [expr $CONFIG_USER_CGI_ETH1_BRIDGE|16]
	global CONFIG_USER_CGI_NO_SERIAL
set CONFIG_USER_CGI_NO_SERIAL [expr $CONFIG_USER_CGI_NO_SERIAL|16]
	global CONFIG_USER_CGI_NO_COM2
set CONFIG_USER_CGI_NO_COM2 [expr $CONFIG_USER_CGI_NO_COM2|16]
	global CONFIG_USER_CGI_COM2_MODEM
set CONFIG_USER_CGI_COM2_MODEM [expr $CONFIG_USER_CGI_COM2_MODEM|16]
	global CONFIG_USER_CGI_NO_DIALIN
set CONFIG_USER_CGI_NO_DIALIN [expr $CONFIG_USER_CGI_NO_DIALIN|16]
	global CONFIG_USER_CGI_DMZ
set CONFIG_USER_CGI_DMZ [expr $CONFIG_USER_CGI_DMZ|16]
	global CONFIG_USER_CGI_LOAD_BALANCING
set CONFIG_USER_CGI_LOAD_BALANCING [expr $CONFIG_USER_CGI_LOAD_BALANCING|16]
	global CONFIG_USER_CGI_VLAN
set CONFIG_USER_CGI_VLAN [expr $CONFIG_USER_CGI_VLAN|16]
	global CONFIG_USER_CGI_BRIDGE
set CONFIG_USER_CGI_BRIDGE [expr $CONFIG_USER_CGI_BRIDGE|16]
	global CONFIG_USER_CGI_LOOPBACK
set CONFIG_USER_CGI_LOOPBACK [expr $CONFIG_USER_CGI_LOOPBACK|16]
	global CONFIG_USER_FIREWALL_SCRIPT_ONLY
set CONFIG_USER_FIREWALL_SCRIPT_ONLY [expr $CONFIG_USER_FIREWALL_SCRIPT_ONLY|16]
	global CONFIG_USER_CERBERIAN_AUTHACL
set CONFIG_USER_CERBERIAN_AUTHACL [expr $CONFIG_USER_CERBERIAN_AUTHACL|16]
	global CONFIG_PROP_REPORTD_REPORTD
set CONFIG_PROP_REPORTD_REPORTD [expr $CONFIG_PROP_REPORTD_REPORTD|16]
	global CONFIG_PROP_SGSNMPD_FULLMIB2
set CONFIG_PROP_SGSNMPD_FULLMIB2 [expr $CONFIG_PROP_SGSNMPD_FULLMIB2|16]
	global CONFIG_USER_SGSNMPD_TCP
set CONFIG_USER_SGSNMPD_TCP [expr $CONFIG_USER_SGSNMPD_TCP|16]
	global CONFIG_USER_SGSNMPD_TCPSSL
set CONFIG_USER_SGSNMPD_TCPSSL [expr $CONFIG_USER_SGSNMPD_TCPSSL|16]
set CONFIG_USER_SGSNMPD_SNAPGEAR [expr $CONFIG_USER_SGSNMPD_SNAPGEAR|16]
	global CONFIG_USER_IPTABLES_IPTABLES
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1)} then {
	set CONFIG_PROP_AUTHD_AUTHD [expr $CONFIG_PROP_AUTHD_AUTHD&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_CERBERIAN [expr $CONFIG_PROP_AUTHD_CERBERIAN&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_USER [expr $CONFIG_PROP_AUTHD_USER&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_USER == 1)} then {
	set CONFIG_PROP_AUTHD_USERACL [expr $CONFIG_PROP_AUTHD_USERACL&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_BWLIST [expr $CONFIG_PROP_AUTHD_BWLIST&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_LOCALHOST [expr $CONFIG_PROP_AUTHD_LOCALHOST&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_NASL [expr $CONFIG_PROP_AUTHD_NASL&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_P2P [expr $CONFIG_PROP_AUTHD_P2P&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_WWWLIST [expr $CONFIG_PROP_AUTHD_WWWLIST&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_ZONELABS [expr $CONFIG_PROP_AUTHD_ZONELABS&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_ZONELABS == 1)} then {
	set CONFIG_PROP_AUTHD_ZLAV [expr $CONFIG_PROP_AUTHD_ZLAV&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_ZONELABS == 1)} then {
	set CONFIG_PROP_AUTHD_DIRECT [expr $CONFIG_PROP_AUTHD_DIRECT&15]}
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {
	set CONFIG_PROP_AUTHD_TESTER [expr $CONFIG_PROP_AUTHD_TESTER&15]}
	global CONFIG_PROP_AMAZON_BOA_LDAP
	if {($CONFIG_PROP_AMAZON_BOA_LDAP == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBLDAP $CONSTANT_Y }
	global CONFIG_PROP_TAMS_CONCENTRATOR
	if {($CONFIG_PROP_TAMS_CONCENTRATOR == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBLDAP $CONSTANT_Y }
	global CONFIG_PROP_FSTHRASH_FSTHRASH
	if {($CONFIG_PROP_FSTHRASH_FSTHRASH == 1)} then {	global CONSTANT_Y
set CONFIG_USER_BUSYBOX_MD5SUM $CONSTANT_Y }
	global CONFIG_USER_CGI
	if {($CONFIG_USER_CGI == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_USER_BR_BR
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_BR_BR == 1)} then {
	set CONFIG_USER_CGI_ETH1_BRIDGE [expr $CONFIG_USER_CGI_ETH1_BRIDGE&15]}
	if {($CONFIG_USER_CGI == 1)} then {
	set CONFIG_USER_CGI_NO_SERIAL [expr $CONFIG_USER_CGI_NO_SERIAL&15]}
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1)} then {
	set CONFIG_USER_CGI_NO_COM2 [expr $CONFIG_USER_CGI_NO_COM2&15]}
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1) && ($CONFIG_USER_CGI_NO_COM2 != 1)} then {
	set CONFIG_USER_CGI_COM2_MODEM [expr $CONFIG_USER_CGI_COM2_MODEM&15]}
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1)} then {
	set CONFIG_USER_CGI_NO_DIALIN [expr $CONFIG_USER_CGI_NO_DIALIN&15]}
	if {($CONFIG_USER_CGI == 1)} then {
	set CONFIG_USER_CGI_DMZ [expr $CONFIG_USER_CGI_DMZ&15]}
	if {($CONFIG_USER_CGI == 1)} then {
	set CONFIG_USER_CGI_LOAD_BALANCING [expr $CONFIG_USER_CGI_LOAD_BALANCING&15]}
	if {($CONFIG_USER_CGI == 1)} then {
	set CONFIG_USER_CGI_VLAN [expr $CONFIG_USER_CGI_VLAN&15]}
	if {($CONFIG_USER_CGI == 1)} then {
	set CONFIG_USER_CGI_BRIDGE [expr $CONFIG_USER_CGI_BRIDGE&15]}
	if {($CONFIG_USER_CGI == 1)} then {
	set CONFIG_USER_CGI_LOOPBACK [expr $CONFIG_USER_CGI_LOOPBACK&15]}
	global CONFIG_USER_FIREWALL_TOOLS
	if {($CONFIG_USER_FIREWALL_TOOLS == 1)} then {
	set CONFIG_USER_FIREWALL_SCRIPT_ONLY [expr $CONFIG_USER_FIREWALL_SCRIPT_ONLY&15]}
	global CONFIG_PROP_IFMOND_IFMOND
	if {($CONFIG_USER_CGI == 1 || $CONFIG_USER_FIREWALL_TOOLS == 1 || $CONFIG_PROP_IFMOND_IFMOND == 1)} then {	global CONSTANT_Y
set CONFIG_PROP_LIBSNAPGEAR $CONSTANT_Y }
	if {($CONFIG_USER_CGI == 1 || $CONFIG_USER_FIREWALL_TOOLS == 1 || $CONFIG_PROP_IFMOND_IFMOND == 1)} then {	global CONSTANT_Y
set CONFIG_USER_MIGRATE_CONFIG $CONSTANT_Y }
	global CONFIG_USER_CERBERIAN_PROXYAUTH
	if {($CONFIG_USER_CERBERIAN_PROXYAUTH == 1)} then {
	set CONFIG_USER_CERBERIAN_AUTHACL [expr $CONFIG_USER_CERBERIAN_AUTHACL&15]}
	global CONFIG_USER_DESTEST_DESTEST
	if {($CONFIG_USER_DESTEST_DESTEST == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBDES $CONSTANT_Y }
	if {($CONFIG_USER_DESTEST_DESTEST == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBAES $CONSTANT_Y }
	global CONFIG_USER_DESTEST_DESPERF
	if {($CONFIG_USER_DESTEST_DESPERF == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBDES $CONSTANT_Y }
	if {($CONFIG_USER_DESTEST_DESPERF == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBAES $CONSTANT_Y }
	global CONFIG_USER_FACTORY_FACTTEST
	if {($CONFIG_USER_FACTORY_FACTTEST == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBDES $CONSTANT_Y }
	global CONFIG_USER_GDSD_GDSD
	if {($CONFIG_USER_GDSD_GDSD == 1)} then {	global CONSTANT_Y
set CONFIG_PROP_LIBSNAPGEARPP $CONSTANT_Y }
	global CONFIG_USER_GDSD_GDSD_INET
	if {($CONFIG_USER_GDSD_GDSD == 1 || $CONFIG_USER_GDSD_GDSD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_GDSD_GDSD]];set CONFIG_USER_GDSD_GDSD_INET [sync_bool $CONFIG_USER_GDSD_GDSD_INET $tmpvar_dep 0];set CONFIG_USER_GDSD_GDSD_INET [expr $CONFIG_USER_GDSD_GDSD_INET&15]}
	global CONFIG_USER_PKTDELAY_PKTDELAY
	if {($CONFIG_USER_PKTDELAY_PKTDELAY == 1)} then {	global CONSTANT_Y
set CONFIG_PROP_LIBSNAPGEARPP $CONSTANT_Y }
	global CONFIG_USER_MGMT_MGMT
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {	global CONSTANT_Y
set CONFIG_USER_SGSNMPD_AGENT $CONSTANT_Y }
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {	global CONSTANT_Y
set CONFIG_USER_SGSNMPD_SNAPGEAR $CONSTANT_Y }
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {
	set CONFIG_PROP_REPORTD_REPORTD [expr $CONFIG_PROP_REPORTD_REPORTD&15]}
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {	global CONSTANT_Y
set CONFIG_USER_SGSNMPD_UDP $CONSTANT_Y }
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	set CONFIG_PROP_SGSNMPD_FULLMIB2 [expr $CONFIG_PROP_SGSNMPD_FULLMIB2&15]}
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	set CONFIG_USER_SGSNMPD_TCP [expr $CONFIG_USER_SGSNMPD_TCP&15]}
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	set CONFIG_USER_SGSNMPD_TCPSSL [expr $CONFIG_USER_SGSNMPD_TCPSSL&15]}
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {
	set CONFIG_USER_SGSNMPD_SNAPGEAR [expr $CONFIG_USER_SGSNMPD_SNAPGEAR&15]}
	if {($CONFIG_USER_SGSNMPD_TCPSSL == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_PROP_WCL_WCL
	if {($CONFIG_PROP_WCL_WCL == 1)} then {	global CONSTANT_Y
set CONFIG_USER_TINYTCL_TCLSH $CONSTANT_Y }
}


menu_option menu2 2 "Core Applications"
proc menu2 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 2}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 2]]
	message $w.m -width 400 -aspect 300 -text \
		"Core Applications"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Core Applications" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 2; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu3 .menu3 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 2 0 "init" CONFIG_USER_INIT_INIT
	bool $w.config.f 2 1 "  enable console shell" CONFIG_USER_INIT_CONSOLE_SH
	bool $w.config.f 2 2 "  execute firewall rules" CONFIG_USER_INIT_RUN_FIREWALL
	global tmpvar_0
	minimenu $w.config.f 2 3 "Shell Program" tmpvar_0 CONFIG_USER_SASH_SH
	menu $w.config.f.x3.x.menu -tearoffcommand "menutitle \"Shell Program\""
	$w.config.f.x3.x.menu add radiobutton -label "Sash" -variable tmpvar_0 -value "Sash" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "minix-shell" -variable tmpvar_0 -value "minix-shell" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "nwsh" -variable tmpvar_0 -value "nwsh" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "bash" -variable tmpvar_0 -value "bash" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "Other" -variable tmpvar_0 -value "Other" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 5
	bool $w.config.f 2 4 "simple history (sash)" CONFIG_USER_SASH_HISTORY
	bool $w.config.f 2 5 "reboot (sash)" CONFIG_USER_SASH_REBOOT
	bool $w.config.f 2 6 "SnapGear reboot script" CONFIG_USER_SASH_REBOOT_SNAPGEAR
	bool $w.config.f 2 7 "shutdown (sash)" CONFIG_USER_SASH_SHUTDOWN
	bool $w.config.f 2 8 "expand" CONFIG_USER_INIT_EXPAND
	bool $w.config.f 2 9 "  expand should not write zeroes" CONFIG_USER_INIT_EXPAND_NOZEROES
	bool $w.config.f 2 10 "version" CONFIG_USER_VERSION_VERSION
	bool $w.config.f 2 11 "login" CONFIG_USER_LOGIN_LOGIN
	bool $w.config.f 2 12 "  old passwords" CONFIG_USER_OLD_PASSWORDS
	bool $w.config.f 2 13 "  only allow root login" CONFIG_USER_ONLY_ROOT
	bool $w.config.f 2 14 "agetty" CONFIG_USER_AGETTY_AGETTY
	bool $w.config.f 2 15 "gettyd" CONFIG_USER_GETTYD_GETTYD
	bool $w.config.f 2 16 "passwd" CONFIG_USER_LOGIN_PASSWD
	bool $w.config.f 2 17 "cron" CONFIG_USER_CRON_CRON
	comment $w.config.f 2 18 "Real Time Clock"
	bool $w.config.f 2 19 "hwclock" CONFIG_USER_HWCLOCK_HWCLOCK
	bool $w.config.f 2 20 "rtc m41t11" CONFIG_USER_RTC_M41T11
	bool $w.config.f 2 21 "rtc ds1302" CONFIG_USER_RTC_DS1302
	comment $w.config.f 2 22 "Vixie-cron"
	bool $w.config.f 2 23 "cron" CONFIG_USER_VIXIECRON_CRON
	bool $w.config.f 2 24 "crontab" CONFIG_USER_VIXIECRON_CRONTAB
	comment $w.config.f 2 25 "at"
	bool $w.config.f 2 26 "at" CONFIG_USER_AT_AT
	bool $w.config.f 2 27 "atd" CONFIG_USER_AT_ATD
	bool $w.config.f 2 28 "atrun" CONFIG_USER_AT_ATRUN



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu2 {} {
	global CONFIG_USER_SASH_SH
	global CONFIG_USER_SASH_HISTORY
	if {($CONFIG_USER_SASH_SH == 1)} then {
	configure_entry .menu2.config.f.x4 normal {n l y}} else {configure_entry .menu2.config.f.x4 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_BUSYBOX
	global CONFIG_USER_SASH_REBOOT
	global CONFIG_USER_SASH_REBOOT_SNAPGEAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1 && $CONFIG_USER_SASH_REBOOT != 1)} then {
	configure_entry .menu2.config.f.x6 normal {n l y}} else {configure_entry .menu2.config.f.x6 disabled {y n l}}
	global CONFIG_USER_INIT_EXPAND
	global CONFIG_USER_INIT_EXPAND_NOZEROES
	if {($CONFIG_USER_INIT_EXPAND == 1)} then {
	configure_entry .menu2.config.f.x9 normal {n l y}} else {configure_entry .menu2.config.f.x9 disabled {y n l}}
}


proc update_define_menu2 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_USER_BUSYBOX_KILLALL
	global CONFIG_USER_SASH_HISTORY
set CONFIG_USER_SASH_HISTORY [expr $CONFIG_USER_SASH_HISTORY|16]
	global CONFIG_USER_SASH_REBOOT_SNAPGEAR
set CONFIG_USER_SASH_REBOOT_SNAPGEAR [expr $CONFIG_USER_SASH_REBOOT_SNAPGEAR|16]
	global CONFIG_USER_INIT_EXPAND_NOZEROES
set CONFIG_USER_INIT_EXPAND_NOZEROES [expr $CONFIG_USER_INIT_EXPAND_NOZEROES|16]
	global tmpvar_0
	global CONFIG_USER_SASH_SH
	if {$tmpvar_0 == "Sash"} then {set CONFIG_USER_SASH_SH 1} else {set CONFIG_USER_SASH_SH 0}
	global CONFIG_USER_SH_SH
	if {$tmpvar_0 == "minix-shell"} then {set CONFIG_USER_SH_SH 1} else {set CONFIG_USER_SH_SH 0}
	global CONFIG_USER_NWSH_SH
	if {$tmpvar_0 == "nwsh"} then {set CONFIG_USER_NWSH_SH 1} else {set CONFIG_USER_NWSH_SH 0}
	global CONFIG_USER_BASH_BASH
	if {$tmpvar_0 == "bash"} then {set CONFIG_USER_BASH_BASH 1} else {set CONFIG_USER_BASH_BASH 0}
	global CONFIG_USER_OTHER_SH
	if {$tmpvar_0 == "Other"} then {set CONFIG_USER_OTHER_SH 1} else {set CONFIG_USER_OTHER_SH 0}
	if {($CONFIG_USER_SASH_SH == 1)} then {
	set CONFIG_USER_SASH_HISTORY [expr $CONFIG_USER_SASH_HISTORY&15]}
	global CONFIG_USER_BUSYBOX_BUSYBOX
	global CONFIG_USER_SASH_REBOOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1 && $CONFIG_USER_SASH_REBOOT != 1)} then {
	set CONFIG_USER_SASH_REBOOT_SNAPGEAR [expr $CONFIG_USER_SASH_REBOOT_SNAPGEAR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1 && $CONFIG_USER_SASH_REBOOT != 1) && ($CONFIG_USER_SASH_REBOOT_SNAPGEAR)} then {	global CONSTANT_Y
set CONFIG_USER_BUSYBOX_KILLALL $CONSTANT_Y }
	global CONFIG_USER_INIT_EXPAND
	if {($CONFIG_USER_INIT_EXPAND == 1)} then {
	set CONFIG_USER_INIT_EXPAND_NOZEROES [expr $CONFIG_USER_INIT_EXPAND_NOZEROES&15]}
}


menu_option menu3 3 "Library Configuration"
proc menu3 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 3}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 3]]
	message $w.m -width 400 -aspect 300 -text \
		"Library Configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Library Configuration" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 3; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu4 .menu4 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	comment $w.config.f 3 0 "Force build (Normally built when required)"
	bool $w.config.f 3 1 "Build libAES" CONFIG_LIB_LIBAES_FORCE
	bool $w.config.f 3 2 "Build libDES" CONFIG_LIB_LIBDES_FORCE
	bool $w.config.f 3 3 "Build libSSL" CONFIG_LIB_LIBSSL_FORCE
	bool $w.config.f 3 4 "Build libGMP" CONFIG_LIB_LIBGMP_FORCE
	bool $w.config.f 3 5 "Build libG" CONFIG_LIB_LIBG_FORCE
	bool $w.config.f 3 6 "Build libldap" CONFIG_LIB_LIBLDAP_FORCE
	bool $w.config.f 3 7 "Build libPAM" CONFIG_LIB_LIBPAM_FORCE
	bool $w.config.f 3 8 "Build libPCAP" CONFIG_LIB_LIBPCAP_FORCE
	bool $w.config.f 3 9 "Build libZ" CONFIG_LIB_ZLIB_FORCE
	bool $w.config.f 3 10 "Build libATM" CONFIG_LIB_LIBATM_FORCE
	bool $w.config.f 3 11 "Build libpng" CONFIG_LIB_LIBPNG_FORCE
	bool $w.config.f 3 12 "Build libjpeg" CONFIG_LIB_LIBJPEG_FORCE
	bool $w.config.f 3 13 "Build ncurses" CONFIG_LIB_NCURSES_FORCE
	comment $w.config.f 3 14 "Library Configuration"
	bool $w.config.f 3 15 "Support time zones" CONFIG_LIB_UC_LIBC_TIMEZONE
	bool $w.config.f 3 16 "  Always load from file" CONFIG_LIB_UC_LIBC_TZ_FROM_FILE



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu3 {} {
	global CONFIG_LIB_UC_LIBC_TIMEZONE
	global CONFIG_LIB_UC_LIBC_TZ_FROM_FILE
	if {($CONFIG_LIB_UC_LIBC_TIMEZONE == 1)} then {
	configure_entry .menu3.config.f.x16 normal {n l y}} else {configure_entry .menu3.config.f.x16 disabled {y n l}}
}


proc update_define_menu3 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LIB_UC_LIBC_TZ_FROM_FILE
set CONFIG_LIB_UC_LIBC_TZ_FROM_FILE [expr $CONFIG_LIB_UC_LIBC_TZ_FROM_FILE|16]
	global CONFIG_LIB_UC_LIBC_TIMEZONE
	if {($CONFIG_LIB_UC_LIBC_TIMEZONE == 1)} then {
	set CONFIG_LIB_UC_LIBC_TZ_FROM_FILE [expr $CONFIG_LIB_UC_LIBC_TZ_FROM_FILE&15]}
}


menu_option menu4 4 "Flash Tools"
proc menu4 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 4}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 4]]
	message $w.m -width 400 -aspect 300 -text \
		"Flash Tools"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Flash Tools" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 4; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu5 .menu5 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 4 0 "flashw" CONFIG_USER_FLASHW_FLASHW
	bool $w.config.f 4 1 "netflash" CONFIG_USER_NETFLASH_NETFLASH
	bool $w.config.f 4 2 "flash" CONFIG_USER_FLASH_FLASH
	bool $w.config.f 4 3 "  netflash uses FTP" CONFIG_USER_NETFLASH_WITH_FTP
	bool $w.config.f 4 4 "  netflash recognises version" CONFIG_USER_NETFLASH_VERSION
	bool $w.config.f 4 5 "  netflash accepts same version" CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT
	bool $w.config.f 4 6 "  netflash accepts older version" CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER
	bool $w.config.f 4 7 "  netflash can decompress" CONFIG_USER_NETFLASH_DECOMPRESS
	bool $w.config.f 4 8 "  netflash auto-decompresses" CONFIG_USER_NETFLASH_AUTODECOMPRESS
	bool $w.config.f 4 9 "  netflash uses HMAC-MD5 signature" CONFIG_USER_NETFLASH_HMACMD5
	istring $w.config.f 4 10 "  netflash HMAC-MD5 key" CONFIG_USER_NETFLASH_HMACMD5_KEY
	bool $w.config.f 4 11 "  recover bios only" CONFIG_USER_RECOVER_BIOS
	bool $w.config.f 4 12 "  netflash needs public key encryption" CONFIG_USER_NETFLASH_CRYPTO
	bool $w.config.f 4 13 "  netflash optional public key encryption" CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL
	bool $w.config.f 4 14 "bootloader uses server config from flash" CONFIG_USER_RECOVER_STATIC_TFTP
	bool $w.config.f 4 15 "recover" CONFIG_USER_RECOVER_RECOVER
	istring $w.config.f 4 16 "  recover ethernet interface" CONFIG_USER_RECOVER_ETHERNET_INTERFACE
	bool $w.config.f 4 17 "  recover uses static server" CONFIG_USER_RECOVER_USE_STATIC_SERVER
	istring $w.config.f 4 18 "  recover static server" CONFIG_USER_RECOVER_STATIC_SERVER
	bool $w.config.f 4 19 "  recover preserves existing config" CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS
	bool $w.config.f 4 20 "flashloader" CONFIG_USER_BOOTTOOLS_FLASHLOADER
	bool $w.config.f 4 21 "himemloader" CONFIG_USER_BOOTTOOLS_HIMEMLOADER
	comment $w.config.f 4 22 "MTD utils"
	bool $w.config.f 4 23 "mtd-utils" CONFIG_USER_MTDUTILS
	dep_bool $w.config.f 4 24 "  erase" CONFIG_USER_MTDUTILS_ERASE
	dep_bool $w.config.f 4 25 "  eraseall" CONFIG_USER_MTDUTILS_ERASEALL
	dep_bool $w.config.f 4 26 "  ftl_check" CONFIG_USER_MTDUTILS_FTL_CHECK
	dep_bool $w.config.f 4 27 "  ftl_format" CONFIG_USER_MTDUTILS_FTL_FORMAT
	dep_bool $w.config.f 4 28 "  mkfs.jffs" CONFIG_USER_MTDUTILS_MKFSJFFS
	dep_bool $w.config.f 4 29 "  mkfs.jff2" CONFIG_USER_MTDUTILS_MKFSJFFS2
	dep_bool $w.config.f 4 30 "  nftldump" CONFIG_USER_MTDUTILS_NFTLDUMP
	dep_bool $w.config.f 4 31 "  nftl_format" CONFIG_USER_MTDUTILS_NFTL_FORMAT
	dep_bool $w.config.f 4 32 "  nanddump" CONFIG_USER_MTDUTILS_NANDDUMP
	dep_bool $w.config.f 4 33 "  nandtest" CONFIG_USER_MTDUTILS_NANDTEST
	dep_bool $w.config.f 4 34 "  nandwrite" CONFIG_USER_MTDUTILS_NANDWRITE
	dep_bool $w.config.f 4 35 "  doc_loadbios" CONFIG_USER_MTDUTILS_DOC_LOADBIOS
	dep_bool $w.config.f 4 36 "  doc_loadipl" CONFIG_USER_MTDUTILS_DOC_LOADIPL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu4 {} {
	global CONFIG_USER_NETFLASH_NETFLASH
	global CONFIG_USER_FLASHW_FLASHW
	global CONFIG_USER_FLASH_FLASH
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 && $CONFIG_USER_FLASHW_FLASHW == 1)} then {
	configure_entry .menu4.config.f.x2 normal {n l y}} else {configure_entry .menu4.config.f.x2 disabled {y n l}}
	global CONFIG_USER_RECOVER_RECOVER
	global CONFIG_USER_NETFLASH_WITH_FTP
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x3 normal {n l y}} else {configure_entry .menu4.config.f.x3 disabled {y n l}}
	global CONFIG_USER_NETFLASH_VERSION
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x4 normal {n l y}} else {configure_entry .menu4.config.f.x4 disabled {y n l}}
	global CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_VERSION == 1)} then {
	configure_entry .menu4.config.f.x5 normal {n l y}} else {configure_entry .menu4.config.f.x5 disabled {y n l}}
	global CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_VERSION == 1)} then {
	configure_entry .menu4.config.f.x6 normal {n l y}} else {configure_entry .menu4.config.f.x6 disabled {y n l}}
	global CONFIG_USER_NETFLASH_DECOMPRESS
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x7 normal {n l y}} else {configure_entry .menu4.config.f.x7 disabled {y n l}}
	global CONFIG_USER_NETFLASH_AUTODECOMPRESS
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_DECOMPRESS == 1)} then {
	configure_entry .menu4.config.f.x8 normal {n l y}} else {configure_entry .menu4.config.f.x8 disabled {y n l}}
	global CONFIG_USER_NETFLASH_HMACMD5
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x9 normal {n l y}} else {configure_entry .menu4.config.f.x9 disabled {y n l}}
	global CONFIG_USER_NETFLASH_HMACMD5_KEY
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_HMACMD5 == 1)} then {.menu4.config.f.x10.x configure -state normal -foreground [ cget .ref -foreground ]; .menu4.config.f.x10.l configure -state normal; } else {.menu4.config.f.x10.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu4.config.f.x10.l configure -state disabled}
	global CONFIG_USER_RECOVER_BIOS
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x11 normal {n l y}} else {configure_entry .menu4.config.f.x11 disabled {y n l}}
	global CONFIG_USER_NETFLASH_CRYPTO
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x12 normal {n l y}} else {configure_entry .menu4.config.f.x12 disabled {y n l}}
	global CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {
	configure_entry .menu4.config.f.x13 normal {n l y}} else {configure_entry .menu4.config.f.x13 disabled {y n l}}
	global CONFIG_USER_RECOVER_ETHERNET_INTERFACE
	if {($CONFIG_USER_RECOVER_RECOVER == 1)} then {.menu4.config.f.x16.x configure -state normal -foreground [ cget .ref -foreground ]; .menu4.config.f.x16.l configure -state normal; } else {.menu4.config.f.x16.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu4.config.f.x16.l configure -state disabled}
	global CONFIG_USER_RECOVER_STATIC_TFTP
	global CONFIG_USER_RECOVER_USE_STATIC_SERVER
	if {($CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_RECOVER_STATIC_TFTP == 0)} then {
	configure_entry .menu4.config.f.x17 normal {n l y}} else {configure_entry .menu4.config.f.x17 disabled {y n l}}
	global CONFIG_USER_RECOVER_STATIC_SERVER
	if {($CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_RECOVER_STATIC_TFTP == 0) && ($CONFIG_USER_RECOVER_USE_STATIC_SERVER == 1)} then {.menu4.config.f.x18.x configure -state normal -foreground [ cget .ref -foreground ]; .menu4.config.f.x18.l configure -state normal; } else {.menu4.config.f.x18.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu4.config.f.x18.l configure -state disabled}
	global CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS
	if {($CONFIG_USER_RECOVER_RECOVER == 1)} then {
	configure_entry .menu4.config.f.x19 normal {n l y}} else {configure_entry .menu4.config.f.x19 disabled {y n l}}
	global CONFIG_USER_MTDUTILS
	global CONFIG_USER_MTDUTILS_ERASE
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_ERASE [sync_bool $CONFIG_USER_MTDUTILS_ERASE $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x24 disabled {y};} else {configure_entry .menu4.config.f.x24 normal {y};}; configure_entry .menu4.config.f.x24 normal {n l}} else {configure_entry .menu4.config.f.x24 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_ERASEALL
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_ERASEALL [sync_bool $CONFIG_USER_MTDUTILS_ERASEALL $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x25 disabled {y};} else {configure_entry .menu4.config.f.x25 normal {y};}; configure_entry .menu4.config.f.x25 normal {n l}} else {configure_entry .menu4.config.f.x25 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_FTL_CHECK
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_FTL_CHECK [sync_bool $CONFIG_USER_MTDUTILS_FTL_CHECK $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x26 disabled {y};} else {configure_entry .menu4.config.f.x26 normal {y};}; configure_entry .menu4.config.f.x26 normal {n l}} else {configure_entry .menu4.config.f.x26 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_FTL_FORMAT
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_FTL_FORMAT [sync_bool $CONFIG_USER_MTDUTILS_FTL_FORMAT $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x27 disabled {y};} else {configure_entry .menu4.config.f.x27 normal {y};}; configure_entry .menu4.config.f.x27 normal {n l}} else {configure_entry .menu4.config.f.x27 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_MKFSJFFS
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_MKFSJFFS [sync_bool $CONFIG_USER_MTDUTILS_MKFSJFFS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x28 disabled {y};} else {configure_entry .menu4.config.f.x28 normal {y};}; configure_entry .menu4.config.f.x28 normal {n l}} else {configure_entry .menu4.config.f.x28 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_MKFSJFFS2
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_MKFSJFFS2 [sync_bool $CONFIG_USER_MTDUTILS_MKFSJFFS2 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x29 disabled {y};} else {configure_entry .menu4.config.f.x29 normal {y};}; configure_entry .menu4.config.f.x29 normal {n l}} else {configure_entry .menu4.config.f.x29 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_NFTLDUMP
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NFTLDUMP [sync_bool $CONFIG_USER_MTDUTILS_NFTLDUMP $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x30 disabled {y};} else {configure_entry .menu4.config.f.x30 normal {y};}; configure_entry .menu4.config.f.x30 normal {n l}} else {configure_entry .menu4.config.f.x30 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_NFTL_FORMAT
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NFTL_FORMAT [sync_bool $CONFIG_USER_MTDUTILS_NFTL_FORMAT $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x31 disabled {y};} else {configure_entry .menu4.config.f.x31 normal {y};}; configure_entry .menu4.config.f.x31 normal {n l}} else {configure_entry .menu4.config.f.x31 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_NANDDUMP
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NANDDUMP [sync_bool $CONFIG_USER_MTDUTILS_NANDDUMP $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x32 disabled {y};} else {configure_entry .menu4.config.f.x32 normal {y};}; configure_entry .menu4.config.f.x32 normal {n l}} else {configure_entry .menu4.config.f.x32 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_NANDTEST
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NANDTEST [sync_bool $CONFIG_USER_MTDUTILS_NANDTEST $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x33 disabled {y};} else {configure_entry .menu4.config.f.x33 normal {y};}; configure_entry .menu4.config.f.x33 normal {n l}} else {configure_entry .menu4.config.f.x33 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_NANDWRITE
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NANDWRITE [sync_bool $CONFIG_USER_MTDUTILS_NANDWRITE $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x34 disabled {y};} else {configure_entry .menu4.config.f.x34 normal {y};}; configure_entry .menu4.config.f.x34 normal {n l}} else {configure_entry .menu4.config.f.x34 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_DOC_LOADBIOS
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_DOC_LOADBIOS [sync_bool $CONFIG_USER_MTDUTILS_DOC_LOADBIOS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x35 disabled {y};} else {configure_entry .menu4.config.f.x35 normal {y};}; configure_entry .menu4.config.f.x35 normal {n l}} else {configure_entry .menu4.config.f.x35 disabled {y n l}}
	global CONFIG_USER_MTDUTILS_DOC_LOADIPL
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_DOC_LOADIPL [sync_bool $CONFIG_USER_MTDUTILS_DOC_LOADIPL $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x36 disabled {y};} else {configure_entry .menu4.config.f.x36 normal {y};}; configure_entry .menu4.config.f.x36 normal {n l}} else {configure_entry .menu4.config.f.x36 disabled {y n l}}
}


proc update_define_menu4 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LIB_ZLIB
	global CONFIG_LIB_LIBAES
	global CONFIG_LIB_LIBSSL
	global CONFIG_USER_FLASH_FLASH
set CONFIG_USER_FLASH_FLASH [expr $CONFIG_USER_FLASH_FLASH|16]
	global CONFIG_USER_NETFLASH_WITH_FTP
set CONFIG_USER_NETFLASH_WITH_FTP [expr $CONFIG_USER_NETFLASH_WITH_FTP|16]
	global CONFIG_USER_NETFLASH_VERSION
set CONFIG_USER_NETFLASH_VERSION [expr $CONFIG_USER_NETFLASH_VERSION|16]
	global CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT
set CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT [expr $CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT|16]
	global CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER
set CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER [expr $CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER|16]
	global CONFIG_USER_NETFLASH_DECOMPRESS
set CONFIG_USER_NETFLASH_DECOMPRESS [expr $CONFIG_USER_NETFLASH_DECOMPRESS|16]
	global CONFIG_USER_NETFLASH_AUTODECOMPRESS
set CONFIG_USER_NETFLASH_AUTODECOMPRESS [expr $CONFIG_USER_NETFLASH_AUTODECOMPRESS|16]
	global CONFIG_USER_NETFLASH_HMACMD5
set CONFIG_USER_NETFLASH_HMACMD5 [expr $CONFIG_USER_NETFLASH_HMACMD5|16]
	global CONFIG_USER_RECOVER_BIOS
set CONFIG_USER_RECOVER_BIOS [expr $CONFIG_USER_RECOVER_BIOS|16]
	global CONFIG_USER_NETFLASH_CRYPTO
set CONFIG_USER_NETFLASH_CRYPTO [expr $CONFIG_USER_NETFLASH_CRYPTO|16]
	global CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL
set CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL [expr $CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL|16]
	global CONFIG_USER_RECOVER_USE_STATIC_SERVER
set CONFIG_USER_RECOVER_USE_STATIC_SERVER [expr $CONFIG_USER_RECOVER_USE_STATIC_SERVER|16]
	global CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS
set CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS [expr $CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS|16]
	global CONFIG_USER_NETFLASH_NETFLASH
	global CONFIG_USER_FLASHW_FLASHW
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 && $CONFIG_USER_FLASHW_FLASHW == 1)} then {
	set CONFIG_USER_FLASH_FLASH [expr $CONFIG_USER_FLASH_FLASH&15]}
	global CONFIG_USER_RECOVER_RECOVER
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_NETFLASH_WITH_FTP [expr $CONFIG_USER_NETFLASH_WITH_FTP&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_NETFLASH_VERSION [expr $CONFIG_USER_NETFLASH_VERSION&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_VERSION == 1)} then {
	set CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT [expr $CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_VERSION == 1)} then {
	set CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER [expr $CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_NETFLASH_DECOMPRESS [expr $CONFIG_USER_NETFLASH_DECOMPRESS&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_DECOMPRESS == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_ZLIB $CONSTANT_Y }
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_DECOMPRESS == 1)} then {
	set CONFIG_USER_NETFLASH_AUTODECOMPRESS [expr $CONFIG_USER_NETFLASH_AUTODECOMPRESS&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_NETFLASH_HMACMD5 [expr $CONFIG_USER_NETFLASH_HMACMD5&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_RECOVER_BIOS [expr $CONFIG_USER_RECOVER_BIOS&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_NETFLASH_CRYPTO [expr $CONFIG_USER_NETFLASH_CRYPTO&15]}
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBAES $CONSTANT_Y }
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {
	set CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL [expr $CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL&15]}
	global CONFIG_USER_RECOVER_STATIC_TFTP
	if {($CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_RECOVER_STATIC_TFTP == 0)} then {
	set CONFIG_USER_RECOVER_USE_STATIC_SERVER [expr $CONFIG_USER_RECOVER_USE_STATIC_SERVER&15]}
	if {($CONFIG_USER_RECOVER_RECOVER == 1)} then {
	set CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS [expr $CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS&15]}
	global CONFIG_USER_MTDUTILS
	global CONFIG_USER_MTDUTILS_ERASE
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_ERASE [sync_bool $CONFIG_USER_MTDUTILS_ERASE $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_ERASE [expr $CONFIG_USER_MTDUTILS_ERASE&15]}
	global CONFIG_USER_MTDUTILS_ERASEALL
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_ERASEALL [sync_bool $CONFIG_USER_MTDUTILS_ERASEALL $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_ERASEALL [expr $CONFIG_USER_MTDUTILS_ERASEALL&15]}
	global CONFIG_USER_MTDUTILS_FTL_CHECK
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_FTL_CHECK [sync_bool $CONFIG_USER_MTDUTILS_FTL_CHECK $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_FTL_CHECK [expr $CONFIG_USER_MTDUTILS_FTL_CHECK&15]}
	global CONFIG_USER_MTDUTILS_FTL_FORMAT
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_FTL_FORMAT [sync_bool $CONFIG_USER_MTDUTILS_FTL_FORMAT $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_FTL_FORMAT [expr $CONFIG_USER_MTDUTILS_FTL_FORMAT&15]}
	global CONFIG_USER_MTDUTILS_MKFSJFFS
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_MKFSJFFS [sync_bool $CONFIG_USER_MTDUTILS_MKFSJFFS $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_MKFSJFFS [expr $CONFIG_USER_MTDUTILS_MKFSJFFS&15]}
	global CONFIG_USER_MTDUTILS_MKFSJFFS2
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_MKFSJFFS2 [sync_bool $CONFIG_USER_MTDUTILS_MKFSJFFS2 $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_MKFSJFFS2 [expr $CONFIG_USER_MTDUTILS_MKFSJFFS2&15]}
	global CONFIG_USER_MTDUTILS_NFTLDUMP
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NFTLDUMP [sync_bool $CONFIG_USER_MTDUTILS_NFTLDUMP $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_NFTLDUMP [expr $CONFIG_USER_MTDUTILS_NFTLDUMP&15]}
	global CONFIG_USER_MTDUTILS_NFTL_FORMAT
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NFTL_FORMAT [sync_bool $CONFIG_USER_MTDUTILS_NFTL_FORMAT $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_NFTL_FORMAT [expr $CONFIG_USER_MTDUTILS_NFTL_FORMAT&15]}
	global CONFIG_USER_MTDUTILS_NANDDUMP
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NANDDUMP [sync_bool $CONFIG_USER_MTDUTILS_NANDDUMP $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_NANDDUMP [expr $CONFIG_USER_MTDUTILS_NANDDUMP&15]}
	global CONFIG_USER_MTDUTILS_NANDTEST
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NANDTEST [sync_bool $CONFIG_USER_MTDUTILS_NANDTEST $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_NANDTEST [expr $CONFIG_USER_MTDUTILS_NANDTEST&15]}
	global CONFIG_USER_MTDUTILS_NANDWRITE
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_NANDWRITE [sync_bool $CONFIG_USER_MTDUTILS_NANDWRITE $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_NANDWRITE [expr $CONFIG_USER_MTDUTILS_NANDWRITE&15]}
	global CONFIG_USER_MTDUTILS_DOC_LOADBIOS
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_DOC_LOADBIOS [sync_bool $CONFIG_USER_MTDUTILS_DOC_LOADBIOS $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_DOC_LOADBIOS [expr $CONFIG_USER_MTDUTILS_DOC_LOADBIOS&15]}
	global CONFIG_USER_MTDUTILS_DOC_LOADIPL
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_MTDUTILS]];set CONFIG_USER_MTDUTILS_DOC_LOADIPL [sync_bool $CONFIG_USER_MTDUTILS_DOC_LOADIPL $tmpvar_dep 0];set CONFIG_USER_MTDUTILS_DOC_LOADIPL [expr $CONFIG_USER_MTDUTILS_DOC_LOADIPL&15]}
	if {($CONFIG_USER_MTDUTILS == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_ZLIB $CONSTANT_Y }
}


menu_option menu5 5 "Filesystem Applications"
proc menu5 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 5}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 5]]
	message $w.m -width 400 -aspect 300 -text \
		"Filesystem Applications"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Filesystem Applications" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 5; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu6 .menu6 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 5 0 "flatfsd" CONFIG_USER_FLATFSD_FLATFSD
	global tmpvar_1
	minimenu $w.config.f 5 1 "  flatfsd storage type" tmpvar_1 CONFIG_USER_FLATFSD_AUTO
	menu $w.config.f.x1.x.menu -tearoffcommand "menutitle \"  flatfsd storage type\""
	$w.config.f.x1.x.menu add radiobutton -label "Auto" -variable tmpvar_1 -value "Auto" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "Filesystem" -variable tmpvar_1 -value "Filesystem" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "Disklike" -variable tmpvar_1 -value "Disklike" -command "update_active"
	menusplit $w $w.config.f.x1.x.menu 3
	bool $w.config.f 5 2 "mount" CONFIG_USER_MOUNT_MOUNT
	bool $w.config.f 5 3 "umount" CONFIG_USER_MOUNT_UMOUNT
	bool $w.config.f 5 4 "fdisk" CONFIG_USER_FDISK_FDISK
	bool $w.config.f 5 5 "sfdisk" CONFIG_USER_FDISK_SFDISK
	comment $w.config.f 5 6 "EXT2"
	bool $w.config.f 5 7 "e2fsck" CONFIG_USER_E2FSPROGS_E2FSCK_E2FSCK
	bool $w.config.f 5 8 "mke2fs" CONFIG_USER_E2FSPROGS_MISC_MKE2FS
	bool $w.config.f 5 9 "badblocks" CONFIG_USER_E2FSPROGS_MISC_BADBLOCKS
	bool $w.config.f 5 10 "chattr" CONFIG_USER_E2FSPROGS_MISC_CHATTR
	bool $w.config.f 5 11 "dumpe2fs" CONFIG_USER_E2FSPROGS_MISC_DUMPE2FS
	bool $w.config.f 5 12 "e2label" CONFIG_USER_E2FSPROGS_MISC_E2LABEL
	bool $w.config.f 5 13 "fsck" CONFIG_USER_E2FSPROGS_MISC_FSCK
	bool $w.config.f 5 14 "lsattr" CONFIG_USER_E2FSPROGS_MISC_LSATTR
	bool $w.config.f 5 15 "mklost+found" CONFIG_USER_E2FSPROGS_MISC_MKLOST_FOUND
	bool $w.config.f 5 16 "tune2fs" CONFIG_USER_E2FSPROGS_MISC_TUNE2FS
	bool $w.config.f 5 17 "uuidgen" CONFIG_USER_E2FSPROGS_MISC_UUIDGEN
	comment $w.config.f 5 18 "RESIERFS"
	bool $w.config.f 5 19 "reiserfsprogs" CONFIG_USER_REISERFSPROGS
	bool $w.config.f 5 20 "  debugreiserfs" CONFIG_USER_REISERFSPROGS_DEBUGRESIERFS
	bool $w.config.f 5 21 "  mkreiserfs" CONFIG_USER_REISERFSPROGS_MKREISERFS
	bool $w.config.f 5 22 "  reiserfsck" CONFIG_USER_REISERFSPROGS_REISERFSCK
	bool $w.config.f 5 23 "  resize_reiserfs" CONFIG_USER_REISERFSPROGS_RESIZE_REISERFS
	bool $w.config.f 5 24 "  unpack" CONFIG_USER_REISERFSPROGS_UNPACK
	comment $w.config.f 5 25 "SAMBA"
	bool $w.config.f 5 26 "samba" CONFIG_USER_SAMBA
	bool $w.config.f 5 27 "  smbd" CONFIG_USER_SAMBA_SMBD
	bool $w.config.f 5 28 "  nmbd" CONFIG_USER_SAMBA_NMBD
	bool $w.config.f 5 29 "  smbmount" CONFIG_USER_SAMBA_SMBMOUNT
	bool $w.config.f 5 30 "  smbumount" CONFIG_USER_SAMBA_SMBUMOUNT
	comment $w.config.f 5 31 "SMBFS"
	bool $w.config.f 5 32 "smbmount" CONFIG_USER_SMBMOUNT_SMBMOUNT
	bool $w.config.f 5 33 "smbumount" CONFIG_USER_SMBMOUNT_SMBUMOUNT
	comment $w.config.f 5 34 "CRAMFS"
	bool $w.config.f 5 35 "cramfsck" CONFIG_USER_CRAMFS_CRAMFSCK
	bool $w.config.f 5 36 "mkcramfs" CONFIG_USER_CRAMFS_MKCRAMFS



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu5 {} {
	global CONFIG_USER_FLATFSD_FLATFSD
	if {($CONFIG_USER_FLATFSD_FLATFSD == 1)} then {configure_entry .menu5.config.f.x1 normal {x l}} else {configure_entry .menu5.config.f.x1 disabled {x l}}
}


proc update_define_menu5 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LIB_ZLIB
	global tmpvar_1
	global CONFIG_USER_FLATFSD_AUTO
	if {$tmpvar_1 == "Auto"} then {set CONFIG_USER_FLATFSD_AUTO 1} else {set CONFIG_USER_FLATFSD_AUTO 0}
	global CONFIG_USER_FLATFSD_USE_FLASH_FS
	if {$tmpvar_1 == "Filesystem"} then {set CONFIG_USER_FLATFSD_USE_FLASH_FS 1} else {set CONFIG_USER_FLATFSD_USE_FLASH_FS 0}
	global CONFIG_USER_FLATFSD_DISKLIKE
	if {$tmpvar_1 == "Disklike"} then {set CONFIG_USER_FLATFSD_DISKLIKE 1} else {set CONFIG_USER_FLATFSD_DISKLIKE 0}
	global CONFIG_USER_CRAMFS_CRAMFSCK
	if {($CONFIG_USER_CRAMFS_CRAMFSCK == 1 || $CONFIG_USER_CRAMFS_CRAMFSCK == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_ZLIB $CONSTANT_Y }
}


menu_option menu6 6 "Network Applications"
proc menu6 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 6}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 6]]
	message $w.m -width 400 -aspect 300 -text \
		"Network Applications"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Network Applications" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 6; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu7 .menu7 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 6 0 "arp" CONFIG_USER_ROUTE_ARP
	bool $w.config.f 6 1 "fnord web server" CONFIG_USER_FNORD_HTTPD
	bool $w.config.f 6 2 "boa" CONFIG_USER_BOA_SRC_BOA
	bool $w.config.f 6 3 "  boa uses SSL" CONFIG_USER_BOA_WITH_SSL
	bool $w.config.f 6 4 "bpalogin" CONFIG_USER_BPALOGIN_BPALOGIN
	bool $w.config.f 6 5 "br2684ctl" CONFIG_USER_BR2684CTL_BR2684CTL
	bool $w.config.f 6 6 "brcfg" CONFIG_USER_BRCFG_BRCFG
	bool $w.config.f 6 7 "bridge utils" CONFIG_USER_BRCTL_BRCTL
	bool $w.config.f 6 8 "dhcpcd" CONFIG_USER_DHCPCD_DHCPCD
	bool $w.config.f 6 9 "  dhcpcd link-local support" CONFIG_USER_DHCPCD_LLIP
	bool $w.config.f 6 10 "dhcpcd-new (2.0/2.4)" CONFIG_USER_DHCPCD_NEW_DHCPCD
	bool $w.config.f 6 11 "dhcpd" CONFIG_USER_DHCPD_DHCPD
	bool $w.config.f 6 12 "dhcpd(ISC)" CONFIG_USER_DHCP_ISC_SERVER_DHCPD
	bool $w.config.f 6 13 "dhclient(ISC)" CONFIG_USER_DHCP_ISC_CLIENT_DHCLIENT
	bool $w.config.f 6 14 "dhcrelay (ISC)" CONFIG_USER_DHCP_ISC_RELAY_DHCRELAY
	bool $w.config.f 6 15 "diald" CONFIG_USER_DIALD_DIALD
	bool $w.config.f 6 16 "discard" CONFIG_USER_DISCARD_DISCARD
	bool $w.config.f 6 17 "dnsmasq" CONFIG_USER_DNSMASQ_DNSMASQ
	bool $w.config.f 6 18 "ethattach" CONFIG_USER_ETHATTACH_ETHATTACH
	bool $w.config.f 6 19 "ez-ipupdate" CONFIG_USER_EZIPUPDATE_EZIPUPDATE
	bool $w.config.f 6 20 "ftp" CONFIG_USER_FTP_FTP_FTP
	bool $w.config.f 6 21 "ftpd" CONFIG_USER_FTPD_FTPD
	bool $w.config.f 6 22 "freeswan-apps" CONFIG_USER_FREESWAN
	bool $w.config.f 6 23 "  ipsec keep alive" CONFIG_USER_IPSEC_KEEPALIVE
	bool $w.config.f 6 24 "  pluto" CONFIG_USER_FREESWAN_PLUTO_PLUTO
	bool $w.config.f 6 25 "  whack" CONFIG_USER_FREESWAN_PLUTO_WHACK
	bool $w.config.f 6 26 "  ranbits" CONFIG_USER_FREESWAN_UTILS_RANBITS
	bool $w.config.f 6 27 "  rsasigkey" CONFIG_USER_FREESWAN_UTILS_RSASIGKEY
	bool $w.config.f 6 28 "  eroute" CONFIG_USER_FREESWAN_KLIPS_EROUTE
	bool $w.config.f 6 29 "  klipsdebug" CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG
	bool $w.config.f 6 30 "  spi" CONFIG_USER_FREESWAN_KLIPS_SPI
	bool $w.config.f 6 31 "  spigrp" CONFIG_USER_FREESWAN_KLIPS_SPIGRP
	bool $w.config.f 6 32 "  tncfg" CONFIG_USER_FREESWAN_KLIPS_TNCFG
	bool $w.config.f 6 33 "  fswcert" CONFIG_USER_FSWCERT_FSWCERT
	bool $w.config.f 6 34 "httpd" CONFIG_USER_HTTPD_HTTPD
	bool $w.config.f 6 35 "ifattach" CONFIG_USER_IFATTACH_IFATTACH
	bool $w.config.f 6 36 "ifconfig" CONFIG_USER_ROUTE_IFCONFIG
	bool $w.config.f 6 37 "inetd" CONFIG_USER_INETD_INETD
	bool $w.config.f 6 38 "ipchains" CONFIG_USER_IPCHAINS_IPCHAINS
	bool $w.config.f 6 39 "ipfwadm" CONFIG_USER_IPFWADM_IPFWADM
	bool $w.config.f 6 40 "ipmasqadm" CONFIG_USER_IPMASQADM_IPMASQADM
	bool $w.config.f 6 41 "ipportfw" CONFIG_USER_IPPORTFW_IPPORTFW
	bool $w.config.f 6 42 "ipredir" CONFIG_USER_IPREDIR_IPREDIR
	bool $w.config.f 6 43 "iproute2" CONFIG_USER_IPROUTE2
	bool $w.config.f 6 44 "  tc" CONFIG_USER_IPROUTE2_TC_TC
	bool $w.config.f 6 45 "  ifcfg (complex scripting reqd.)" CONFIG_USER_IPROUTE2_IP_IFCFG
	bool $w.config.f 6 46 "  ip" CONFIG_USER_IPROUTE2_IP_IP
	bool $w.config.f 6 47 "  routef" CONFIG_USER_IPROUTE2_IP_ROUTEF
	bool $w.config.f 6 48 "  routel" CONFIG_USER_IPROUTE2_IP_ROUTEL
	bool $w.config.f 6 49 "  rtacct" CONFIG_USER_IPROUTE2_IP_RTACCT
	bool $w.config.f 6 50 "  rtmon" CONFIG_USER_IPROUTE2_IP_RTMON
	bool $w.config.f 6 51 "  rtpr" CONFIG_USER_IPROUTE2_IP_RTPR
	bool $w.config.f 6 52 "iptables" CONFIG_USER_IPTABLES_IPTABLES
	bool $w.config.f 6 53 "kendin-config" CONFIG_USER_KENDIN_CONFIG
	bool $w.config.f 6 54 "klaxon" CONFIG_USER_KLAXON_KLAXON
	bool $w.config.f 6 55 "  use RFC931" CONFIG_USER_KLAXON_RFC931
	bool $w.config.f 6 56 "  detect chargen" CONFIG_USER_KLAXON_CHARGEN
	bool $w.config.f 6 57 "  detect discard" CONFIG_USER_KLAXON_DISCARD
	bool $w.config.f 6 58 "  detect echo" CONFIG_USER_KLAXON_ECHO
	bool $w.config.f 6 59 "  detect ftp" CONFIG_USER_KLAXON_FTP
	bool $w.config.f 6 60 "  detect http" CONFIG_USER_KLAXON_HTTP
	bool $w.config.f 6 61 "  detect smtp" CONFIG_USER_KLAXON_SMTP
	bool $w.config.f 6 62 "  detect snmp" CONFIG_USER_KLAXON_SNMP
	bool $w.config.f 6 63 "  detect ssh" CONFIG_USER_KLAXON_SSH
	bool $w.config.f 6 64 "  detect telnet" CONFIG_USER_KLAXON_TELNET
	bool $w.config.f 6 65 "  detect tftp" CONFIG_USER_KLAXON_TFTP
	bool $w.config.f 6 66 "l2tpd" CONFIG_USER_L2TPD_L2TPD
	bool $w.config.f 6 67 "loattach" CONFIG_USER_LOATTACH_LOATTACH
	bool $w.config.f 6 68 "mail" CONFIG_USER_SMTP_SMTPCLIENT
	bool $w.config.f 6 69 "mail_ip" CONFIG_USER_MAIL_MAIL_IP
	bool $w.config.f 6 70 "maradns" CONFIG_USER_MARADNS_MARADNS
	bool $w.config.f 6 71 "mini_httpd" CONFIG_USER_MINI_HTTPD_MINI_HTTPD
	bool $w.config.f 6 72 "mini_httpd uses SSL" CONFIG_USER_MINI_HTTPD_WITH_SSL
	bool $w.config.f 6 73 "msntp" CONFIG_USER_MSNTP_MSNTP
	bool $w.config.f 6 74 "nasl" CONFIG_USER_NESSUS_NASL
	bool $w.config.f 6 75 "netstat" CONFIG_USER_ROUTE_NETSTAT
	bool $w.config.f 6 76 "netstat-nat" CONFIG_USER_NETSTAT_NAT_NETSTAT_NAT
	bool $w.config.f 6 77 "zoneserver" CONFIG_USER_MARADNS_ZONESERVER
	bool $w.config.f 6 78 "mii-tool" CONFIG_USER_ROUTE_MIITOOL
	bool $w.config.f 6 79 "ntpd" CONFIG_USER_NTPD_NTPD
	bool $w.config.f 6 80 "  ntpdc" CONFIG_USER_NTPD_NTPDC
	bool $w.config.f 6 81 "ntpdate" CONFIG_USER_NTPD_NTPDATE
	bool $w.config.f 6 82 "ntpq" CONFIG_USER_NTPD_NTPQ
	bool $w.config.f 6 83 "openssl" CONFIG_USER_OPENSSL_APPS
	bool $w.config.f 6 84 "ping" CONFIG_USER_PING_PING
	bool $w.config.f 6 85 "plugdaemon" CONFIG_USER_PLUG_PLUG
	bool $w.config.f 6 86 "portmap" CONFIG_USER_PORTMAP_PORTMAP
	bool $w.config.f 6 87 "pppd" CONFIG_USER_PPPD_PPPD_PPPD
	bool $w.config.f 6 88 "  enable MPPE" CONFIG_USER_PPPD_WITH_MPPE
	bool $w.config.f 6 89 "  enable TACACS+" CONFIG_USER_PPPD_WITH_TACACS
	bool $w.config.f 6 90 "  enable RADIUS" CONFIG_USER_PPPD_WITH_RADIUS
	bool $w.config.f 6 91 "  enable PPPOE" CONFIG_USER_PPPD_WITH_PPPOE
	int $w.config.f 6 92 "    default number of PPPOE retries" CONFIG_USER_PPPD_PPPOE_RETRIES
	bool $w.config.f 6 93 "  disable redirection of passwords starting with @" CONFIG_USER_PPPD_NO_AT_REDIRECTION
	bool $w.config.f 6 94 "pptpctrl" CONFIG_USER_PPTPD_PPTPCTRL
	bool $w.config.f 6 95 "pptpd" CONFIG_USER_PPTPD_PPTPD
	bool $w.config.f 6 96 "pptp" CONFIG_USER_PPTP_CLIENT_PPTP
	bool $w.config.f 6 97 "pptp_callmgr" CONFIG_USER_PPTP_CLIENT_PPTP_CALLMGR
	bool $w.config.f 6 98 "rdate" CONFIG_USER_RDATE_RDATE
	bool $w.config.f 6 99 "route" CONFIG_USER_ROUTE_ROUTE
	bool $w.config.f 6 100 "routed" CONFIG_USER_ROUTED_ROUTED
	bool $w.config.f 6 101 "rp-pppoe" CONFIG_USER_RP_PPPOE_PPPOE
	dep_bool $w.config.f 6 102 "  rp-pppoe server" CONFIG_USER_RP_PPPOE_PPPOE_SERVER
	bool $w.config.f 6 103 "sethdlc" CONFIG_USER_SETHDLC_SETHDLC
	bool $w.config.f 6 104 "slattach" CONFIG_USER_SLATTACH_SLATTACH
	bool $w.config.f 6 105 "snmpd" CONFIG_USER_SNMPD_SNMPD
	bool $w.config.f 6 106 "snort" CONFIG_USER_SNORT_SNORT
	bool $w.config.f 6 107 "stunnel" CONFIG_USER_STUNNEL_STUNNEL
	bool $w.config.f 6 108 "sslwrap" CONFIG_USER_SSLWRAP_SSLWRAP
	bool $w.config.f 6 109 "squid" CONFIG_USER_SQUID_SQUID
	bool $w.config.f 6 110 "ssh" CONFIG_USER_SSH_SSH
	bool $w.config.f 6 111 "sshd" CONFIG_USER_SSH_SSHD
	bool $w.config.f 6 112 "ssh-keygen" CONFIG_USER_SSH_SSHKEYGEN
	bool $w.config.f 6 113 "stp" CONFIG_USER_STP_STP
	bool $w.config.f 6 114 "tcpd" CONFIG_USER_TCPWRAP_TCPD
	bool $w.config.f 6 115 "  miscd" CONFIG_USER_TCPWRAP_MISCD
	bool $w.config.f 6 116 "  safe finger" CONFIG_USER_TCPWRAP_FINGER
	bool $w.config.f 6 117 "  tcpd match" CONFIG_USER_TCPWRAP_TCPDMATCH
	bool $w.config.f 6 118 "  try from" CONFIG_UEER_TCPWRAP_TRYFROM
	bool $w.config.f 6 119 "  tcpdchk" CONFIG_USER_TCPWRAP_TCPDCHK
	bool $w.config.f 6 120 "tcpblast" CONFIG_USER_TCPBLAST_TCPBLAST
	bool $w.config.f 6 121 "tcpdump" CONFIG_USER_TCPDUMP_TCPDUMP
	bool $w.config.f 6 122 "telnetd" CONFIG_USER_TELNETD_TELNETD
	bool $w.config.f 6 123 "telnet" CONFIG_USER_TELNET_TELNET
	bool $w.config.f 6 124 "tftp" CONFIG_USER_TFTP_TFTP
	bool $w.config.f 6 125 "tftpd" CONFIG_USER_TFTPD_TFTPD
	bool $w.config.f 6 126 "  Low security on tftp server" CONFIG_USER_TFTPD_TFTPD_LOW_SEC
	bool $w.config.f 6 127 "thttpd" CONFIG_USER_THTTPD_THTTPD
	bool $w.config.f 6 128 "traceroute" CONFIG_USER_TRACEROUTE_TRACEROUTE
	bool $w.config.f 6 129 "net-snmp snmpd" CONFIG_USER_UCDSNMP_SNMPD
	bool $w.config.f 6 130 "vconfig" CONFIG_USER_VCONFIG_VCONFIG
	bool $w.config.f 6 131 "vpnled" CONFIG_USER_VPNLED_VPNLED
	bool $w.config.f 6 132 "wget" CONFIG_USER_WGET
	bool $w.config.f 6 133 "zebra" CONFIG_USER_ZEBRA_ZEBRA_ZEBRA
	bool $w.config.f 6 134 "  zebra-bgpd" CONFIG_USER_ZEBRA_BGPD_BGPD
	bool $w.config.f 6 135 "  zebra-ospfd" CONFIG_USER_ZEBRA_OSPFD_OSPFD
	bool $w.config.f 6 136 "  zebra-ripd" CONFIG_USER_ZEBRA_RIPD_RIPD
	comment $w.config.f 6 137 "Net-tools"
	bool $w.config.f 6 138 "arp" CONFIG_USER_NET_TOOLS_ARP
	bool $w.config.f 6 139 "hostname" CONFIG_USER_NET_TOOLS_HOSTNAME
	bool $w.config.f 6 140 "ifconfig" CONFIG_USER_NET_TOOLS_IFCONFIG
	bool $w.config.f 6 141 "nameif" CONFIG_USER_NET_TOOLS_NAMEIF
	bool $w.config.f 6 142 "netstat" CONFIG_USER_NET_TOOLS_NETSTAT
	bool $w.config.f 6 143 "plipconfig" CONFIG_USER_NET_TOOLS_PLIPCONFIG
	bool $w.config.f 6 144 "rarp" CONFIG_USER_NET_TOOLS_RARP
	bool $w.config.f 6 145 "route" CONFIG_USER_NET_TOOLS_ROUTE
	bool $w.config.f 6 146 "slattach" CONFIG_USER_NET_TOOLS_SLATTACH
	bool $w.config.f 6 147 "mii-tool" CONFIG_USER_NET_TOOLS_MII_TOOL
	comment $w.config.f 6 148 "Wireless-tools"
	bool $w.config.f 6 149 "wireless_tools support" CONFIG_USER_WIRELESS_TOOLS
	bool $w.config.f 6 150 "iwconfig" CONFIG_USER_WIRELESS_TOOLS_IWCONFIG
	bool $w.config.f 6 151 "iwgetid" CONFIG_USER_WIRELESS_TOOLS_IWGETID
	bool $w.config.f 6 152 "iwlist" CONFIG_USER_WIRELESS_TOOLS_IWLIST
	bool $w.config.f 6 153 "iwpriv" CONFIG_USER_WIRELESS_TOOLS_IWPRIV
	bool $w.config.f 6 154 "iwspy" CONFIG_USER_WIRELESS_TOOLS_IWSPY
	bool $w.config.f 6 155 "hostap" CONFIG_USER_HOSTAP_HOSTAP
	bool $w.config.f 6 156 "  PCI cards" CONFIG_USER_HOSTAP_PCI
	bool $w.config.f 6 157 "  PCMCIA cards" CONFIG_USER_HOSTAP_CS
	bool $w.config.f 6 158 "wlan-ng" CONFIG_USER_WLAN_NG
	bool $w.config.f 6 159 "  wlandl" CONFIG_USER_WLAN_NG_WLAND
	bool $w.config.f 6 160 "  wlancfg" CONFIG_USER_WLAN_NG_WLANCFG
	bool $w.config.f 6 161 "  wlanctl" CONFIG_USER_WLAN_NG_WLANCTL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu6 {} {
	global CONFIG_USER_FNORD_HTTPD
	global CONFIG_USER_BOA_SRC_BOA
	if {($CONFIG_USER_FNORD_HTTPD != 1)} then {
	configure_entry .menu6.config.f.x2 normal {n l y}} else {configure_entry .menu6.config.f.x2 disabled {y n l}}
	global CONFIG_USER_BOA_WITH_SSL
	if {($CONFIG_USER_FNORD_HTTPD != 1) && ($CONFIG_USER_BOA_SRC_BOA == 1)} then {
	configure_entry .menu6.config.f.x3 normal {n l y}} else {configure_entry .menu6.config.f.x3 disabled {y n l}}
	global CONFIG_USER_DHCPCD_DHCPCD
	global CONFIG_USER_DHCPCD_LLIP
	if {($CONFIG_USER_DHCPCD_DHCPCD == 1)} then {
	configure_entry .menu6.config.f.x9 normal {n l y}} else {configure_entry .menu6.config.f.x9 disabled {y n l}}
	global CONFIG_USER_FREESWAN
	global CONFIG_USER_IPSEC_KEEPALIVE
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x23 normal {n l y}} else {configure_entry .menu6.config.f.x23 disabled {y n l}}
	global CONFIG_USER_FREESWAN_PLUTO_PLUTO
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x24 normal {n l y}} else {configure_entry .menu6.config.f.x24 disabled {y n l}}
	global CONFIG_USER_FREESWAN_PLUTO_WHACK
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x25 normal {n l y}} else {configure_entry .menu6.config.f.x25 disabled {y n l}}
	global CONFIG_USER_FREESWAN_UTILS_RANBITS
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x26 normal {n l y}} else {configure_entry .menu6.config.f.x26 disabled {y n l}}
	global CONFIG_USER_FREESWAN_UTILS_RSASIGKEY
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x27 normal {n l y}} else {configure_entry .menu6.config.f.x27 disabled {y n l}}
	global CONFIG_USER_FREESWAN_KLIPS_EROUTE
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x28 normal {n l y}} else {configure_entry .menu6.config.f.x28 disabled {y n l}}
	global CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x29 normal {n l y}} else {configure_entry .menu6.config.f.x29 disabled {y n l}}
	global CONFIG_USER_FREESWAN_KLIPS_SPI
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x30 normal {n l y}} else {configure_entry .menu6.config.f.x30 disabled {y n l}}
	global CONFIG_USER_FREESWAN_KLIPS_SPIGRP
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x31 normal {n l y}} else {configure_entry .menu6.config.f.x31 disabled {y n l}}
	global CONFIG_USER_FREESWAN_KLIPS_TNCFG
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x32 normal {n l y}} else {configure_entry .menu6.config.f.x32 disabled {y n l}}
	global CONFIG_USER_FSWCERT_FSWCERT
	if {($CONFIG_USER_FREESWAN == 1)} then {
	configure_entry .menu6.config.f.x33 normal {n l y}} else {configure_entry .menu6.config.f.x33 disabled {y n l}}
	global CONFIG_USER_IPROUTE2
	global CONFIG_USER_IPROUTE2_TC_TC
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x44 normal {n l y}} else {configure_entry .menu6.config.f.x44 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_IFCFG
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x45 normal {n l y}} else {configure_entry .menu6.config.f.x45 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_IP
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x46 normal {n l y}} else {configure_entry .menu6.config.f.x46 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_ROUTEF
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x47 normal {n l y}} else {configure_entry .menu6.config.f.x47 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_ROUTEL
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x48 normal {n l y}} else {configure_entry .menu6.config.f.x48 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_RTACCT
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x49 normal {n l y}} else {configure_entry .menu6.config.f.x49 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_RTMON
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x50 normal {n l y}} else {configure_entry .menu6.config.f.x50 disabled {y n l}}
	global CONFIG_USER_IPROUTE2_IP_RTPR
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	configure_entry .menu6.config.f.x51 normal {n l y}} else {configure_entry .menu6.config.f.x51 disabled {y n l}}
	global CONFIG_USER_KLAXON_KLAXON
	global CONFIG_USER_KLAXON_RFC931
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x55 normal {n l y}} else {configure_entry .menu6.config.f.x55 disabled {y n l}}
	global CONFIG_USER_KLAXON_CHARGEN
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x56 normal {n l y}} else {configure_entry .menu6.config.f.x56 disabled {y n l}}
	global CONFIG_USER_KLAXON_DISCARD
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x57 normal {n l y}} else {configure_entry .menu6.config.f.x57 disabled {y n l}}
	global CONFIG_USER_KLAXON_ECHO
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x58 normal {n l y}} else {configure_entry .menu6.config.f.x58 disabled {y n l}}
	global CONFIG_USER_KLAXON_FTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x59 normal {n l y}} else {configure_entry .menu6.config.f.x59 disabled {y n l}}
	global CONFIG_USER_KLAXON_HTTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x60 normal {n l y}} else {configure_entry .menu6.config.f.x60 disabled {y n l}}
	global CONFIG_USER_KLAXON_SMTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x61 normal {n l y}} else {configure_entry .menu6.config.f.x61 disabled {y n l}}
	global CONFIG_USER_KLAXON_SNMP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x62 normal {n l y}} else {configure_entry .menu6.config.f.x62 disabled {y n l}}
	global CONFIG_USER_KLAXON_SSH
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x63 normal {n l y}} else {configure_entry .menu6.config.f.x63 disabled {y n l}}
	global CONFIG_USER_KLAXON_TELNET
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x64 normal {n l y}} else {configure_entry .menu6.config.f.x64 disabled {y n l}}
	global CONFIG_USER_KLAXON_TFTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	configure_entry .menu6.config.f.x65 normal {n l y}} else {configure_entry .menu6.config.f.x65 disabled {y n l}}
	global CONFIG_USER_MINI_HTTPD_MINI_HTTPD
	global CONFIG_USER_MINI_HTTPD_WITH_SSL
	if {($CONFIG_USER_MINI_HTTPD_MINI_HTTPD == 1)} then {
	configure_entry .menu6.config.f.x72 normal {n l y}} else {configure_entry .menu6.config.f.x72 disabled {y n l}}
	global CONFIG_USER_NTPD_NTPD
	global CONFIG_USER_NTPD_NTPDC
	if {($CONFIG_USER_NTPD_NTPD == 1)} then {
	configure_entry .menu6.config.f.x80 normal {n l y}} else {configure_entry .menu6.config.f.x80 disabled {y n l}}
	global CONFIG_USER_PPPD_PPPD_PPPD
	global CONFIG_USER_PPPD_WITH_MPPE
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	configure_entry .menu6.config.f.x88 normal {n l y}} else {configure_entry .menu6.config.f.x88 disabled {y n l}}
	global CONFIG_USER_PPPD_WITH_TACACS
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	configure_entry .menu6.config.f.x89 normal {n l y}} else {configure_entry .menu6.config.f.x89 disabled {y n l}}
	global CONFIG_USER_PPPD_WITH_RADIUS
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	configure_entry .menu6.config.f.x90 normal {n l y}} else {configure_entry .menu6.config.f.x90 disabled {y n l}}
	global CONFIG_USER_PPPD_WITH_PPPOE
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	configure_entry .menu6.config.f.x91 normal {n l y}} else {configure_entry .menu6.config.f.x91 disabled {y n l}}
	global CONFIG_USER_PPPD_PPPOE_RETRIES
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1) && ($CONFIG_USER_PPPD_WITH_PPPOE == 1)} then {.menu6.config.f.x92.x configure -state normal -foreground [ cget .ref -foreground ]; .menu6.config.f.x92.l configure -state normal; } else {.menu6.config.f.x92.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu6.config.f.x92.l configure -state disabled}
	global CONFIG_USER_PPPD_NO_AT_REDIRECTION
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	configure_entry .menu6.config.f.x93 normal {n l y}} else {configure_entry .menu6.config.f.x93 disabled {y n l}}
	global CONFIG_USER_RP_PPPOE_PPPOE
	global CONFIG_USER_RP_PPPOE_PPPOE_SERVER
	if {($CONFIG_USER_RP_PPPOE_PPPOE == 1 || $CONFIG_USER_RP_PPPOE_PPPOE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_RP_PPPOE_PPPOE]];set CONFIG_USER_RP_PPPOE_PPPOE_SERVER [sync_bool $CONFIG_USER_RP_PPPOE_PPPOE_SERVER $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x102 disabled {y};} else {configure_entry .menu6.config.f.x102 normal {y};}; configure_entry .menu6.config.f.x102 normal {n l}} else {configure_entry .menu6.config.f.x102 disabled {y n l}}
	global CONFIG_USER_TCPWRAP_TCPD
	global CONFIG_USER_TCPWRAP_MISCD
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	configure_entry .menu6.config.f.x115 normal {n l y}} else {configure_entry .menu6.config.f.x115 disabled {y n l}}
	global CONFIG_USER_TCPWRAP_FINGER
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	configure_entry .menu6.config.f.x116 normal {n l y}} else {configure_entry .menu6.config.f.x116 disabled {y n l}}
	global CONFIG_USER_TCPWRAP_TCPDMATCH
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	configure_entry .menu6.config.f.x117 normal {n l y}} else {configure_entry .menu6.config.f.x117 disabled {y n l}}
	global CONFIG_UEER_TCPWRAP_TRYFROM
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	configure_entry .menu6.config.f.x118 normal {n l y}} else {configure_entry .menu6.config.f.x118 disabled {y n l}}
	global CONFIG_USER_TCPWRAP_TCPDCHK
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	configure_entry .menu6.config.f.x119 normal {n l y}} else {configure_entry .menu6.config.f.x119 disabled {y n l}}
	global CONFIG_USER_TFTPD_TFTPD
	global CONFIG_USER_TFTPD_TFTPD_LOW_SEC
	if {($CONFIG_USER_TFTPD_TFTPD == 1)} then {
	configure_entry .menu6.config.f.x126 normal {n l y}} else {configure_entry .menu6.config.f.x126 disabled {y n l}}
	global CONFIG_USER_ZEBRA_ZEBRA_ZEBRA
	global CONFIG_USER_ZEBRA_BGPD_BGPD
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {
	configure_entry .menu6.config.f.x134 normal {n l y}} else {configure_entry .menu6.config.f.x134 disabled {y n l}}
	global CONFIG_USER_ZEBRA_OSPFD_OSPFD
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {
	configure_entry .menu6.config.f.x135 normal {n l y}} else {configure_entry .menu6.config.f.x135 disabled {y n l}}
	global CONFIG_USER_ZEBRA_RIPD_RIPD
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {
	configure_entry .menu6.config.f.x136 normal {n l y}} else {configure_entry .menu6.config.f.x136 disabled {y n l}}
	global CONFIG_USER_WIRELESS_TOOLS
	global CONFIG_USER_WIRELESS_TOOLS_IWCONFIG
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	configure_entry .menu6.config.f.x150 normal {n l y}} else {configure_entry .menu6.config.f.x150 disabled {y n l}}
	global CONFIG_USER_WIRELESS_TOOLS_IWGETID
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	configure_entry .menu6.config.f.x151 normal {n l y}} else {configure_entry .menu6.config.f.x151 disabled {y n l}}
	global CONFIG_USER_WIRELESS_TOOLS_IWLIST
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	configure_entry .menu6.config.f.x152 normal {n l y}} else {configure_entry .menu6.config.f.x152 disabled {y n l}}
	global CONFIG_USER_WIRELESS_TOOLS_IWPRIV
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	configure_entry .menu6.config.f.x153 normal {n l y}} else {configure_entry .menu6.config.f.x153 disabled {y n l}}
	global CONFIG_USER_WIRELESS_TOOLS_IWSPY
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	configure_entry .menu6.config.f.x154 normal {n l y}} else {configure_entry .menu6.config.f.x154 disabled {y n l}}
	global CONFIG_USER_HOSTAP_HOSTAP
	global CONFIG_USER_HOSTAP_PCI
	if {($CONFIG_USER_HOSTAP_HOSTAP == 1)} then {
	configure_entry .menu6.config.f.x156 normal {n l y}} else {configure_entry .menu6.config.f.x156 disabled {y n l}}
	global CONFIG_USER_HOSTAP_CS
	if {($CONFIG_USER_HOSTAP_HOSTAP == 1)} then {
	configure_entry .menu6.config.f.x157 normal {n l y}} else {configure_entry .menu6.config.f.x157 disabled {y n l}}
	global CONFIG_USER_WLAN_NG
	global CONFIG_USER_WLAN_NG_WLAND
	if {($CONFIG_USER_WLAN_NG == 1)} then {
	configure_entry .menu6.config.f.x159 normal {n l y}} else {configure_entry .menu6.config.f.x159 disabled {y n l}}
	global CONFIG_USER_WLAN_NG_WLANCFG
	if {($CONFIG_USER_WLAN_NG == 1)} then {
	configure_entry .menu6.config.f.x160 normal {n l y}} else {configure_entry .menu6.config.f.x160 disabled {y n l}}
	global CONFIG_USER_WLAN_NG_WLANCTL
	if {($CONFIG_USER_WLAN_NG == 1)} then {
	configure_entry .menu6.config.f.x161 normal {n l y}} else {configure_entry .menu6.config.f.x161 disabled {y n l}}
}


proc update_define_menu6 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LIB_LIBSSL
	global CONFIG_LIB_LIBGMP
	global CONFIG_LIB_LIBDES
	global CONFIG_LIB_ZLIB
	global CONFIG_LIB_LIBPCAP
	global CONFIG_LIB_LIBG
	global CONFIG_USER_BOA_SRC_BOA
set CONFIG_USER_BOA_SRC_BOA [expr $CONFIG_USER_BOA_SRC_BOA|16]
	global CONFIG_USER_BOA_WITH_SSL
set CONFIG_USER_BOA_WITH_SSL [expr $CONFIG_USER_BOA_WITH_SSL|16]
	global CONFIG_USER_DHCPCD_LLIP
set CONFIG_USER_DHCPCD_LLIP [expr $CONFIG_USER_DHCPCD_LLIP|16]
	global CONFIG_USER_IPSEC_KEEPALIVE
set CONFIG_USER_IPSEC_KEEPALIVE [expr $CONFIG_USER_IPSEC_KEEPALIVE|16]
	global CONFIG_USER_FREESWAN_PLUTO_PLUTO
set CONFIG_USER_FREESWAN_PLUTO_PLUTO [expr $CONFIG_USER_FREESWAN_PLUTO_PLUTO|16]
	global CONFIG_USER_FREESWAN_PLUTO_WHACK
set CONFIG_USER_FREESWAN_PLUTO_WHACK [expr $CONFIG_USER_FREESWAN_PLUTO_WHACK|16]
	global CONFIG_USER_FREESWAN_UTILS_RANBITS
set CONFIG_USER_FREESWAN_UTILS_RANBITS [expr $CONFIG_USER_FREESWAN_UTILS_RANBITS|16]
	global CONFIG_USER_FREESWAN_UTILS_RSASIGKEY
set CONFIG_USER_FREESWAN_UTILS_RSASIGKEY [expr $CONFIG_USER_FREESWAN_UTILS_RSASIGKEY|16]
	global CONFIG_USER_FREESWAN_KLIPS_EROUTE
set CONFIG_USER_FREESWAN_KLIPS_EROUTE [expr $CONFIG_USER_FREESWAN_KLIPS_EROUTE|16]
	global CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG
set CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG [expr $CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG|16]
	global CONFIG_USER_FREESWAN_KLIPS_SPI
set CONFIG_USER_FREESWAN_KLIPS_SPI [expr $CONFIG_USER_FREESWAN_KLIPS_SPI|16]
	global CONFIG_USER_FREESWAN_KLIPS_SPIGRP
set CONFIG_USER_FREESWAN_KLIPS_SPIGRP [expr $CONFIG_USER_FREESWAN_KLIPS_SPIGRP|16]
	global CONFIG_USER_FREESWAN_KLIPS_TNCFG
set CONFIG_USER_FREESWAN_KLIPS_TNCFG [expr $CONFIG_USER_FREESWAN_KLIPS_TNCFG|16]
	global CONFIG_USER_FSWCERT_FSWCERT
set CONFIG_USER_FSWCERT_FSWCERT [expr $CONFIG_USER_FSWCERT_FSWCERT|16]
	global CONFIG_USER_IPROUTE2_TC_TC
set CONFIG_USER_IPROUTE2_TC_TC [expr $CONFIG_USER_IPROUTE2_TC_TC|16]
	global CONFIG_USER_IPROUTE2_IP_IFCFG
set CONFIG_USER_IPROUTE2_IP_IFCFG [expr $CONFIG_USER_IPROUTE2_IP_IFCFG|16]
	global CONFIG_USER_IPROUTE2_IP_IP
set CONFIG_USER_IPROUTE2_IP_IP [expr $CONFIG_USER_IPROUTE2_IP_IP|16]
	global CONFIG_USER_IPROUTE2_IP_ROUTEF
set CONFIG_USER_IPROUTE2_IP_ROUTEF [expr $CONFIG_USER_IPROUTE2_IP_ROUTEF|16]
	global CONFIG_USER_IPROUTE2_IP_ROUTEL
set CONFIG_USER_IPROUTE2_IP_ROUTEL [expr $CONFIG_USER_IPROUTE2_IP_ROUTEL|16]
	global CONFIG_USER_IPROUTE2_IP_RTACCT
set CONFIG_USER_IPROUTE2_IP_RTACCT [expr $CONFIG_USER_IPROUTE2_IP_RTACCT|16]
	global CONFIG_USER_IPROUTE2_IP_RTMON
set CONFIG_USER_IPROUTE2_IP_RTMON [expr $CONFIG_USER_IPROUTE2_IP_RTMON|16]
	global CONFIG_USER_IPROUTE2_IP_RTPR
set CONFIG_USER_IPROUTE2_IP_RTPR [expr $CONFIG_USER_IPROUTE2_IP_RTPR|16]
	global CONFIG_USER_KLAXON_RFC931
set CONFIG_USER_KLAXON_RFC931 [expr $CONFIG_USER_KLAXON_RFC931|16]
	global CONFIG_USER_KLAXON_CHARGEN
set CONFIG_USER_KLAXON_CHARGEN [expr $CONFIG_USER_KLAXON_CHARGEN|16]
	global CONFIG_USER_KLAXON_DISCARD
set CONFIG_USER_KLAXON_DISCARD [expr $CONFIG_USER_KLAXON_DISCARD|16]
	global CONFIG_USER_KLAXON_ECHO
set CONFIG_USER_KLAXON_ECHO [expr $CONFIG_USER_KLAXON_ECHO|16]
	global CONFIG_USER_KLAXON_FTP
set CONFIG_USER_KLAXON_FTP [expr $CONFIG_USER_KLAXON_FTP|16]
	global CONFIG_USER_KLAXON_HTTP
set CONFIG_USER_KLAXON_HTTP [expr $CONFIG_USER_KLAXON_HTTP|16]
	global CONFIG_USER_KLAXON_SMTP
set CONFIG_USER_KLAXON_SMTP [expr $CONFIG_USER_KLAXON_SMTP|16]
	global CONFIG_USER_KLAXON_SNMP
set CONFIG_USER_KLAXON_SNMP [expr $CONFIG_USER_KLAXON_SNMP|16]
	global CONFIG_USER_KLAXON_SSH
set CONFIG_USER_KLAXON_SSH [expr $CONFIG_USER_KLAXON_SSH|16]
	global CONFIG_USER_KLAXON_TELNET
set CONFIG_USER_KLAXON_TELNET [expr $CONFIG_USER_KLAXON_TELNET|16]
	global CONFIG_USER_KLAXON_TFTP
set CONFIG_USER_KLAXON_TFTP [expr $CONFIG_USER_KLAXON_TFTP|16]
	global CONFIG_USER_MINI_HTTPD_WITH_SSL
set CONFIG_USER_MINI_HTTPD_WITH_SSL [expr $CONFIG_USER_MINI_HTTPD_WITH_SSL|16]
	global CONFIG_USER_NTPD_NTPDC
set CONFIG_USER_NTPD_NTPDC [expr $CONFIG_USER_NTPD_NTPDC|16]
	global CONFIG_USER_PPPD_WITH_MPPE
set CONFIG_USER_PPPD_WITH_MPPE [expr $CONFIG_USER_PPPD_WITH_MPPE|16]
	global CONFIG_USER_PPPD_WITH_TACACS
set CONFIG_USER_PPPD_WITH_TACACS [expr $CONFIG_USER_PPPD_WITH_TACACS|16]
	global CONFIG_USER_PPPD_WITH_RADIUS
set CONFIG_USER_PPPD_WITH_RADIUS [expr $CONFIG_USER_PPPD_WITH_RADIUS|16]
	global CONFIG_USER_PPPD_WITH_PPPOE
set CONFIG_USER_PPPD_WITH_PPPOE [expr $CONFIG_USER_PPPD_WITH_PPPOE|16]
	global CONFIG_USER_PPPD_NO_AT_REDIRECTION
set CONFIG_USER_PPPD_NO_AT_REDIRECTION [expr $CONFIG_USER_PPPD_NO_AT_REDIRECTION|16]
	global CONFIG_USER_TCPWRAP_MISCD
set CONFIG_USER_TCPWRAP_MISCD [expr $CONFIG_USER_TCPWRAP_MISCD|16]
	global CONFIG_USER_TCPWRAP_FINGER
set CONFIG_USER_TCPWRAP_FINGER [expr $CONFIG_USER_TCPWRAP_FINGER|16]
	global CONFIG_USER_TCPWRAP_TCPDMATCH
set CONFIG_USER_TCPWRAP_TCPDMATCH [expr $CONFIG_USER_TCPWRAP_TCPDMATCH|16]
	global CONFIG_UEER_TCPWRAP_TRYFROM
set CONFIG_UEER_TCPWRAP_TRYFROM [expr $CONFIG_UEER_TCPWRAP_TRYFROM|16]
	global CONFIG_USER_TCPWRAP_TCPDCHK
set CONFIG_USER_TCPWRAP_TCPDCHK [expr $CONFIG_USER_TCPWRAP_TCPDCHK|16]
	global CONFIG_USER_TFTPD_TFTPD_LOW_SEC
set CONFIG_USER_TFTPD_TFTPD_LOW_SEC [expr $CONFIG_USER_TFTPD_TFTPD_LOW_SEC|16]
	global CONFIG_USER_ZEBRA_BGPD_BGPD
set CONFIG_USER_ZEBRA_BGPD_BGPD [expr $CONFIG_USER_ZEBRA_BGPD_BGPD|16]
	global CONFIG_USER_ZEBRA_OSPFD_OSPFD
set CONFIG_USER_ZEBRA_OSPFD_OSPFD [expr $CONFIG_USER_ZEBRA_OSPFD_OSPFD|16]
	global CONFIG_USER_ZEBRA_RIPD_RIPD
set CONFIG_USER_ZEBRA_RIPD_RIPD [expr $CONFIG_USER_ZEBRA_RIPD_RIPD|16]
	global CONFIG_USER_WIRELESS_TOOLS_IWCONFIG
set CONFIG_USER_WIRELESS_TOOLS_IWCONFIG [expr $CONFIG_USER_WIRELESS_TOOLS_IWCONFIG|16]
	global CONFIG_USER_WIRELESS_TOOLS_IWGETID
set CONFIG_USER_WIRELESS_TOOLS_IWGETID [expr $CONFIG_USER_WIRELESS_TOOLS_IWGETID|16]
	global CONFIG_USER_WIRELESS_TOOLS_IWLIST
set CONFIG_USER_WIRELESS_TOOLS_IWLIST [expr $CONFIG_USER_WIRELESS_TOOLS_IWLIST|16]
	global CONFIG_USER_WIRELESS_TOOLS_IWPRIV
set CONFIG_USER_WIRELESS_TOOLS_IWPRIV [expr $CONFIG_USER_WIRELESS_TOOLS_IWPRIV|16]
	global CONFIG_USER_WIRELESS_TOOLS_IWSPY
set CONFIG_USER_WIRELESS_TOOLS_IWSPY [expr $CONFIG_USER_WIRELESS_TOOLS_IWSPY|16]
	global CONFIG_USER_HOSTAP_PCI
set CONFIG_USER_HOSTAP_PCI [expr $CONFIG_USER_HOSTAP_PCI|16]
	global CONFIG_USER_HOSTAP_CS
set CONFIG_USER_HOSTAP_CS [expr $CONFIG_USER_HOSTAP_CS|16]
	global CONFIG_USER_WLAN_NG_WLAND
set CONFIG_USER_WLAN_NG_WLAND [expr $CONFIG_USER_WLAN_NG_WLAND|16]
	global CONFIG_USER_WLAN_NG_WLANCFG
set CONFIG_USER_WLAN_NG_WLANCFG [expr $CONFIG_USER_WLAN_NG_WLANCFG|16]
	global CONFIG_USER_WLAN_NG_WLANCTL
set CONFIG_USER_WLAN_NG_WLANCTL [expr $CONFIG_USER_WLAN_NG_WLANCTL|16]
	global CONFIG_USER_FNORD_HTTPD
	if {($CONFIG_USER_FNORD_HTTPD != 1)} then {
	set CONFIG_USER_BOA_SRC_BOA [expr $CONFIG_USER_BOA_SRC_BOA&15]}
	if {($CONFIG_USER_FNORD_HTTPD != 1) && ($CONFIG_USER_BOA_SRC_BOA == 1)} then {
	set CONFIG_USER_BOA_WITH_SSL [expr $CONFIG_USER_BOA_WITH_SSL&15]}
	if {($CONFIG_USER_FNORD_HTTPD != 1) && ($CONFIG_USER_BOA_SRC_BOA == 1) && ($CONFIG_USER_BOA_WITH_SSL == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_USER_DHCPCD_DHCPCD
	if {($CONFIG_USER_DHCPCD_DHCPCD == 1)} then {
	set CONFIG_USER_DHCPCD_LLIP [expr $CONFIG_USER_DHCPCD_LLIP&15]}
	global CONFIG_USER_FREESWAN
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_IPSEC_KEEPALIVE [expr $CONFIG_USER_IPSEC_KEEPALIVE&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_PLUTO_PLUTO [expr $CONFIG_USER_FREESWAN_PLUTO_PLUTO&15]}
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FREESWAN_PLUTO_PLUTO == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBGMP $CONSTANT_Y }
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FREESWAN_PLUTO_PLUTO == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBDES $CONSTANT_Y }
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_PLUTO_WHACK [expr $CONFIG_USER_FREESWAN_PLUTO_WHACK&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_UTILS_RANBITS [expr $CONFIG_USER_FREESWAN_UTILS_RANBITS&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_UTILS_RSASIGKEY [expr $CONFIG_USER_FREESWAN_UTILS_RSASIGKEY&15]}
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FREESWAN_UTILS_RSASIGKEY == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBGMP $CONSTANT_Y }
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_KLIPS_EROUTE [expr $CONFIG_USER_FREESWAN_KLIPS_EROUTE&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG [expr $CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_KLIPS_SPI [expr $CONFIG_USER_FREESWAN_KLIPS_SPI&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_KLIPS_SPIGRP [expr $CONFIG_USER_FREESWAN_KLIPS_SPIGRP&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FREESWAN_KLIPS_TNCFG [expr $CONFIG_USER_FREESWAN_KLIPS_TNCFG&15]}
	if {($CONFIG_USER_FREESWAN == 1)} then {
	set CONFIG_USER_FSWCERT_FSWCERT [expr $CONFIG_USER_FSWCERT_FSWCERT&15]}
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FSWCERT_FSWCERT == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_USER_IPROUTE2
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_TC_TC [expr $CONFIG_USER_IPROUTE2_TC_TC&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_IFCFG [expr $CONFIG_USER_IPROUTE2_IP_IFCFG&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_IP [expr $CONFIG_USER_IPROUTE2_IP_IP&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_ROUTEF [expr $CONFIG_USER_IPROUTE2_IP_ROUTEF&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_ROUTEL [expr $CONFIG_USER_IPROUTE2_IP_ROUTEL&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_RTACCT [expr $CONFIG_USER_IPROUTE2_IP_RTACCT&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_RTMON [expr $CONFIG_USER_IPROUTE2_IP_RTMON&15]}
	if {($CONFIG_USER_IPROUTE2 == 1)} then {
	set CONFIG_USER_IPROUTE2_IP_RTPR [expr $CONFIG_USER_IPROUTE2_IP_RTPR&15]}
	global CONFIG_USER_KLAXON_KLAXON
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_RFC931 [expr $CONFIG_USER_KLAXON_RFC931&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_CHARGEN [expr $CONFIG_USER_KLAXON_CHARGEN&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_DISCARD [expr $CONFIG_USER_KLAXON_DISCARD&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_ECHO [expr $CONFIG_USER_KLAXON_ECHO&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_FTP [expr $CONFIG_USER_KLAXON_FTP&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_HTTP [expr $CONFIG_USER_KLAXON_HTTP&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_SMTP [expr $CONFIG_USER_KLAXON_SMTP&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_SNMP [expr $CONFIG_USER_KLAXON_SNMP&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_SSH [expr $CONFIG_USER_KLAXON_SSH&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_TELNET [expr $CONFIG_USER_KLAXON_TELNET&15]}
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {
	set CONFIG_USER_KLAXON_TFTP [expr $CONFIG_USER_KLAXON_TFTP&15]}
	global CONFIG_USER_MINI_HTTPD_MINI_HTTPD
	if {($CONFIG_USER_MINI_HTTPD_MINI_HTTPD == 1)} then {
	set CONFIG_USER_MINI_HTTPD_WITH_SSL [expr $CONFIG_USER_MINI_HTTPD_WITH_SSL&15]}
	if {($CONFIG_USER_MINI_HTTPD_MINI_HTTPD == 1) && ($CONFIG_USER_MINI_HTTPD_WITH_SSL == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_USER_NTPD_NTPD
	if {($CONFIG_USER_NTPD_NTPD == 1)} then {
	set CONFIG_USER_NTPD_NTPDC [expr $CONFIG_USER_NTPD_NTPDC&15]}
	global CONFIG_USER_OPENSSL_APPS
	if {($CONFIG_USER_OPENSSL_APPS == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_USER_PPPD_PPPD_PPPD
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	set CONFIG_USER_PPPD_WITH_MPPE [expr $CONFIG_USER_PPPD_WITH_MPPE&15]}
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1) && ($CONFIG_USER_PPPD_WITH_MPPE == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBDES $CONSTANT_Y }
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	set CONFIG_USER_PPPD_WITH_TACACS [expr $CONFIG_USER_PPPD_WITH_TACACS&15]}
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	set CONFIG_USER_PPPD_WITH_RADIUS [expr $CONFIG_USER_PPPD_WITH_RADIUS&15]}
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	set CONFIG_USER_PPPD_WITH_PPPOE [expr $CONFIG_USER_PPPD_WITH_PPPOE&15]}
	global CONFIG_USER_PPPD_PPPOE_RETRIES
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1) && ($CONFIG_USER_PPPD_WITH_PPPOE == 1)} then {validate_int CONFIG_USER_PPPD_PPPOE_RETRIES "$CONFIG_USER_PPPD_PPPOE_RETRIES" 6}
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {
	set CONFIG_USER_PPPD_NO_AT_REDIRECTION [expr $CONFIG_USER_PPPD_NO_AT_REDIRECTION&15]}
	global CONFIG_USER_RP_PPPOE_PPPOE
	global CONFIG_USER_RP_PPPOE_PPPOE_SERVER
	if {($CONFIG_USER_RP_PPPOE_PPPOE == 1 || $CONFIG_USER_RP_PPPOE_PPPOE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_RP_PPPOE_PPPOE]];set CONFIG_USER_RP_PPPOE_PPPOE_SERVER [sync_bool $CONFIG_USER_RP_PPPOE_PPPOE_SERVER $tmpvar_dep 0];set CONFIG_USER_RP_PPPOE_PPPOE_SERVER [expr $CONFIG_USER_RP_PPPOE_PPPOE_SERVER&15]}
	global CONFIG_USER_SSH_SSHD
	if {($CONFIG_USER_SSH_SSHD == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	if {($CONFIG_USER_SSH_SSHD == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_ZLIB $CONSTANT_Y }
	global CONFIG_USER_SSH_SSH
	if {($CONFIG_USER_SSH_SSH == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	if {("CONFIG_USER_SSH_SSHKEYGEN" == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBSSL $CONSTANT_Y }
	global CONFIG_USER_TCPWRAP_TCPD
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	set CONFIG_USER_TCPWRAP_MISCD [expr $CONFIG_USER_TCPWRAP_MISCD&15]}
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	set CONFIG_USER_TCPWRAP_FINGER [expr $CONFIG_USER_TCPWRAP_FINGER&15]}
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	set CONFIG_USER_TCPWRAP_TCPDMATCH [expr $CONFIG_USER_TCPWRAP_TCPDMATCH&15]}
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	set CONFIG_UEER_TCPWRAP_TRYFROM [expr $CONFIG_UEER_TCPWRAP_TRYFROM&15]}
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {
	set CONFIG_USER_TCPWRAP_TCPDCHK [expr $CONFIG_USER_TCPWRAP_TCPDCHK&15]}
	global CONFIG_USER_TCPDUMP_TCPDUMP
	if {($CONFIG_USER_TCPDUMP_TCPDUMP == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBPCAP $CONSTANT_Y }
	global CONFIG_USER_TELNET_TELNET
	if {($CONFIG_USER_TELNET_TELNET == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBG $CONSTANT_Y }
	global CONFIG_USER_TFTPD_TFTPD
	if {($CONFIG_USER_TFTPD_TFTPD == 1)} then {
	set CONFIG_USER_TFTPD_TFTPD_LOW_SEC [expr $CONFIG_USER_TFTPD_TFTPD_LOW_SEC&15]}
	global CONFIG_USER_ZEBRA_ZEBRA_ZEBRA
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {
	set CONFIG_USER_ZEBRA_BGPD_BGPD [expr $CONFIG_USER_ZEBRA_BGPD_BGPD&15]}
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {
	set CONFIG_USER_ZEBRA_OSPFD_OSPFD [expr $CONFIG_USER_ZEBRA_OSPFD_OSPFD&15]}
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {
	set CONFIG_USER_ZEBRA_RIPD_RIPD [expr $CONFIG_USER_ZEBRA_RIPD_RIPD&15]}
	global CONFIG_USER_WIRELESS_TOOLS
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	set CONFIG_USER_WIRELESS_TOOLS_IWCONFIG [expr $CONFIG_USER_WIRELESS_TOOLS_IWCONFIG&15]}
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	set CONFIG_USER_WIRELESS_TOOLS_IWGETID [expr $CONFIG_USER_WIRELESS_TOOLS_IWGETID&15]}
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	set CONFIG_USER_WIRELESS_TOOLS_IWLIST [expr $CONFIG_USER_WIRELESS_TOOLS_IWLIST&15]}
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	set CONFIG_USER_WIRELESS_TOOLS_IWPRIV [expr $CONFIG_USER_WIRELESS_TOOLS_IWPRIV&15]}
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {
	set CONFIG_USER_WIRELESS_TOOLS_IWSPY [expr $CONFIG_USER_WIRELESS_TOOLS_IWSPY&15]}
	global CONFIG_USER_HOSTAP_HOSTAP
	if {($CONFIG_USER_HOSTAP_HOSTAP == 1)} then {
	set CONFIG_USER_HOSTAP_PCI [expr $CONFIG_USER_HOSTAP_PCI&15]}
	if {($CONFIG_USER_HOSTAP_HOSTAP == 1)} then {
	set CONFIG_USER_HOSTAP_CS [expr $CONFIG_USER_HOSTAP_CS&15]}
	global CONFIG_USER_WLAN_NG
	if {($CONFIG_USER_WLAN_NG == 1)} then {
	set CONFIG_USER_WLAN_NG_WLAND [expr $CONFIG_USER_WLAN_NG_WLAND&15]}
	if {($CONFIG_USER_WLAN_NG == 1)} then {
	set CONFIG_USER_WLAN_NG_WLANCFG [expr $CONFIG_USER_WLAN_NG_WLANCFG&15]}
	if {($CONFIG_USER_WLAN_NG == 1)} then {
	set CONFIG_USER_WLAN_NG_WLANCTL [expr $CONFIG_USER_WLAN_NG_WLANCTL&15]}
}


menu_option menu7 7 "Miscellaneous Applications"
proc menu7 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 7}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 7]]
	message $w.m -width 400 -aspect 300 -text \
		"Miscellaneous Applications"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Miscellaneous Applications" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 7; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu8 .menu8 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 7 0 "a60" CONFIG_USER_LANG_A60
	bool $w.config.f 7 1 "  examples" CONFIG_USER_LANG_A60_EGS
	bool $w.config.f 7 2 "  tests" CONFIG_USER_LAND_A60_TEST
	bool $w.config.f 7 3 "cal" CONFIG_USER_CAL_CAL
	bool $w.config.f 7 4 "chat" CONFIG_USER_CHAT_CHAT
	bool $w.config.f 7 5 "  chat network/telnet support" CONFIG_USER_CHAT_CHAT_NETWORK
	bool $w.config.f 7 6 "cksum" CONFIG_USER_CKSUM_CKSUM
	bool $w.config.f 7 7 "clock" CONFIG_USER_CLOCK_CLOCK
	bool $w.config.f 7 8 "cpu" CONFIG_USER_CPU_CPU
	bool $w.config.f 7 9 "date" CONFIG_USER_CAL_DATE
	bool $w.config.f 7 10 "dhrystone" CONFIG_USER_DHRYSTONE_DHRYSTONE
	bool $w.config.f 7 11 "de2ts-cal" CONFIG_USER_DE2TSCAL_DE2TSCAL
	bool $w.config.f 7 12 "frob-led" CONFIG_USER_FROB_LED_FROB_LED
	bool $w.config.f 7 13 "gdbreplay" CONFIG_USER_GDBSERVER_GDBREPLAY
	bool $w.config.f 7 14 "gdbserver" CONFIG_USER_GDBSERVER_GDBSERVER
	bool $w.config.f 7 15 "hd" CONFIG_USER_HD_HD
	bool $w.config.f 7 16 "lcd" CONFIG_USER_LCD_LCD
	bool $w.config.f 7 17 "ledcon" CONFIG_USER_LEDCON_LEDCON
	bool $w.config.f 7 18 "lilo" CONFIG_USER_LILO_LILO
	bool $w.config.f 7 19 "lissa" CONFIG_USER_LISSA_LISSA
	bool $w.config.f 7 20 "mcf5272 cbi client" CONFIG_USER_USBCBI_USBCBI
	bool $w.config.f 7 21 "mcf5272 iso client" CONFIG_USER_USBISO_USBISO
	bool $w.config.f 7 22 "mathstests" CONFIG_USER_MATH_TEST
	bool $w.config.f 7 23 "mawk" CONFIG_USER_MAWK_AWK
	bool $w.config.f 7 24 "mysql" CONFIG_USER_MYSQL
	bool $w.config.f 7 25 "  client library" CONFIG_USER_MYSQL_CLIB
	bool $w.config.f 7 26 "null" CONFIG_USER_NULL_NULL
	bool $w.config.f 7 27 "palmbot" CONFIG_USER_PALMBOT_PALMBOT
	bool $w.config.f 7 28 "pcmcia-cs (Card Services)" CONFIG_USER_PCMCIA_CS
	bool $w.config.f 7 29 "perl" CONFIG_USER_PERL_PERL
	bool $w.config.f 7 30 "python" CONFIG_USER_PYTHON_PYTHON
	bool $w.config.f 7 31 "readprofile" CONFIG_USER_READPROFILE_READPROFILE
	bool $w.config.f 7 32 "rootloader" CONFIG_USER_ROOTLOADER_ROOTLOADER
	bool $w.config.f 7 33 "setserial" CONFIG_USER_SETSERIAL_SETSERIAL
	bool $w.config.f 7 34 "siggen" CONFIG_USER_TRIPWIRE_SIGGEN
	bool $w.config.f 7 35 "strace" CONFIG_USER_STRACE_STRACE
	bool $w.config.f 7 36 "stty" CONFIG_USER_STTY_STTY
	bool $w.config.f 7 37 "tcsh" CONFIG_USER_TCSH_TCSH
	bool $w.config.f 7 38 "tinytcl" CONFIG_USER_TINYTCL_TCLSH
	bool $w.config.f 7 39 "pThreads threaddemos" CONFIG_USER_THREADDEMOS_THREADDEMOS
	bool $w.config.f 7 40 "tip" CONFIG_USER_TIP_TIP
	bool $w.config.f 7 41 "tripwire" CONFIG_USER_TRIPWIRE_TRIPWIRE
	bool $w.config.f 7 42 "zmodem utils" CONFIG_USER_LRZSZ_LRZSZ
	bool $w.config.f 7 43 "    lrz" CONFIG_USER_LRZSZ_LRZ
	bool $w.config.f 7 44 "    lsz" CONFIG_USER_LRZSZ_LSZ
	comment $w.config.f 7 45 "LIRC"
	bool $w.config.f 7 46 "Enable LIRC tools" CONFIG_USER_LIRC
	dep_bool $w.config.f 7 47 "  lircd" CONFIG_USER_LIRC_LIRCD
	dep_bool $w.config.f 7 48 "  irrecord" CONFIG_USER_LIRC_IRRECORD
	dep_bool $w.config.f 7 49 "  lircmd" CONFIG_USER_LIRC_LIRCMD
	dep_bool $w.config.f 7 50 "  irexec" CONFIG_USER_LIRC_IREXEC
	dep_bool $w.config.f 7 51 "  irw" CONFIG_USER_LIRC_IRW
	dep_bool $w.config.f 7 52 "  mode2" CONFIG_USER_LIRC_MODE2
	comment $w.config.f 7 53 "Editors"
	bool $w.config.f 7 54 "vi (leevee)" CONFIG_USER_LEVEE_VI
	bool $w.config.f 7 55 "vi (elvis-tiny)" CONFIG_USER_ELVISTINY_VI
	comment $w.config.f 7 56 "Audio tools"
	bool $w.config.f 7 57 "mp3play" CONFIG_USER_MP3PLAY_MP3PLAY
	bool $w.config.f 7 58 "ogg123" CONFIG_USER_OGGPLAY_OGG123
	bool $w.config.f 7 59 "ivorbisfile_example" CONFIG_USER_OGGPLAY_EXAMPLE
	bool $w.config.f 7 60 "musicbox" CONFIG_USER_MUSICBOX_MUSICBOX
	bool $w.config.f 7 61 "play" CONFIG_USER_PLAY_PLAY
	bool $w.config.f 7 62 "tone" CONFIG_USER_PLAY_TONE
	bool $w.config.f 7 63 "vplay" CONFIG_USER_VPLAY_VPLAY
	bool $w.config.f 7 64 "vrec" CONFIG_USER_VPLAY_VREC
	bool $w.config.f 7 65 "mixer" CONFIG_USER_VPLAY_MIXER
	bool $w.config.f 7 66 "playrt" CONFIG_USER_PLAYRT_PLAYRT
	comment $w.config.f 7 67 "Video tools"
	bool $w.config.f 7 68 "vidcat" CONFIG_USER_W3CAM_VIDCAT
	bool $w.config.f 7 69 "w3camd" CONFIG_USER_W3CAM_W3CAMD
	comment $w.config.f 7 70 "Fileutils tools"
	bool $w.config.f 7 71 "cat" CONFIG_USER_FILEUTILS_CAT
	bool $w.config.f 7 72 "chgrp" CONFIG_USER_FILEUTILS_CHGRP
	bool $w.config.f 7 73 "chmod" CONFIG_USER_FILEUTILS_CHMOD
	bool $w.config.f 7 74 "chown" CONFIG_USER_FILEUTILS_CHOWN
	bool $w.config.f 7 75 "cmp" CONFIG_USER_FILEUTILS_CMP
	bool $w.config.f 7 76 "cp" CONFIG_USER_FILEUTILS_CP
	bool $w.config.f 7 77 "dd" CONFIG_USER_FILEUTILS_DD
	bool $w.config.f 7 78 "grep" CONFIG_USER_FILEUTILS_GREP
	bool $w.config.f 7 79 "l" CONFIG_USER_FILEUTILS_L
	bool $w.config.f 7 80 "ln" CONFIG_USER_FILEUTILS_LN
	bool $w.config.f 7 81 "ls" CONFIG_USER_FILEUTILS_LS
	bool $w.config.f 7 82 "mkdir" CONFIG_USER_FILEUTILS_MKDIR
	bool $w.config.f 7 83 "mkfifo" CONFIG_USER_FILEUTILS_MKFIFO
	bool $w.config.f 7 84 "mknod" CONFIG_USER_FILEUTILS_MKNOD
	bool $w.config.f 7 85 "more" CONFIG_USER_FILEUTILS_MORE
	bool $w.config.f 7 86 "mv" CONFIG_USER_FILEUTILS_MV
	bool $w.config.f 7 87 "rm" CONFIG_USER_FILEUTILS_RM
	bool $w.config.f 7 88 "rmdir" CONFIG_USER_FILEUTILS_RMDIR
	bool $w.config.f 7 89 "sync" CONFIG_USER_FILEUTILS_SYNC
	bool $w.config.f 7 90 "touch" CONFIG_USER_FILEUTILS_TOUCH
	comment $w.config.f 7 91 "Shutils tools"
	bool $w.config.f 7 92 "basename" CONFIG_USER_SHUTILS_BASENAME
	bool $w.config.f 7 93 "date" CONFIG_USER_SHUTILS_DATE
	bool $w.config.f 7 94 "dirname" CONFIG_USER_SHUTILS_DIRNAME
	bool $w.config.f 7 95 "echo" CONFIG_USER_SHUTILS_ECHO
	bool $w.config.f 7 96 "false" CONFIG_USER_SHUTILS_FALSE
	bool $w.config.f 7 97 "logname" CONFIG_USER_SHUTILS_LOGNAME
	bool $w.config.f 7 98 "printenv" CONFIG_USER_SHUTILS_PRINTENV
	bool $w.config.f 7 99 "pwd" CONFIG_USER_SHUTILS_PWD
	bool $w.config.f 7 100 "true" CONFIG_USER_SHUTILS_TRUE
	bool $w.config.f 7 101 "uname" CONFIG_USER_SHUTILS_UNAME
	bool $w.config.f 7 102 "which" CONFIG_USER_SHUTILS_WHICH
	bool $w.config.f 7 103 "whoami" CONFIG_USER_SHUTILS_WHOAMI
	bool $w.config.f 7 104 "yes" CONFIG_USER_SHUTILS_YES
	comment $w.config.f 7 105 "Sysutils tools"
	bool $w.config.f 7 106 "reboot" CONFIG_USER_SYSUTILS_REBOOT
	bool $w.config.f 7 107 "shutdown" CONFIG_USER_SYSUTILS_SHUTDOWN
	bool $w.config.f 7 108 "df" CONFIG_USER_SYSUTILS_DF
	bool $w.config.f 7 109 "free" CONFIG_USER_SYSUTILS_FREE
	bool $w.config.f 7 110 "hostname" CONFIG_USER_SYSUTILS_HOSTNAME
	bool $w.config.f 7 111 "kill" CONFIG_USER_SYSUTILS_KILL
	bool $w.config.f 7 112 "ps" CONFIG_USER_SYSUTILS_PS
	comment $w.config.f 7 113 "Procps tools"
	bool $w.config.f 7 114 "free" CONFIG_USER_PROCPS_FREE
	bool $w.config.f 7 115 "kill" CONFIG_USER_PROCPS_KILL
	bool $w.config.f 7 116 "pgrep" CONFIG_USER_PROCPS_PGREP
	bool $w.config.f 7 117 "pkill" CONFIG_USER_PROCPS_PKILL
	bool $w.config.f 7 118 "ps" CONFIG_USER_PROCPS_PS
	bool $w.config.f 7 119 "snice" CONFIG_USER_PROCPS_SNICE
	bool $w.config.f 7 120 "sysctl" CONFIG_USER_PROCPS_SYSCTL
	bool $w.config.f 7 121 "tload" CONFIG_USER_PROCPS_TLOAD
	bool $w.config.f 7 122 "top" CONFIG_USER_PROCPS_TOP
	bool $w.config.f 7 123 "uptime" CONFIG_USER_PROCPS_UPTIME
	bool $w.config.f 7 124 "vmstat" CONFIG_USER_PROCPS_VMSTAT
	bool $w.config.f 7 125 "w" CONFIG_USER_PROCPS_W
	bool $w.config.f 7 126 "watch" CONFIG_USER_PROCPS_WATCH
	comment $w.config.f 7 127 "PCI utilities"
	bool $w.config.f 7 128 "lspci" CONFIG_USER_PCIUTILS_LSPCI
	bool $w.config.f 7 129 "setpci" CONFIG_USER_PCIUTILS_SETPCI



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu7 {} {
	global CONFIG_USER_LANG_A60
	global CONFIG_USER_LANG_A60_EGS
	if {($CONFIG_USER_LANG_A60 == 1)} then {
	configure_entry .menu7.config.f.x1 normal {n l y}} else {configure_entry .menu7.config.f.x1 disabled {y n l}}
	global CONFIG_USER_LAND_A60_TEST
	if {($CONFIG_USER_LANG_A60 == 1)} then {
	configure_entry .menu7.config.f.x2 normal {n l y}} else {configure_entry .menu7.config.f.x2 disabled {y n l}}
	global CONFIG_USER_CHAT_CHAT
	global CONFIG_USER_CHAT_CHAT_NETWORK
	if {($CONFIG_USER_CHAT_CHAT == 1)} then {
	configure_entry .menu7.config.f.x5 normal {n l y}} else {configure_entry .menu7.config.f.x5 disabled {y n l}}
	global CONFIG_USER_MYSQL
	global CONFIG_USER_MYSQL_CLIB
	if {($CONFIG_USER_MYSQL == 1)} then {
	configure_entry .menu7.config.f.x25 normal {n l y}} else {configure_entry .menu7.config.f.x25 disabled {y n l}}
	global CONFIG_USER_LRZSZ_LRZSZ
	global CONFIG_USER_LRZSZ_LRZ
	if {($CONFIG_USER_LRZSZ_LRZSZ == 1)} then {
	configure_entry .menu7.config.f.x43 normal {n l y}} else {configure_entry .menu7.config.f.x43 disabled {y n l}}
	global CONFIG_USER_LRZSZ_LSZ
	if {($CONFIG_USER_LRZSZ_LRZSZ == 1)} then {
	configure_entry .menu7.config.f.x44 normal {n l y}} else {configure_entry .menu7.config.f.x44 disabled {y n l}}
	global CONFIG_USER_LIRC
	global CONFIG_USER_LIRC_LIRCD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_LIRCD [sync_bool $CONFIG_USER_LIRC_LIRCD $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x47 disabled {y};} else {configure_entry .menu7.config.f.x47 normal {y};}; configure_entry .menu7.config.f.x47 normal {n l}} else {configure_entry .menu7.config.f.x47 disabled {y n l}}
	global CONFIG_USER_LIRC_IRRECORD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_IRRECORD [sync_bool $CONFIG_USER_LIRC_IRRECORD $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x48 disabled {y};} else {configure_entry .menu7.config.f.x48 normal {y};}; configure_entry .menu7.config.f.x48 normal {n l}} else {configure_entry .menu7.config.f.x48 disabled {y n l}}
	global CONFIG_USER_LIRC_LIRCMD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_LIRCMD [sync_bool $CONFIG_USER_LIRC_LIRCMD $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x49 disabled {y};} else {configure_entry .menu7.config.f.x49 normal {y};}; configure_entry .menu7.config.f.x49 normal {n l}} else {configure_entry .menu7.config.f.x49 disabled {y n l}}
	global CONFIG_USER_LIRC_IREXEC
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_IREXEC [sync_bool $CONFIG_USER_LIRC_IREXEC $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x50 disabled {y};} else {configure_entry .menu7.config.f.x50 normal {y};}; configure_entry .menu7.config.f.x50 normal {n l}} else {configure_entry .menu7.config.f.x50 disabled {y n l}}
	global CONFIG_USER_LIRC_IRW
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_IRW [sync_bool $CONFIG_USER_LIRC_IRW $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x51 disabled {y};} else {configure_entry .menu7.config.f.x51 normal {y};}; configure_entry .menu7.config.f.x51 normal {n l}} else {configure_entry .menu7.config.f.x51 disabled {y n l}}
	global CONFIG_USER_LIRC_MODE2
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_MODE2 [sync_bool $CONFIG_USER_LIRC_MODE2 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x52 disabled {y};} else {configure_entry .menu7.config.f.x52 normal {y};}; configure_entry .menu7.config.f.x52 normal {n l}} else {configure_entry .menu7.config.f.x52 disabled {y n l}}
}


proc update_define_menu7 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_LIB_LIBPNG
	global CONFIG_LIB_LIBJPEG
	global CONFIG_LIB_NCURSES
	global CONFIG_USER_LANG_A60_EGS
set CONFIG_USER_LANG_A60_EGS [expr $CONFIG_USER_LANG_A60_EGS|16]
	global CONFIG_USER_LAND_A60_TEST
set CONFIG_USER_LAND_A60_TEST [expr $CONFIG_USER_LAND_A60_TEST|16]
	global CONFIG_USER_CHAT_CHAT_NETWORK
set CONFIG_USER_CHAT_CHAT_NETWORK [expr $CONFIG_USER_CHAT_CHAT_NETWORK|16]
	global CONFIG_USER_MYSQL_CLIB
set CONFIG_USER_MYSQL_CLIB [expr $CONFIG_USER_MYSQL_CLIB|16]
	global CONFIG_USER_LRZSZ_LRZ
set CONFIG_USER_LRZSZ_LRZ [expr $CONFIG_USER_LRZSZ_LRZ|16]
	global CONFIG_USER_LRZSZ_LSZ
set CONFIG_USER_LRZSZ_LSZ [expr $CONFIG_USER_LRZSZ_LSZ|16]
	global CONFIG_USER_LANG_A60
	if {($CONFIG_USER_LANG_A60 == 1)} then {
	set CONFIG_USER_LANG_A60_EGS [expr $CONFIG_USER_LANG_A60_EGS&15]}
	if {($CONFIG_USER_LANG_A60 == 1)} then {
	set CONFIG_USER_LAND_A60_TEST [expr $CONFIG_USER_LAND_A60_TEST&15]}
	global CONFIG_USER_CHAT_CHAT
	if {($CONFIG_USER_CHAT_CHAT == 1)} then {
	set CONFIG_USER_CHAT_CHAT_NETWORK [expr $CONFIG_USER_CHAT_CHAT_NETWORK&15]}
	global CONFIG_USER_MYSQL
	if {($CONFIG_USER_MYSQL == 1)} then {
	set CONFIG_USER_MYSQL_CLIB [expr $CONFIG_USER_MYSQL_CLIB&15]}
	global CONFIG_USER_LRZSZ_LRZSZ
	if {($CONFIG_USER_LRZSZ_LRZSZ == 1)} then {
	set CONFIG_USER_LRZSZ_LRZ [expr $CONFIG_USER_LRZSZ_LRZ&15]}
	if {($CONFIG_USER_LRZSZ_LRZSZ == 1)} then {
	set CONFIG_USER_LRZSZ_LSZ [expr $CONFIG_USER_LRZSZ_LSZ&15]}
	global CONFIG_USER_LIRC
	global CONFIG_USER_LIRC_LIRCD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_LIRCD [sync_bool $CONFIG_USER_LIRC_LIRCD $tmpvar_dep 0];set CONFIG_USER_LIRC_LIRCD [expr $CONFIG_USER_LIRC_LIRCD&15]}
	global CONFIG_USER_LIRC_IRRECORD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_IRRECORD [sync_bool $CONFIG_USER_LIRC_IRRECORD $tmpvar_dep 0];set CONFIG_USER_LIRC_IRRECORD [expr $CONFIG_USER_LIRC_IRRECORD&15]}
	global CONFIG_USER_LIRC_LIRCMD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_LIRCMD [sync_bool $CONFIG_USER_LIRC_LIRCMD $tmpvar_dep 0];set CONFIG_USER_LIRC_LIRCMD [expr $CONFIG_USER_LIRC_LIRCMD&15]}
	global CONFIG_USER_LIRC_IREXEC
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_IREXEC [sync_bool $CONFIG_USER_LIRC_IREXEC $tmpvar_dep 0];set CONFIG_USER_LIRC_IREXEC [expr $CONFIG_USER_LIRC_IREXEC&15]}
	global CONFIG_USER_LIRC_IRW
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_IRW [sync_bool $CONFIG_USER_LIRC_IRW $tmpvar_dep 0];set CONFIG_USER_LIRC_IRW [expr $CONFIG_USER_LIRC_IRW&15]}
	global CONFIG_USER_LIRC_MODE2
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USER_LIRC]];set CONFIG_USER_LIRC_MODE2 [sync_bool $CONFIG_USER_LIRC_MODE2 $tmpvar_dep 0];set CONFIG_USER_LIRC_MODE2 [expr $CONFIG_USER_LIRC_MODE2&15]}
	global CONFIG_USER_W3CAM_VIDCAT
	if {($CONFIG_USER_W3CAM_VIDCAT == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBPNG $CONSTANT_Y }
	if {($CONFIG_USER_W3CAM_VIDCAT == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_LIBJPEG $CONSTANT_Y }
	global CONFIG_USER_PROCPS_TOP
	if {($CONFIG_USER_PROCPS_TOP == 1)} then {	global CONSTANT_Y
set CONFIG_LIB_NCURSES $CONSTANT_Y }
}


menu_option menu8 8 "BusyBox"
proc menu8 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 8}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 8]]
	message $w.m -width 400 -aspect 300 -text \
		"BusyBox"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "BusyBox" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 8; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu9 .menu9 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 8 0 "BusyBox" CONFIG_USER_BUSYBOX_BUSYBOX
	comment $w.config.f 8 1 "Applets"
	bool $w.config.f 8 2 "adjtimex" CONFIG_USER_BUSYBOX_ADJTIMEX
	bool $w.config.f 8 3 "ar" CONFIG_USER_BUSYBOX_AR
	bool $w.config.f 8 4 "basename" CONFIG_USER_BUSYBOX_BASENAME
	bool $w.config.f 8 5 "cat" CONFIG_USER_BUSYBOX_CAT
	bool $w.config.f 8 6 "chgrp" CONFIG_USER_BUSYBOX_CHGRP
	bool $w.config.f 8 7 "chmod" CONFIG_USER_BUSYBOX_CHMOD
	bool $w.config.f 8 8 "chown" CONFIG_USER_BUSYBOX_CHOWN
	bool $w.config.f 8 9 "chroot" CONFIG_USER_BUSYBOX_CHROOT
	bool $w.config.f 8 10 "clear" CONFIG_USER_BUSYBOX_CLEAR
	bool $w.config.f 8 11 "cmp" CONFIG_USER_BUSYBOX_CMP
	bool $w.config.f 8 12 "cp" CONFIG_USER_BUSYBOX_CP
	bool $w.config.f 8 13 "cut" CONFIG_USER_BUSYBOX_CUT
	bool $w.config.f 8 14 "date" CONFIG_USER_BUSYBOX_DATE
	bool $w.config.f 8 15 "dc" CONFIG_USER_BUSYBOX_DC
	bool $w.config.f 8 16 "dd" CONFIG_USER_BUSYBOX_DD
	bool $w.config.f 8 17 "df" CONFIG_USER_BUSYBOX_DF
	bool $w.config.f 8 18 "dirname" CONFIG_USER_BUSYBOX_DIRNAME
	bool $w.config.f 8 19 "dmesg" CONFIG_USER_BUSYBOX_DMESG
	bool $w.config.f 8 20 "dutmp" CONFIG_USER_BUSYBOX_DUTMP
	bool $w.config.f 8 21 "du" CONFIG_USER_BUSYBOX_DU
	bool $w.config.f 8 22 "echo" CONFIG_USER_BUSYBOX_ECHO
	bool $w.config.f 8 23 "env" CONFIG_USER_BUSYBOX_ENV
	bool $w.config.f 8 24 "expr" CONFIG_USER_BUSYBOX_EXPR
	bool $w.config.f 8 25 "find" CONFIG_USER_BUSYBOX_FIND
	bool $w.config.f 8 26 "find: -type" CONFIG_USER_BUSYBOX_FIND_TYPE
	bool $w.config.f 8 27 "find: -perm" CONFIG_USER_BUSYBOX_FIND_PERM
	bool $w.config.f 8 28 "find: -mtime" CONFIG_USER_BUSYBOX_FIND_MTIME
	bool $w.config.f 8 29 "free" CONFIG_USER_BUSYBOX_FREE
	bool $w.config.f 8 30 "freeramdisk" CONFIG_USER_BUSYBOX_FREERAMDISK
	bool $w.config.f 8 31 "fsck_minix" CONFIG_USER_BUSYBOX_FSCK_MINIX
	bool $w.config.f 8 32 "getopt" CONFIG_USER_BUSYBOX_GETOPT
	bool $w.config.f 8 33 "grep" CONFIG_USER_BUSYBOX_GREP
	bool $w.config.f 8 34 "grep: enable context" CONFIG_USER_BUSYBOX_GREP_CONTEXT
	bool $w.config.f 8 35 "grep: egrep alias" CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS
	bool $w.config.f 8 36 "gunzip" CONFIG_USER_BUSYBOX_GUNZIP
	bool $w.config.f 8 37 "gzip" CONFIG_USER_BUSYBOX_GZIP
	bool $w.config.f 8 38 "halt" CONFIG_USER_BUSYBOX_HALT
	bool $w.config.f 8 39 "head" CONFIG_USER_BUSYBOX_HEAD
	bool $w.config.f 8 40 "hostname" CONFIG_USER_BUSYBOX_HOSTNAME
	bool $w.config.f 8 41 "id" CONFIG_USER_BUSYBOX_ID
	bool $w.config.f 8 42 "ifconfig" CONFIG_USER_BUSYBOX_IFCONFIG
	bool $w.config.f 8 43 "ifconfig: status reporting" CONFIG_USER_BUSYBOX_IFCONFIG_STATUS
	bool $w.config.f 8 44 "ifconfig: slip" CONFIG_USER_BUSYBOX_IFCONFIG_SLIP
	bool $w.config.f 8 45 "ifconfig: enable hw option" CONFIG_USER_BUSYBOX_IFCONFIG_HW
	bool $w.config.f 8 46 "ifconfig: extra options" CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ
	bool $w.config.f 8 47 "init" CONFIG_USER_BUSYBOX_INIT
	bool $w.config.f 8 48 "init: use inittab" CONFIG_USER_BUSYBOX_USE_INITTAB
	bool $w.config.f 8 49 "init: /linuxrc" CONFIG_USER_BUSYBOX_LINUXRC
	bool $w.config.f 8 50 "init: core dumps" CONFIG_USER_BUSYBOX_INIT_COREDUMPS
	bool $w.config.f 8 51 "insmod" CONFIG_USER_BUSYBOX_INSMOD
	bool $w.config.f 8 52 "insmod: load in kernel memory" CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM
	bool $w.config.f 8 53 "kill" CONFIG_USER_BUSYBOX_KILL
	bool $w.config.f 8 54 "killall" CONFIG_USER_BUSYBOX_KILLALL
	bool $w.config.f 8 55 "klogd" CONFIG_USER_BUSYBOX_KLOGD
	bool $w.config.f 8 56 "length" CONFIG_USER_BUSYBOX_LENGTH
	bool $w.config.f 8 57 "ln" CONFIG_USER_BUSYBOX_LN
	bool $w.config.f 8 58 "logger" CONFIG_USER_BUSYBOX_LOGGER
	bool $w.config.f 8 59 "logname" CONFIG_USER_BUSYBOX_LOGNAME
	bool $w.config.f 8 60 "ls" CONFIG_USER_BUSYBOX_LS
	bool $w.config.f 8 61 "ls: show usernames" CONFIG_USER_BUSYBOX_LS_USERNAME
	bool $w.config.f 8 62 "ls: show timestamps" CONFIG_USER_BUSYBOX_LS_TIMESTAMPS
	bool $w.config.f 8 63 "ls: file types" CONFIG_USER_BUSYBOX_LS_FILETYPES
	bool $w.config.f 8 64 "ls: sort files" CONFIG_USER_BUSYBOX_LS_SORTFILES
	bool $w.config.f 8 65 "ls: recursive" CONFIG_USER_BUSYBOX_LS_RECURSIVE
	bool $w.config.f 8 66 "ls: follow links" CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS
	bool $w.config.f 8 67 "lsmod" CONFIG_USER_BUSYBOX_LSMOD
	bool $w.config.f 8 68 "makedevs" CONFIG_USER_BUSYBOX_MAKEDEVS
	bool $w.config.f 8 69 "md5sum" CONFIG_USER_BUSYBOX_MD5SUM
	bool $w.config.f 8 70 "mkdir" CONFIG_USER_BUSYBOX_MKDIR
	bool $w.config.f 8 71 "mkfs_minix" CONFIG_USER_BUSYBOX_MKFS_MINIX
	bool $w.config.f 8 72 "mknod" CONFIG_USER_BUSYBOX_MKNOD
	bool $w.config.f 8 73 "mktemp" CONFIG_USER_BUSYBOX_MKTEMP
	bool $w.config.f 8 74 "modprobe" CONFIG_USER_BUSYBOX_MODPROBE
	bool $w.config.f 8 75 "more" CONFIG_USER_BUSYBOX_MORE
	bool $w.config.f 8 76 "mount" CONFIG_USER_BUSYBOX_MOUNT
	bool $w.config.f 8 77 "mount: loop devices" CONFIG_USER_BUSYBOX_MOUNT_LOOP
	bool $w.config.f 8 78 "mount: support /etc/mtab" CONFIG_USER_BUSYBOX_MTAB_SUPPORT
	bool $w.config.f 8 79 "mount: support NFS mounts" CONFIG_USER_BUSYBOX_NFSMOUNT
	bool $w.config.f 8 80 "mv" CONFIG_USER_BUSYBOX_MV
	bool $w.config.f 8 81 "nc" CONFIG_USER_BUSYBOX_NC
	bool $w.config.f 8 82 "nslookup" CONFIG_USER_BUSYBOX_NSLOOKUP
	bool $w.config.f 8 83 "pidof" CONFIG_USER_BUSYBOX_PIDOF
	bool $w.config.f 8 84 "ping" CONFIG_USER_BUSYBOX_PING
	bool $w.config.f 8 85 "ping: fancy" CONFIG_USER_BUSYBOX_FANCY_PING
	bool $w.config.f 8 86 "pivot_root" CONFIG_USER_BUSYBOX_PIVOT_ROOT
	bool $w.config.f 8 87 "poweroff" CONFIG_USER_BUSYBOX_POWEROFF
	bool $w.config.f 8 88 "printf" CONFIG_USER_BUSYBOX_PRINTF
	bool $w.config.f 8 89 "ps" CONFIG_USER_BUSYBOX_PS
	bool $w.config.f 8 90 "pwd" CONFIG_USER_BUSYBOX_PWD
	bool $w.config.f 8 91 "rdate" CONFIG_USER_BUSYBOX_RDATE
	bool $w.config.f 8 92 "readlink" CONFIG_USER_BUSYBOX_READLINK
	bool $w.config.f 8 93 "reboot" CONFIG_USER_BUSYBOX_REBOOT
	bool $w.config.f 8 94 "renice" CONFIG_USER_BUSYBOX_RENICE
	bool $w.config.f 8 95 "reset" CONFIG_USER_BUSYBOX_RESET
	bool $w.config.f 8 96 "rm" CONFIG_USER_BUSYBOX_RM
	bool $w.config.f 8 97 "rmdir" CONFIG_USER_BUSYBOX_RMDIR
	bool $w.config.f 8 98 "rmmod" CONFIG_USER_BUSYBOX_RMMOD
	bool $w.config.f 8 99 "route" CONFIG_USER_BUSYBOX_ROUTE
	bool $w.config.f 8 100 "rpm2cpio" CONFIG_USER_BUSYBOX_RPM2CPIO
	bool $w.config.f 8 101 "sed" CONFIG_USER_BUSYBOX_SED
	bool $w.config.f 8 102 "shell" CONFIG_USER_BUSYBOX_SHELL
	bool $w.config.f 8 103 "ash:  ASH shell" CONFIG_USER_BUSYBOX_ASH
	bool $w.config.f 8 104 "      ASH is /bin/sh" CONFIG_USER_BUSYBOX_SH_IS_ASH
	bool $w.config.f 8 105 "hush: HUSH shell" CONFIG_USER_BUSYBOX_HUSH
	bool $w.config.f 8 106 "      HUSH is /bin/sh" CONFIG_USER_BUSYBOX_SH_IS_HUSH
	bool $w.config.f 8 107 "lash: LASH shell" CONFIG_USER_BUSYBOX_LASH
	bool $w.config.f 8 108 "      LASH is /bin/sh" CONFIG_USER_BUSYBOX_SH_IS_LASH
	bool $w.config.f 8 109 "msh:  Minix shell" CONFIG_USER_BUSYBOX_MSH
	bool $w.config.f 8 110 "      MSH is /bin/sh" CONFIG_USER_BUSYBOX_SH_IS_MSH
	bool $w.config.f 8 111 "sh: command editing" CONFIG_USER_BUSYBOX_COMMAND_EDITING
	bool $w.config.f 8 112 "sh: tab completion" CONFIG_USER_BUSYBOX_TAB_COMPLETION
	bool $w.config.f 8 113 "sh: username completion" CONFIG_USER_BUSYBOX_USERNAME_COMPLETION
	bool $w.config.f 8 114 "sh: stand alone" CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL
	bool $w.config.f 8 115 "sh: applets first" CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN
	bool $w.config.f 8 116 "sh: fancy prompt" CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT
	bool $w.config.f 8 117 "sleep" CONFIG_USER_BUSYBOX_SLEEP
	bool $w.config.f 8 118 "sort" CONFIG_USER_BUSYBOX_SORT
	bool $w.config.f 8 119 "sort: allow reverse" CONFIG_USER_BUSYBOX_SORT_REVERSE
	bool $w.config.f 8 120 "sort: allow unique" CONFIG_USER_BUSYBOX_SORT_UNIQUE
	bool $w.config.f 8 121 "stty" CONFIG_USER_BUSYBOX_STTY
	bool $w.config.f 8 122 "sync" CONFIG_USER_BUSYBOX_SYNC
	bool $w.config.f 8 123 "syslogd" CONFIG_USER_BUSYBOX_SYSLOGD
	bool $w.config.f 8 124 "syslogd: -R" CONFIG_USER_BUSYBOX_REMOTE_LOG
	bool $w.config.f 8 125 "syslogd: -C" CONFIG_USER_BUSYBOX_IPC_SYSLOG
	bool $w.config.f 8 126 "tail" CONFIG_USER_BUSYBOX_TAIL
	bool $w.config.f 8 127 "tail: fancy" CONFIG_USER_BUSYBOX_FANCY_TAIL
	bool $w.config.f 8 128 "tar" CONFIG_USER_BUSYBOX_TAR
	bool $w.config.f 8 129 "tar: allow creation" CONFIG_USER_BUSYBOX_TAR_CREATE
	bool $w.config.f 8 130 "tar: allow exclude" CONFIG_USER_BUSYBOX_TAR_EXCLUDE
	bool $w.config.f 8 131 "tee" CONFIG_USER_BUSYBOX_TEE
	bool $w.config.f 8 132 "telnet" CONFIG_USER_BUSYBOX_TELNET
	bool $w.config.f 8 133 "telnet: TERM type" CONFIG_USER_BUSYBOX_TELNET_TTYPE
	bool $w.config.f 8 134 "test" CONFIG_USER_BUSYBOX_TEST
	bool $w.config.f 8 135 "tftp" CONFIG_USER_BUSYBOX_TFTP
	bool $w.config.f 8 136 "tftp: put" CONFIG_USER_BUSYBOX_TFTP_PUT
	bool $w.config.f 8 137 "tftp: get" CONFIG_USER_BUSYBOX_TFTP_GET
	bool $w.config.f 8 138 "touch" CONFIG_USER_BUSYBOX_TOUCH
	bool $w.config.f 8 139 "tr" CONFIG_USER_BUSYBOX_TR
	bool $w.config.f 8 140 "traceroute" CONFIG_USER_BUSYBOX_TRACEROUTE
	bool $w.config.f 8 141 "true_false" CONFIG_USER_BUSYBOX_TRUE_FALSE
	bool $w.config.f 8 142 "tty" CONFIG_USER_BUSYBOX_TTY
	bool $w.config.f 8 143 "umount" CONFIG_USER_BUSYBOX_UMOUNT
	bool $w.config.f 8 144 "umount: forced unmounts" CONFIG_USER_BUSYBOX_MOUNT_FORCE
	bool $w.config.f 8 145 "uname" CONFIG_USER_BUSYBOX_UNAME
	bool $w.config.f 8 146 "uniq" CONFIG_USER_BUSYBOX_UNIQ
	bool $w.config.f 8 147 "unix2dos" CONFIG_USER_BUSYBOX_UNIX2DOS
	bool $w.config.f 8 148 "uptime" CONFIG_USER_BUSYBOX_UPTIME
	bool $w.config.f 8 149 "usleep" CONFIG_USER_BUSYBOX_USLEEP
	bool $w.config.f 8 150 "uudecode" CONFIG_USER_BUSYBOX_UUDECODE
	bool $w.config.f 8 151 "uuencode" CONFIG_USER_BUSYBOX_UUENCODE
	bool $w.config.f 8 152 "vi" CONFIG_USER_BUSYBOX_VI
	bool $w.config.f 8 153 "vi: colon commands" CONFIG_USER_BUSYBOX_VI_COLON
	bool $w.config.f 8 154 "vi: yank / put / mark" CONFIG_USER_BUSYBOX_VI_YANKMARK
	bool $w.config.f 8 155 "vi: search / replace" CONFIG_USER_BUSYBOX_VI_SEARCH
	bool $w.config.f 8 156 "vi: catch signals" CONFIG_USER_BUSYBOX_VI_USE_SIGNALS
	bool $w.config.f 8 157 "vi: previous command" CONFIG_USER_BUSYBOX_VI_DOT_CMD
	bool $w.config.f 8 158 "vi: enable read only" CONFIG_USER_BUSYBOX_VI_READONLY
	bool $w.config.f 8 159 "vi: setable options" CONFIG_USER_BUSYBOX_VI_SETOPTS
	bool $w.config.f 8 160 "vi: allow :set" CONFIG_USER_BUSYBOX_VI_SET
	bool $w.config.f 8 161 "vi: window resizes" CONFIG_USER_BUSYBOX_VI_WIN_RESIZE
	bool $w.config.f 8 162 "watchdog" CONFIG_USER_BUSYBOX_WATCHDOG
	bool $w.config.f 8 163 "wc" CONFIG_USER_BUSYBOX_WC
	bool $w.config.f 8 164 "wget" CONFIG_USER_BUSYBOX_WGET
	bool $w.config.f 8 165 "wget: status bar" CONFIG_USER_BUSYBOX_WGET_STATUSBAR
	bool $w.config.f 8 166 "wget: authentication" CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION
	bool $w.config.f 8 167 "which" CONFIG_USER_BUSYBOX_WHICH
	bool $w.config.f 8 168 "whoami" CONFIG_USER_BUSYBOX_WHOAMI
	bool $w.config.f 8 169 "xargs" CONFIG_USER_BUSYBOX_XARGS
	bool $w.config.f 8 170 "yes" CONFIG_USER_BUSYBOX_YES
	comment $w.config.f 8 171 "other features"
	bool $w.config.f 8 172 "Verbose usages" CONFIG_USER_BUSYBOX_VERBOSE_USAGE
	bool $w.config.f 8 173 "Auto Width" CONFIG_USER_BUSYBOX_AUTOWIDTH
	bool $w.config.f 8 174 "Post 2.1 kernel modules" CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE
	bool $w.config.f 8 175 "Pre 2.1 kernel modules" CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE
	bool $w.config.f 8 176 "Model version checks" CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING
	bool $w.config.f 8 177 "Readable sizes" CONFIG_USER_BUSYBOX_HUMAN_READABLE



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu8 {} {
	global CONFIG_USER_BUSYBOX_BUSYBOX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {configure_entry .menu8.config.f.x1 normal {m}} else {configure_entry .menu8.config.f.x1 disabled {m}}
	global CONFIG_USER_BUSYBOX_ADJTIMEX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x2 normal {n l y}} else {configure_entry .menu8.config.f.x2 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_AR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x3 normal {n l y}} else {configure_entry .menu8.config.f.x3 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_BASENAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x4 normal {n l y}} else {configure_entry .menu8.config.f.x4 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CAT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x5 normal {n l y}} else {configure_entry .menu8.config.f.x5 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CHGRP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x6 normal {n l y}} else {configure_entry .menu8.config.f.x6 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CHMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x7 normal {n l y}} else {configure_entry .menu8.config.f.x7 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CHOWN
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x8 normal {n l y}} else {configure_entry .menu8.config.f.x8 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CHROOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x9 normal {n l y}} else {configure_entry .menu8.config.f.x9 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CLEAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x10 normal {n l y}} else {configure_entry .menu8.config.f.x10 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CMP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x11 normal {n l y}} else {configure_entry .menu8.config.f.x11 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x12 normal {n l y}} else {configure_entry .menu8.config.f.x12 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_CUT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x13 normal {n l y}} else {configure_entry .menu8.config.f.x13 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DATE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x14 normal {n l y}} else {configure_entry .menu8.config.f.x14 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x15 normal {n l y}} else {configure_entry .menu8.config.f.x15 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x16 normal {n l y}} else {configure_entry .menu8.config.f.x16 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x17 normal {n l y}} else {configure_entry .menu8.config.f.x17 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DIRNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x18 normal {n l y}} else {configure_entry .menu8.config.f.x18 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DMESG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x19 normal {n l y}} else {configure_entry .menu8.config.f.x19 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DUTMP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x20 normal {n l y}} else {configure_entry .menu8.config.f.x20 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_DU
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x21 normal {n l y}} else {configure_entry .menu8.config.f.x21 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_ECHO
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x22 normal {n l y}} else {configure_entry .menu8.config.f.x22 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_ENV
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x23 normal {n l y}} else {configure_entry .menu8.config.f.x23 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_EXPR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x24 normal {n l y}} else {configure_entry .menu8.config.f.x24 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FIND
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x25 normal {n l y}} else {configure_entry .menu8.config.f.x25 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FIND_TYPE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {
	configure_entry .menu8.config.f.x26 normal {n l y}} else {configure_entry .menu8.config.f.x26 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FIND_PERM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {
	configure_entry .menu8.config.f.x27 normal {n l y}} else {configure_entry .menu8.config.f.x27 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FIND_MTIME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {
	configure_entry .menu8.config.f.x28 normal {n l y}} else {configure_entry .menu8.config.f.x28 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FREE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x29 normal {n l y}} else {configure_entry .menu8.config.f.x29 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FREERAMDISK
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x30 normal {n l y}} else {configure_entry .menu8.config.f.x30 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FSCK_MINIX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x31 normal {n l y}} else {configure_entry .menu8.config.f.x31 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_GETOPT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x32 normal {n l y}} else {configure_entry .menu8.config.f.x32 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_GREP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x33 normal {n l y}} else {configure_entry .menu8.config.f.x33 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_GREP_CONTEXT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_GREP == 1)} then {
	configure_entry .menu8.config.f.x34 normal {n l y}} else {configure_entry .menu8.config.f.x34 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_GREP == 1)} then {
	configure_entry .menu8.config.f.x35 normal {n l y}} else {configure_entry .menu8.config.f.x35 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_GUNZIP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x36 normal {n l y}} else {configure_entry .menu8.config.f.x36 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_GZIP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x37 normal {n l y}} else {configure_entry .menu8.config.f.x37 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_HALT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x38 normal {n l y}} else {configure_entry .menu8.config.f.x38 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_HEAD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x39 normal {n l y}} else {configure_entry .menu8.config.f.x39 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_HOSTNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x40 normal {n l y}} else {configure_entry .menu8.config.f.x40 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_ID
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x41 normal {n l y}} else {configure_entry .menu8.config.f.x41 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_IFCONFIG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x42 normal {n l y}} else {configure_entry .menu8.config.f.x42 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_IFCONFIG_STATUS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	configure_entry .menu8.config.f.x43 normal {n l y}} else {configure_entry .menu8.config.f.x43 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_IFCONFIG_SLIP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	configure_entry .menu8.config.f.x44 normal {n l y}} else {configure_entry .menu8.config.f.x44 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_IFCONFIG_HW
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	configure_entry .menu8.config.f.x45 normal {n l y}} else {configure_entry .menu8.config.f.x45 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	configure_entry .menu8.config.f.x46 normal {n l y}} else {configure_entry .menu8.config.f.x46 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_INIT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x47 normal {n l y}} else {configure_entry .menu8.config.f.x47 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_USE_INITTAB
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {
	configure_entry .menu8.config.f.x48 normal {n l y}} else {configure_entry .menu8.config.f.x48 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LINUXRC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {
	configure_entry .menu8.config.f.x49 normal {n l y}} else {configure_entry .menu8.config.f.x49 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_INIT_COREDUMPS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {
	configure_entry .menu8.config.f.x50 normal {n l y}} else {configure_entry .menu8.config.f.x50 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_INSMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x51 normal {n l y}} else {configure_entry .menu8.config.f.x51 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INSMOD == 1)} then {
	configure_entry .menu8.config.f.x52 normal {n l y}} else {configure_entry .menu8.config.f.x52 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_KILL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x53 normal {n l y}} else {configure_entry .menu8.config.f.x53 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_KILLALL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x54 normal {n l y}} else {configure_entry .menu8.config.f.x54 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_KLOGD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x55 normal {n l y}} else {configure_entry .menu8.config.f.x55 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LENGTH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x56 normal {n l y}} else {configure_entry .menu8.config.f.x56 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LN
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x57 normal {n l y}} else {configure_entry .menu8.config.f.x57 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LOGGER
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x58 normal {n l y}} else {configure_entry .menu8.config.f.x58 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LOGNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x59 normal {n l y}} else {configure_entry .menu8.config.f.x59 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x60 normal {n l y}} else {configure_entry .menu8.config.f.x60 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS_USERNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	configure_entry .menu8.config.f.x61 normal {n l y}} else {configure_entry .menu8.config.f.x61 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS_TIMESTAMPS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	configure_entry .menu8.config.f.x62 normal {n l y}} else {configure_entry .menu8.config.f.x62 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS_FILETYPES
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	configure_entry .menu8.config.f.x63 normal {n l y}} else {configure_entry .menu8.config.f.x63 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS_SORTFILES
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	configure_entry .menu8.config.f.x64 normal {n l y}} else {configure_entry .menu8.config.f.x64 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS_RECURSIVE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	configure_entry .menu8.config.f.x65 normal {n l y}} else {configure_entry .menu8.config.f.x65 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	configure_entry .menu8.config.f.x66 normal {n l y}} else {configure_entry .menu8.config.f.x66 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LSMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x67 normal {n l y}} else {configure_entry .menu8.config.f.x67 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MAKEDEVS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x68 normal {n l y}} else {configure_entry .menu8.config.f.x68 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MD5SUM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x69 normal {n l y}} else {configure_entry .menu8.config.f.x69 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MKDIR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x70 normal {n l y}} else {configure_entry .menu8.config.f.x70 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MKFS_MINIX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x71 normal {n l y}} else {configure_entry .menu8.config.f.x71 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MKNOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x72 normal {n l y}} else {configure_entry .menu8.config.f.x72 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MKTEMP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x73 normal {n l y}} else {configure_entry .menu8.config.f.x73 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MODPROBE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x74 normal {n l y}} else {configure_entry .menu8.config.f.x74 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MORE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x75 normal {n l y}} else {configure_entry .menu8.config.f.x75 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MOUNT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x76 normal {n l y}} else {configure_entry .menu8.config.f.x76 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MOUNT_LOOP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {
	configure_entry .menu8.config.f.x77 normal {n l y}} else {configure_entry .menu8.config.f.x77 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MTAB_SUPPORT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {
	configure_entry .menu8.config.f.x78 normal {n l y}} else {configure_entry .menu8.config.f.x78 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_NFSMOUNT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {
	configure_entry .menu8.config.f.x79 normal {n l y}} else {configure_entry .menu8.config.f.x79 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MV
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x80 normal {n l y}} else {configure_entry .menu8.config.f.x80 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_NC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x81 normal {n l y}} else {configure_entry .menu8.config.f.x81 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_NSLOOKUP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x82 normal {n l y}} else {configure_entry .menu8.config.f.x82 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_PIDOF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x83 normal {n l y}} else {configure_entry .menu8.config.f.x83 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_PING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x84 normal {n l y}} else {configure_entry .menu8.config.f.x84 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FANCY_PING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_PING == 1)} then {
	configure_entry .menu8.config.f.x85 normal {n l y}} else {configure_entry .menu8.config.f.x85 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_PIVOT_ROOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x86 normal {n l y}} else {configure_entry .menu8.config.f.x86 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_POWEROFF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x87 normal {n l y}} else {configure_entry .menu8.config.f.x87 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_PRINTF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x88 normal {n l y}} else {configure_entry .menu8.config.f.x88 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_PS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x89 normal {n l y}} else {configure_entry .menu8.config.f.x89 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_PWD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x90 normal {n l y}} else {configure_entry .menu8.config.f.x90 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RDATE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x91 normal {n l y}} else {configure_entry .menu8.config.f.x91 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_READLINK
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x92 normal {n l y}} else {configure_entry .menu8.config.f.x92 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_REBOOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x93 normal {n l y}} else {configure_entry .menu8.config.f.x93 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RENICE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x94 normal {n l y}} else {configure_entry .menu8.config.f.x94 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RESET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x95 normal {n l y}} else {configure_entry .menu8.config.f.x95 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x96 normal {n l y}} else {configure_entry .menu8.config.f.x96 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RMDIR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x97 normal {n l y}} else {configure_entry .menu8.config.f.x97 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RMMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x98 normal {n l y}} else {configure_entry .menu8.config.f.x98 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_ROUTE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x99 normal {n l y}} else {configure_entry .menu8.config.f.x99 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_RPM2CPIO
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x100 normal {n l y}} else {configure_entry .menu8.config.f.x100 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SED
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x101 normal {n l y}} else {configure_entry .menu8.config.f.x101 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SHELL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x102 normal {n l y}} else {configure_entry .menu8.config.f.x102 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_ASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x103 normal {n l y}} else {configure_entry .menu8.config.f.x103 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_IS_ASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x104 normal {n l y}} else {configure_entry .menu8.config.f.x104 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_HUSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x105 normal {n l y}} else {configure_entry .menu8.config.f.x105 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_IS_HUSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x106 normal {n l y}} else {configure_entry .menu8.config.f.x106 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_LASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x107 normal {n l y}} else {configure_entry .menu8.config.f.x107 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_IS_LASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x108 normal {n l y}} else {configure_entry .menu8.config.f.x108 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x109 normal {n l y}} else {configure_entry .menu8.config.f.x109 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_IS_MSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x110 normal {n l y}} else {configure_entry .menu8.config.f.x110 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_COMMAND_EDITING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x111 normal {n l y}} else {configure_entry .menu8.config.f.x111 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TAB_COMPLETION
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x112 normal {n l y}} else {configure_entry .menu8.config.f.x112 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_USERNAME_COMPLETION
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x113 normal {n l y}} else {configure_entry .menu8.config.f.x113 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x114 normal {n l y}} else {configure_entry .menu8.config.f.x114 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1) && ($CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL == 1)} then {
	configure_entry .menu8.config.f.x115 normal {n l y}} else {configure_entry .menu8.config.f.x115 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	configure_entry .menu8.config.f.x116 normal {n l y}} else {configure_entry .menu8.config.f.x116 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SLEEP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x117 normal {n l y}} else {configure_entry .menu8.config.f.x117 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SORT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x118 normal {n l y}} else {configure_entry .menu8.config.f.x118 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SORT_REVERSE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SORT == 1)} then {
	configure_entry .menu8.config.f.x119 normal {n l y}} else {configure_entry .menu8.config.f.x119 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SORT_UNIQUE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SORT == 1)} then {
	configure_entry .menu8.config.f.x120 normal {n l y}} else {configure_entry .menu8.config.f.x120 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_STTY
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x121 normal {n l y}} else {configure_entry .menu8.config.f.x121 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SYNC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x122 normal {n l y}} else {configure_entry .menu8.config.f.x122 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_SYSLOGD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x123 normal {n l y}} else {configure_entry .menu8.config.f.x123 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_REMOTE_LOG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SYSLOGD == 1)} then {
	configure_entry .menu8.config.f.x124 normal {n l y}} else {configure_entry .menu8.config.f.x124 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_IPC_SYSLOG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SYSLOGD == 1)} then {
	configure_entry .menu8.config.f.x125 normal {n l y}} else {configure_entry .menu8.config.f.x125 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TAIL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x126 normal {n l y}} else {configure_entry .menu8.config.f.x126 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_FANCY_TAIL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAIL == 1)} then {
	configure_entry .menu8.config.f.x127 normal {n l y}} else {configure_entry .menu8.config.f.x127 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x128 normal {n l y}} else {configure_entry .menu8.config.f.x128 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TAR_CREATE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAR == 1)} then {
	configure_entry .menu8.config.f.x129 normal {n l y}} else {configure_entry .menu8.config.f.x129 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TAR_EXCLUDE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAR == 1)} then {
	configure_entry .menu8.config.f.x130 normal {n l y}} else {configure_entry .menu8.config.f.x130 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TEE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x131 normal {n l y}} else {configure_entry .menu8.config.f.x131 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TELNET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x132 normal {n l y}} else {configure_entry .menu8.config.f.x132 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TELNET_TTYPE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TELNET == 1)} then {
	configure_entry .menu8.config.f.x133 normal {n l y}} else {configure_entry .menu8.config.f.x133 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TEST
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x134 normal {n l y}} else {configure_entry .menu8.config.f.x134 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TFTP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x135 normal {n l y}} else {configure_entry .menu8.config.f.x135 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TFTP_PUT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TFTP == 1)} then {
	configure_entry .menu8.config.f.x136 normal {n l y}} else {configure_entry .menu8.config.f.x136 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TFTP_GET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TFTP == 1)} then {
	configure_entry .menu8.config.f.x137 normal {n l y}} else {configure_entry .menu8.config.f.x137 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TOUCH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x138 normal {n l y}} else {configure_entry .menu8.config.f.x138 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x139 normal {n l y}} else {configure_entry .menu8.config.f.x139 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TRACEROUTE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x140 normal {n l y}} else {configure_entry .menu8.config.f.x140 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TRUE_FALSE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x141 normal {n l y}} else {configure_entry .menu8.config.f.x141 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_TTY
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x142 normal {n l y}} else {configure_entry .menu8.config.f.x142 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UMOUNT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x143 normal {n l y}} else {configure_entry .menu8.config.f.x143 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_MOUNT_FORCE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_UMOUNT == 1)} then {
	configure_entry .menu8.config.f.x144 normal {n l y}} else {configure_entry .menu8.config.f.x144 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x145 normal {n l y}} else {configure_entry .menu8.config.f.x145 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UNIQ
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x146 normal {n l y}} else {configure_entry .menu8.config.f.x146 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UNIX2DOS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x147 normal {n l y}} else {configure_entry .menu8.config.f.x147 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UPTIME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x148 normal {n l y}} else {configure_entry .menu8.config.f.x148 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_USLEEP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x149 normal {n l y}} else {configure_entry .menu8.config.f.x149 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UUDECODE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x150 normal {n l y}} else {configure_entry .menu8.config.f.x150 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_UUENCODE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x151 normal {n l y}} else {configure_entry .menu8.config.f.x151 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x152 normal {n l y}} else {configure_entry .menu8.config.f.x152 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_COLON
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x153 normal {n l y}} else {configure_entry .menu8.config.f.x153 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_YANKMARK
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x154 normal {n l y}} else {configure_entry .menu8.config.f.x154 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_SEARCH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x155 normal {n l y}} else {configure_entry .menu8.config.f.x155 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_USE_SIGNALS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x156 normal {n l y}} else {configure_entry .menu8.config.f.x156 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_DOT_CMD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x157 normal {n l y}} else {configure_entry .menu8.config.f.x157 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_READONLY
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x158 normal {n l y}} else {configure_entry .menu8.config.f.x158 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_SETOPTS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x159 normal {n l y}} else {configure_entry .menu8.config.f.x159 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_SET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x160 normal {n l y}} else {configure_entry .menu8.config.f.x160 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_VI_WIN_RESIZE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	configure_entry .menu8.config.f.x161 normal {n l y}} else {configure_entry .menu8.config.f.x161 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WATCHDOG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x162 normal {n l y}} else {configure_entry .menu8.config.f.x162 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x163 normal {n l y}} else {configure_entry .menu8.config.f.x163 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WGET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x164 normal {n l y}} else {configure_entry .menu8.config.f.x164 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WGET_STATUSBAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_WGET == 1)} then {
	configure_entry .menu8.config.f.x165 normal {n l y}} else {configure_entry .menu8.config.f.x165 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_WGET == 1)} then {
	configure_entry .menu8.config.f.x166 normal {n l y}} else {configure_entry .menu8.config.f.x166 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WHICH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x167 normal {n l y}} else {configure_entry .menu8.config.f.x167 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_WHOAMI
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x168 normal {n l y}} else {configure_entry .menu8.config.f.x168 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_XARGS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x169 normal {n l y}} else {configure_entry .menu8.config.f.x169 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_YES
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x170 normal {n l y}} else {configure_entry .menu8.config.f.x170 disabled {y n l}}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {configure_entry .menu8.config.f.x171 normal {m}} else {configure_entry .menu8.config.f.x171 disabled {m}}
	global CONFIG_USER_BUSYBOX_VERBOSE_USAGE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x172 normal {n l y}} else {configure_entry .menu8.config.f.x172 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_AUTOWIDTH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x173 normal {n l y}} else {configure_entry .menu8.config.f.x173 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x174 normal {n l y}} else {configure_entry .menu8.config.f.x174 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x175 normal {n l y}} else {configure_entry .menu8.config.f.x175 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x176 normal {n l y}} else {configure_entry .menu8.config.f.x176 disabled {y n l}}
	global CONFIG_USER_BUSYBOX_HUMAN_READABLE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	configure_entry .menu8.config.f.x177 normal {n l y}} else {configure_entry .menu8.config.f.x177 disabled {y n l}}
}


proc update_define_menu8 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_USER_BUSYBOX_ADJTIMEX
set CONFIG_USER_BUSYBOX_ADJTIMEX [expr $CONFIG_USER_BUSYBOX_ADJTIMEX|16]
	global CONFIG_USER_BUSYBOX_AR
set CONFIG_USER_BUSYBOX_AR [expr $CONFIG_USER_BUSYBOX_AR|16]
	global CONFIG_USER_BUSYBOX_BASENAME
set CONFIG_USER_BUSYBOX_BASENAME [expr $CONFIG_USER_BUSYBOX_BASENAME|16]
	global CONFIG_USER_BUSYBOX_CAT
set CONFIG_USER_BUSYBOX_CAT [expr $CONFIG_USER_BUSYBOX_CAT|16]
	global CONFIG_USER_BUSYBOX_CHGRP
set CONFIG_USER_BUSYBOX_CHGRP [expr $CONFIG_USER_BUSYBOX_CHGRP|16]
	global CONFIG_USER_BUSYBOX_CHMOD
set CONFIG_USER_BUSYBOX_CHMOD [expr $CONFIG_USER_BUSYBOX_CHMOD|16]
	global CONFIG_USER_BUSYBOX_CHOWN
set CONFIG_USER_BUSYBOX_CHOWN [expr $CONFIG_USER_BUSYBOX_CHOWN|16]
	global CONFIG_USER_BUSYBOX_CHROOT
set CONFIG_USER_BUSYBOX_CHROOT [expr $CONFIG_USER_BUSYBOX_CHROOT|16]
	global CONFIG_USER_BUSYBOX_CLEAR
set CONFIG_USER_BUSYBOX_CLEAR [expr $CONFIG_USER_BUSYBOX_CLEAR|16]
	global CONFIG_USER_BUSYBOX_CMP
set CONFIG_USER_BUSYBOX_CMP [expr $CONFIG_USER_BUSYBOX_CMP|16]
	global CONFIG_USER_BUSYBOX_CP
set CONFIG_USER_BUSYBOX_CP [expr $CONFIG_USER_BUSYBOX_CP|16]
	global CONFIG_USER_BUSYBOX_CUT
set CONFIG_USER_BUSYBOX_CUT [expr $CONFIG_USER_BUSYBOX_CUT|16]
	global CONFIG_USER_BUSYBOX_DATE
set CONFIG_USER_BUSYBOX_DATE [expr $CONFIG_USER_BUSYBOX_DATE|16]
	global CONFIG_USER_BUSYBOX_DC
set CONFIG_USER_BUSYBOX_DC [expr $CONFIG_USER_BUSYBOX_DC|16]
	global CONFIG_USER_BUSYBOX_DD
set CONFIG_USER_BUSYBOX_DD [expr $CONFIG_USER_BUSYBOX_DD|16]
	global CONFIG_USER_BUSYBOX_DF
set CONFIG_USER_BUSYBOX_DF [expr $CONFIG_USER_BUSYBOX_DF|16]
	global CONFIG_USER_BUSYBOX_DIRNAME
set CONFIG_USER_BUSYBOX_DIRNAME [expr $CONFIG_USER_BUSYBOX_DIRNAME|16]
	global CONFIG_USER_BUSYBOX_DMESG
set CONFIG_USER_BUSYBOX_DMESG [expr $CONFIG_USER_BUSYBOX_DMESG|16]
	global CONFIG_USER_BUSYBOX_DUTMP
set CONFIG_USER_BUSYBOX_DUTMP [expr $CONFIG_USER_BUSYBOX_DUTMP|16]
	global CONFIG_USER_BUSYBOX_DU
set CONFIG_USER_BUSYBOX_DU [expr $CONFIG_USER_BUSYBOX_DU|16]
	global CONFIG_USER_BUSYBOX_ECHO
set CONFIG_USER_BUSYBOX_ECHO [expr $CONFIG_USER_BUSYBOX_ECHO|16]
	global CONFIG_USER_BUSYBOX_ENV
set CONFIG_USER_BUSYBOX_ENV [expr $CONFIG_USER_BUSYBOX_ENV|16]
	global CONFIG_USER_BUSYBOX_EXPR
set CONFIG_USER_BUSYBOX_EXPR [expr $CONFIG_USER_BUSYBOX_EXPR|16]
	global CONFIG_USER_BUSYBOX_FIND
set CONFIG_USER_BUSYBOX_FIND [expr $CONFIG_USER_BUSYBOX_FIND|16]
	global CONFIG_USER_BUSYBOX_FIND_TYPE
set CONFIG_USER_BUSYBOX_FIND_TYPE [expr $CONFIG_USER_BUSYBOX_FIND_TYPE|16]
	global CONFIG_USER_BUSYBOX_FIND_PERM
set CONFIG_USER_BUSYBOX_FIND_PERM [expr $CONFIG_USER_BUSYBOX_FIND_PERM|16]
	global CONFIG_USER_BUSYBOX_FIND_MTIME
set CONFIG_USER_BUSYBOX_FIND_MTIME [expr $CONFIG_USER_BUSYBOX_FIND_MTIME|16]
	global CONFIG_USER_BUSYBOX_FREE
set CONFIG_USER_BUSYBOX_FREE [expr $CONFIG_USER_BUSYBOX_FREE|16]
	global CONFIG_USER_BUSYBOX_FREERAMDISK
set CONFIG_USER_BUSYBOX_FREERAMDISK [expr $CONFIG_USER_BUSYBOX_FREERAMDISK|16]
	global CONFIG_USER_BUSYBOX_FSCK_MINIX
set CONFIG_USER_BUSYBOX_FSCK_MINIX [expr $CONFIG_USER_BUSYBOX_FSCK_MINIX|16]
	global CONFIG_USER_BUSYBOX_GETOPT
set CONFIG_USER_BUSYBOX_GETOPT [expr $CONFIG_USER_BUSYBOX_GETOPT|16]
	global CONFIG_USER_BUSYBOX_GREP
set CONFIG_USER_BUSYBOX_GREP [expr $CONFIG_USER_BUSYBOX_GREP|16]
	global CONFIG_USER_BUSYBOX_GREP_CONTEXT
set CONFIG_USER_BUSYBOX_GREP_CONTEXT [expr $CONFIG_USER_BUSYBOX_GREP_CONTEXT|16]
	global CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS
set CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS [expr $CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS|16]
	global CONFIG_USER_BUSYBOX_GUNZIP
set CONFIG_USER_BUSYBOX_GUNZIP [expr $CONFIG_USER_BUSYBOX_GUNZIP|16]
	global CONFIG_USER_BUSYBOX_GZIP
set CONFIG_USER_BUSYBOX_GZIP [expr $CONFIG_USER_BUSYBOX_GZIP|16]
	global CONFIG_USER_BUSYBOX_HALT
set CONFIG_USER_BUSYBOX_HALT [expr $CONFIG_USER_BUSYBOX_HALT|16]
	global CONFIG_USER_BUSYBOX_HEAD
set CONFIG_USER_BUSYBOX_HEAD [expr $CONFIG_USER_BUSYBOX_HEAD|16]
	global CONFIG_USER_BUSYBOX_HOSTNAME
set CONFIG_USER_BUSYBOX_HOSTNAME [expr $CONFIG_USER_BUSYBOX_HOSTNAME|16]
	global CONFIG_USER_BUSYBOX_ID
set CONFIG_USER_BUSYBOX_ID [expr $CONFIG_USER_BUSYBOX_ID|16]
	global CONFIG_USER_BUSYBOX_IFCONFIG
set CONFIG_USER_BUSYBOX_IFCONFIG [expr $CONFIG_USER_BUSYBOX_IFCONFIG|16]
	global CONFIG_USER_BUSYBOX_IFCONFIG_STATUS
set CONFIG_USER_BUSYBOX_IFCONFIG_STATUS [expr $CONFIG_USER_BUSYBOX_IFCONFIG_STATUS|16]
	global CONFIG_USER_BUSYBOX_IFCONFIG_SLIP
set CONFIG_USER_BUSYBOX_IFCONFIG_SLIP [expr $CONFIG_USER_BUSYBOX_IFCONFIG_SLIP|16]
	global CONFIG_USER_BUSYBOX_IFCONFIG_HW
set CONFIG_USER_BUSYBOX_IFCONFIG_HW [expr $CONFIG_USER_BUSYBOX_IFCONFIG_HW|16]
	global CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ
set CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ [expr $CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ|16]
	global CONFIG_USER_BUSYBOX_INIT
set CONFIG_USER_BUSYBOX_INIT [expr $CONFIG_USER_BUSYBOX_INIT|16]
	global CONFIG_USER_BUSYBOX_USE_INITTAB
set CONFIG_USER_BUSYBOX_USE_INITTAB [expr $CONFIG_USER_BUSYBOX_USE_INITTAB|16]
	global CONFIG_USER_BUSYBOX_LINUXRC
set CONFIG_USER_BUSYBOX_LINUXRC [expr $CONFIG_USER_BUSYBOX_LINUXRC|16]
	global CONFIG_USER_BUSYBOX_INIT_COREDUMPS
set CONFIG_USER_BUSYBOX_INIT_COREDUMPS [expr $CONFIG_USER_BUSYBOX_INIT_COREDUMPS|16]
	global CONFIG_USER_BUSYBOX_INSMOD
set CONFIG_USER_BUSYBOX_INSMOD [expr $CONFIG_USER_BUSYBOX_INSMOD|16]
	global CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM
set CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM [expr $CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM|16]
	global CONFIG_USER_BUSYBOX_KILL
set CONFIG_USER_BUSYBOX_KILL [expr $CONFIG_USER_BUSYBOX_KILL|16]
	global CONFIG_USER_BUSYBOX_KILLALL
set CONFIG_USER_BUSYBOX_KILLALL [expr $CONFIG_USER_BUSYBOX_KILLALL|16]
	global CONFIG_USER_BUSYBOX_KLOGD
set CONFIG_USER_BUSYBOX_KLOGD [expr $CONFIG_USER_BUSYBOX_KLOGD|16]
	global CONFIG_USER_BUSYBOX_LENGTH
set CONFIG_USER_BUSYBOX_LENGTH [expr $CONFIG_USER_BUSYBOX_LENGTH|16]
	global CONFIG_USER_BUSYBOX_LN
set CONFIG_USER_BUSYBOX_LN [expr $CONFIG_USER_BUSYBOX_LN|16]
	global CONFIG_USER_BUSYBOX_LOGGER
set CONFIG_USER_BUSYBOX_LOGGER [expr $CONFIG_USER_BUSYBOX_LOGGER|16]
	global CONFIG_USER_BUSYBOX_LOGNAME
set CONFIG_USER_BUSYBOX_LOGNAME [expr $CONFIG_USER_BUSYBOX_LOGNAME|16]
	global CONFIG_USER_BUSYBOX_LS
set CONFIG_USER_BUSYBOX_LS [expr $CONFIG_USER_BUSYBOX_LS|16]
	global CONFIG_USER_BUSYBOX_LS_USERNAME
set CONFIG_USER_BUSYBOX_LS_USERNAME [expr $CONFIG_USER_BUSYBOX_LS_USERNAME|16]
	global CONFIG_USER_BUSYBOX_LS_TIMESTAMPS
set CONFIG_USER_BUSYBOX_LS_TIMESTAMPS [expr $CONFIG_USER_BUSYBOX_LS_TIMESTAMPS|16]
	global CONFIG_USER_BUSYBOX_LS_FILETYPES
set CONFIG_USER_BUSYBOX_LS_FILETYPES [expr $CONFIG_USER_BUSYBOX_LS_FILETYPES|16]
	global CONFIG_USER_BUSYBOX_LS_SORTFILES
set CONFIG_USER_BUSYBOX_LS_SORTFILES [expr $CONFIG_USER_BUSYBOX_LS_SORTFILES|16]
	global CONFIG_USER_BUSYBOX_LS_RECURSIVE
set CONFIG_USER_BUSYBOX_LS_RECURSIVE [expr $CONFIG_USER_BUSYBOX_LS_RECURSIVE|16]
	global CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS
set CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS [expr $CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS|16]
	global CONFIG_USER_BUSYBOX_LSMOD
set CONFIG_USER_BUSYBOX_LSMOD [expr $CONFIG_USER_BUSYBOX_LSMOD|16]
	global CONFIG_USER_BUSYBOX_MAKEDEVS
set CONFIG_USER_BUSYBOX_MAKEDEVS [expr $CONFIG_USER_BUSYBOX_MAKEDEVS|16]
	global CONFIG_USER_BUSYBOX_MD5SUM
set CONFIG_USER_BUSYBOX_MD5SUM [expr $CONFIG_USER_BUSYBOX_MD5SUM|16]
	global CONFIG_USER_BUSYBOX_MKDIR
set CONFIG_USER_BUSYBOX_MKDIR [expr $CONFIG_USER_BUSYBOX_MKDIR|16]
	global CONFIG_USER_BUSYBOX_MKFS_MINIX
set CONFIG_USER_BUSYBOX_MKFS_MINIX [expr $CONFIG_USER_BUSYBOX_MKFS_MINIX|16]
	global CONFIG_USER_BUSYBOX_MKNOD
set CONFIG_USER_BUSYBOX_MKNOD [expr $CONFIG_USER_BUSYBOX_MKNOD|16]
	global CONFIG_USER_BUSYBOX_MKTEMP
set CONFIG_USER_BUSYBOX_MKTEMP [expr $CONFIG_USER_BUSYBOX_MKTEMP|16]
	global CONFIG_USER_BUSYBOX_MODPROBE
set CONFIG_USER_BUSYBOX_MODPROBE [expr $CONFIG_USER_BUSYBOX_MODPROBE|16]
	global CONFIG_USER_BUSYBOX_MORE
set CONFIG_USER_BUSYBOX_MORE [expr $CONFIG_USER_BUSYBOX_MORE|16]
	global CONFIG_USER_BUSYBOX_MOUNT
set CONFIG_USER_BUSYBOX_MOUNT [expr $CONFIG_USER_BUSYBOX_MOUNT|16]
	global CONFIG_USER_BUSYBOX_MOUNT_LOOP
set CONFIG_USER_BUSYBOX_MOUNT_LOOP [expr $CONFIG_USER_BUSYBOX_MOUNT_LOOP|16]
	global CONFIG_USER_BUSYBOX_MTAB_SUPPORT
set CONFIG_USER_BUSYBOX_MTAB_SUPPORT [expr $CONFIG_USER_BUSYBOX_MTAB_SUPPORT|16]
	global CONFIG_USER_BUSYBOX_NFSMOUNT
set CONFIG_USER_BUSYBOX_NFSMOUNT [expr $CONFIG_USER_BUSYBOX_NFSMOUNT|16]
	global CONFIG_USER_BUSYBOX_MV
set CONFIG_USER_BUSYBOX_MV [expr $CONFIG_USER_BUSYBOX_MV|16]
	global CONFIG_USER_BUSYBOX_NC
set CONFIG_USER_BUSYBOX_NC [expr $CONFIG_USER_BUSYBOX_NC|16]
	global CONFIG_USER_BUSYBOX_NSLOOKUP
set CONFIG_USER_BUSYBOX_NSLOOKUP [expr $CONFIG_USER_BUSYBOX_NSLOOKUP|16]
	global CONFIG_USER_BUSYBOX_PIDOF
set CONFIG_USER_BUSYBOX_PIDOF [expr $CONFIG_USER_BUSYBOX_PIDOF|16]
	global CONFIG_USER_BUSYBOX_PING
set CONFIG_USER_BUSYBOX_PING [expr $CONFIG_USER_BUSYBOX_PING|16]
	global CONFIG_USER_BUSYBOX_FANCY_PING
set CONFIG_USER_BUSYBOX_FANCY_PING [expr $CONFIG_USER_BUSYBOX_FANCY_PING|16]
	global CONFIG_USER_BUSYBOX_PIVOT_ROOT
set CONFIG_USER_BUSYBOX_PIVOT_ROOT [expr $CONFIG_USER_BUSYBOX_PIVOT_ROOT|16]
	global CONFIG_USER_BUSYBOX_POWEROFF
set CONFIG_USER_BUSYBOX_POWEROFF [expr $CONFIG_USER_BUSYBOX_POWEROFF|16]
	global CONFIG_USER_BUSYBOX_PRINTF
set CONFIG_USER_BUSYBOX_PRINTF [expr $CONFIG_USER_BUSYBOX_PRINTF|16]
	global CONFIG_USER_BUSYBOX_PS
set CONFIG_USER_BUSYBOX_PS [expr $CONFIG_USER_BUSYBOX_PS|16]
	global CONFIG_USER_BUSYBOX_PWD
set CONFIG_USER_BUSYBOX_PWD [expr $CONFIG_USER_BUSYBOX_PWD|16]
	global CONFIG_USER_BUSYBOX_RDATE
set CONFIG_USER_BUSYBOX_RDATE [expr $CONFIG_USER_BUSYBOX_RDATE|16]
	global CONFIG_USER_BUSYBOX_READLINK
set CONFIG_USER_BUSYBOX_READLINK [expr $CONFIG_USER_BUSYBOX_READLINK|16]
	global CONFIG_USER_BUSYBOX_REBOOT
set CONFIG_USER_BUSYBOX_REBOOT [expr $CONFIG_USER_BUSYBOX_REBOOT|16]
	global CONFIG_USER_BUSYBOX_RENICE
set CONFIG_USER_BUSYBOX_RENICE [expr $CONFIG_USER_BUSYBOX_RENICE|16]
	global CONFIG_USER_BUSYBOX_RESET
set CONFIG_USER_BUSYBOX_RESET [expr $CONFIG_USER_BUSYBOX_RESET|16]
	global CONFIG_USER_BUSYBOX_RM
set CONFIG_USER_BUSYBOX_RM [expr $CONFIG_USER_BUSYBOX_RM|16]
	global CONFIG_USER_BUSYBOX_RMDIR
set CONFIG_USER_BUSYBOX_RMDIR [expr $CONFIG_USER_BUSYBOX_RMDIR|16]
	global CONFIG_USER_BUSYBOX_RMMOD
set CONFIG_USER_BUSYBOX_RMMOD [expr $CONFIG_USER_BUSYBOX_RMMOD|16]
	global CONFIG_USER_BUSYBOX_ROUTE
set CONFIG_USER_BUSYBOX_ROUTE [expr $CONFIG_USER_BUSYBOX_ROUTE|16]
	global CONFIG_USER_BUSYBOX_RPM2CPIO
set CONFIG_USER_BUSYBOX_RPM2CPIO [expr $CONFIG_USER_BUSYBOX_RPM2CPIO|16]
	global CONFIG_USER_BUSYBOX_SED
set CONFIG_USER_BUSYBOX_SED [expr $CONFIG_USER_BUSYBOX_SED|16]
	global CONFIG_USER_BUSYBOX_SHELL
set CONFIG_USER_BUSYBOX_SHELL [expr $CONFIG_USER_BUSYBOX_SHELL|16]
	global CONFIG_USER_BUSYBOX_ASH
set CONFIG_USER_BUSYBOX_ASH [expr $CONFIG_USER_BUSYBOX_ASH|16]
	global CONFIG_USER_BUSYBOX_SH_IS_ASH
set CONFIG_USER_BUSYBOX_SH_IS_ASH [expr $CONFIG_USER_BUSYBOX_SH_IS_ASH|16]
	global CONFIG_USER_BUSYBOX_HUSH
set CONFIG_USER_BUSYBOX_HUSH [expr $CONFIG_USER_BUSYBOX_HUSH|16]
	global CONFIG_USER_BUSYBOX_SH_IS_HUSH
set CONFIG_USER_BUSYBOX_SH_IS_HUSH [expr $CONFIG_USER_BUSYBOX_SH_IS_HUSH|16]
	global CONFIG_USER_BUSYBOX_LASH
set CONFIG_USER_BUSYBOX_LASH [expr $CONFIG_USER_BUSYBOX_LASH|16]
	global CONFIG_USER_BUSYBOX_SH_IS_LASH
set CONFIG_USER_BUSYBOX_SH_IS_LASH [expr $CONFIG_USER_BUSYBOX_SH_IS_LASH|16]
	global CONFIG_USER_BUSYBOX_MSH
set CONFIG_USER_BUSYBOX_MSH [expr $CONFIG_USER_BUSYBOX_MSH|16]
	global CONFIG_USER_BUSYBOX_SH_IS_MSH
set CONFIG_USER_BUSYBOX_SH_IS_MSH [expr $CONFIG_USER_BUSYBOX_SH_IS_MSH|16]
	global CONFIG_USER_BUSYBOX_COMMAND_EDITING
set CONFIG_USER_BUSYBOX_COMMAND_EDITING [expr $CONFIG_USER_BUSYBOX_COMMAND_EDITING|16]
	global CONFIG_USER_BUSYBOX_TAB_COMPLETION
set CONFIG_USER_BUSYBOX_TAB_COMPLETION [expr $CONFIG_USER_BUSYBOX_TAB_COMPLETION|16]
	global CONFIG_USER_BUSYBOX_USERNAME_COMPLETION
set CONFIG_USER_BUSYBOX_USERNAME_COMPLETION [expr $CONFIG_USER_BUSYBOX_USERNAME_COMPLETION|16]
	global CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL
set CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL [expr $CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL|16]
	global CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN
set CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN [expr $CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN|16]
	global CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT
set CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT [expr $CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT|16]
	global CONFIG_USER_BUSYBOX_SLEEP
set CONFIG_USER_BUSYBOX_SLEEP [expr $CONFIG_USER_BUSYBOX_SLEEP|16]
	global CONFIG_USER_BUSYBOX_SORT
set CONFIG_USER_BUSYBOX_SORT [expr $CONFIG_USER_BUSYBOX_SORT|16]
	global CONFIG_USER_BUSYBOX_SORT_REVERSE
set CONFIG_USER_BUSYBOX_SORT_REVERSE [expr $CONFIG_USER_BUSYBOX_SORT_REVERSE|16]
	global CONFIG_USER_BUSYBOX_SORT_UNIQUE
set CONFIG_USER_BUSYBOX_SORT_UNIQUE [expr $CONFIG_USER_BUSYBOX_SORT_UNIQUE|16]
	global CONFIG_USER_BUSYBOX_STTY
set CONFIG_USER_BUSYBOX_STTY [expr $CONFIG_USER_BUSYBOX_STTY|16]
	global CONFIG_USER_BUSYBOX_SYNC
set CONFIG_USER_BUSYBOX_SYNC [expr $CONFIG_USER_BUSYBOX_SYNC|16]
	global CONFIG_USER_BUSYBOX_SYSLOGD
set CONFIG_USER_BUSYBOX_SYSLOGD [expr $CONFIG_USER_BUSYBOX_SYSLOGD|16]
	global CONFIG_USER_BUSYBOX_REMOTE_LOG
set CONFIG_USER_BUSYBOX_REMOTE_LOG [expr $CONFIG_USER_BUSYBOX_REMOTE_LOG|16]
	global CONFIG_USER_BUSYBOX_IPC_SYSLOG
set CONFIG_USER_BUSYBOX_IPC_SYSLOG [expr $CONFIG_USER_BUSYBOX_IPC_SYSLOG|16]
	global CONFIG_USER_BUSYBOX_TAIL
set CONFIG_USER_BUSYBOX_TAIL [expr $CONFIG_USER_BUSYBOX_TAIL|16]
	global CONFIG_USER_BUSYBOX_FANCY_TAIL
set CONFIG_USER_BUSYBOX_FANCY_TAIL [expr $CONFIG_USER_BUSYBOX_FANCY_TAIL|16]
	global CONFIG_USER_BUSYBOX_TAR
set CONFIG_USER_BUSYBOX_TAR [expr $CONFIG_USER_BUSYBOX_TAR|16]
	global CONFIG_USER_BUSYBOX_TAR_CREATE
set CONFIG_USER_BUSYBOX_TAR_CREATE [expr $CONFIG_USER_BUSYBOX_TAR_CREATE|16]
	global CONFIG_USER_BUSYBOX_TAR_EXCLUDE
set CONFIG_USER_BUSYBOX_TAR_EXCLUDE [expr $CONFIG_USER_BUSYBOX_TAR_EXCLUDE|16]
	global CONFIG_USER_BUSYBOX_TEE
set CONFIG_USER_BUSYBOX_TEE [expr $CONFIG_USER_BUSYBOX_TEE|16]
	global CONFIG_USER_BUSYBOX_TELNET
set CONFIG_USER_BUSYBOX_TELNET [expr $CONFIG_USER_BUSYBOX_TELNET|16]
	global CONFIG_USER_BUSYBOX_TELNET_TTYPE
set CONFIG_USER_BUSYBOX_TELNET_TTYPE [expr $CONFIG_USER_BUSYBOX_TELNET_TTYPE|16]
	global CONFIG_USER_BUSYBOX_TEST
set CONFIG_USER_BUSYBOX_TEST [expr $CONFIG_USER_BUSYBOX_TEST|16]
	global CONFIG_USER_BUSYBOX_TFTP
set CONFIG_USER_BUSYBOX_TFTP [expr $CONFIG_USER_BUSYBOX_TFTP|16]
	global CONFIG_USER_BUSYBOX_TFTP_PUT
set CONFIG_USER_BUSYBOX_TFTP_PUT [expr $CONFIG_USER_BUSYBOX_TFTP_PUT|16]
	global CONFIG_USER_BUSYBOX_TFTP_GET
set CONFIG_USER_BUSYBOX_TFTP_GET [expr $CONFIG_USER_BUSYBOX_TFTP_GET|16]
	global CONFIG_USER_BUSYBOX_TOUCH
set CONFIG_USER_BUSYBOX_TOUCH [expr $CONFIG_USER_BUSYBOX_TOUCH|16]
	global CONFIG_USER_BUSYBOX_TR
set CONFIG_USER_BUSYBOX_TR [expr $CONFIG_USER_BUSYBOX_TR|16]
	global CONFIG_USER_BUSYBOX_TRACEROUTE
set CONFIG_USER_BUSYBOX_TRACEROUTE [expr $CONFIG_USER_BUSYBOX_TRACEROUTE|16]
	global CONFIG_USER_BUSYBOX_TRUE_FALSE
set CONFIG_USER_BUSYBOX_TRUE_FALSE [expr $CONFIG_USER_BUSYBOX_TRUE_FALSE|16]
	global CONFIG_USER_BUSYBOX_TTY
set CONFIG_USER_BUSYBOX_TTY [expr $CONFIG_USER_BUSYBOX_TTY|16]
	global CONFIG_USER_BUSYBOX_UMOUNT
set CONFIG_USER_BUSYBOX_UMOUNT [expr $CONFIG_USER_BUSYBOX_UMOUNT|16]
	global CONFIG_USER_BUSYBOX_MOUNT_FORCE
set CONFIG_USER_BUSYBOX_MOUNT_FORCE [expr $CONFIG_USER_BUSYBOX_MOUNT_FORCE|16]
	global CONFIG_USER_BUSYBOX_UNAME
set CONFIG_USER_BUSYBOX_UNAME [expr $CONFIG_USER_BUSYBOX_UNAME|16]
	global CONFIG_USER_BUSYBOX_UNIQ
set CONFIG_USER_BUSYBOX_UNIQ [expr $CONFIG_USER_BUSYBOX_UNIQ|16]
	global CONFIG_USER_BUSYBOX_UNIX2DOS
set CONFIG_USER_BUSYBOX_UNIX2DOS [expr $CONFIG_USER_BUSYBOX_UNIX2DOS|16]
	global CONFIG_USER_BUSYBOX_UPTIME
set CONFIG_USER_BUSYBOX_UPTIME [expr $CONFIG_USER_BUSYBOX_UPTIME|16]
	global CONFIG_USER_BUSYBOX_USLEEP
set CONFIG_USER_BUSYBOX_USLEEP [expr $CONFIG_USER_BUSYBOX_USLEEP|16]
	global CONFIG_USER_BUSYBOX_UUDECODE
set CONFIG_USER_BUSYBOX_UUDECODE [expr $CONFIG_USER_BUSYBOX_UUDECODE|16]
	global CONFIG_USER_BUSYBOX_UUENCODE
set CONFIG_USER_BUSYBOX_UUENCODE [expr $CONFIG_USER_BUSYBOX_UUENCODE|16]
	global CONFIG_USER_BUSYBOX_VI
set CONFIG_USER_BUSYBOX_VI [expr $CONFIG_USER_BUSYBOX_VI|16]
	global CONFIG_USER_BUSYBOX_VI_COLON
set CONFIG_USER_BUSYBOX_VI_COLON [expr $CONFIG_USER_BUSYBOX_VI_COLON|16]
	global CONFIG_USER_BUSYBOX_VI_YANKMARK
set CONFIG_USER_BUSYBOX_VI_YANKMARK [expr $CONFIG_USER_BUSYBOX_VI_YANKMARK|16]
	global CONFIG_USER_BUSYBOX_VI_SEARCH
set CONFIG_USER_BUSYBOX_VI_SEARCH [expr $CONFIG_USER_BUSYBOX_VI_SEARCH|16]
	global CONFIG_USER_BUSYBOX_VI_USE_SIGNALS
set CONFIG_USER_BUSYBOX_VI_USE_SIGNALS [expr $CONFIG_USER_BUSYBOX_VI_USE_SIGNALS|16]
	global CONFIG_USER_BUSYBOX_VI_DOT_CMD
set CONFIG_USER_BUSYBOX_VI_DOT_CMD [expr $CONFIG_USER_BUSYBOX_VI_DOT_CMD|16]
	global CONFIG_USER_BUSYBOX_VI_READONLY
set CONFIG_USER_BUSYBOX_VI_READONLY [expr $CONFIG_USER_BUSYBOX_VI_READONLY|16]
	global CONFIG_USER_BUSYBOX_VI_SETOPTS
set CONFIG_USER_BUSYBOX_VI_SETOPTS [expr $CONFIG_USER_BUSYBOX_VI_SETOPTS|16]
	global CONFIG_USER_BUSYBOX_VI_SET
set CONFIG_USER_BUSYBOX_VI_SET [expr $CONFIG_USER_BUSYBOX_VI_SET|16]
	global CONFIG_USER_BUSYBOX_VI_WIN_RESIZE
set CONFIG_USER_BUSYBOX_VI_WIN_RESIZE [expr $CONFIG_USER_BUSYBOX_VI_WIN_RESIZE|16]
	global CONFIG_USER_BUSYBOX_WATCHDOG
set CONFIG_USER_BUSYBOX_WATCHDOG [expr $CONFIG_USER_BUSYBOX_WATCHDOG|16]
	global CONFIG_USER_BUSYBOX_WC
set CONFIG_USER_BUSYBOX_WC [expr $CONFIG_USER_BUSYBOX_WC|16]
	global CONFIG_USER_BUSYBOX_WGET
set CONFIG_USER_BUSYBOX_WGET [expr $CONFIG_USER_BUSYBOX_WGET|16]
	global CONFIG_USER_BUSYBOX_WGET_STATUSBAR
set CONFIG_USER_BUSYBOX_WGET_STATUSBAR [expr $CONFIG_USER_BUSYBOX_WGET_STATUSBAR|16]
	global CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION
set CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION [expr $CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION|16]
	global CONFIG_USER_BUSYBOX_WHICH
set CONFIG_USER_BUSYBOX_WHICH [expr $CONFIG_USER_BUSYBOX_WHICH|16]
	global CONFIG_USER_BUSYBOX_WHOAMI
set CONFIG_USER_BUSYBOX_WHOAMI [expr $CONFIG_USER_BUSYBOX_WHOAMI|16]
	global CONFIG_USER_BUSYBOX_XARGS
set CONFIG_USER_BUSYBOX_XARGS [expr $CONFIG_USER_BUSYBOX_XARGS|16]
	global CONFIG_USER_BUSYBOX_YES
set CONFIG_USER_BUSYBOX_YES [expr $CONFIG_USER_BUSYBOX_YES|16]
	global CONFIG_USER_BUSYBOX_VERBOSE_USAGE
set CONFIG_USER_BUSYBOX_VERBOSE_USAGE [expr $CONFIG_USER_BUSYBOX_VERBOSE_USAGE|16]
	global CONFIG_USER_BUSYBOX_AUTOWIDTH
set CONFIG_USER_BUSYBOX_AUTOWIDTH [expr $CONFIG_USER_BUSYBOX_AUTOWIDTH|16]
	global CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE
set CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE [expr $CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE|16]
	global CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE
set CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE [expr $CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE|16]
	global CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING
set CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING [expr $CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING|16]
	global CONFIG_USER_BUSYBOX_HUMAN_READABLE
set CONFIG_USER_BUSYBOX_HUMAN_READABLE [expr $CONFIG_USER_BUSYBOX_HUMAN_READABLE|16]
	global CONFIG_USER_BUSYBOX_BUSYBOX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_ADJTIMEX [expr $CONFIG_USER_BUSYBOX_ADJTIMEX&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_AR [expr $CONFIG_USER_BUSYBOX_AR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_BASENAME [expr $CONFIG_USER_BUSYBOX_BASENAME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CAT [expr $CONFIG_USER_BUSYBOX_CAT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CHGRP [expr $CONFIG_USER_BUSYBOX_CHGRP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CHMOD [expr $CONFIG_USER_BUSYBOX_CHMOD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CHOWN [expr $CONFIG_USER_BUSYBOX_CHOWN&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CHROOT [expr $CONFIG_USER_BUSYBOX_CHROOT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CLEAR [expr $CONFIG_USER_BUSYBOX_CLEAR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CMP [expr $CONFIG_USER_BUSYBOX_CMP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CP [expr $CONFIG_USER_BUSYBOX_CP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_CUT [expr $CONFIG_USER_BUSYBOX_CUT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DATE [expr $CONFIG_USER_BUSYBOX_DATE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DC [expr $CONFIG_USER_BUSYBOX_DC&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DD [expr $CONFIG_USER_BUSYBOX_DD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DF [expr $CONFIG_USER_BUSYBOX_DF&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DIRNAME [expr $CONFIG_USER_BUSYBOX_DIRNAME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DMESG [expr $CONFIG_USER_BUSYBOX_DMESG&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DUTMP [expr $CONFIG_USER_BUSYBOX_DUTMP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_DU [expr $CONFIG_USER_BUSYBOX_DU&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_ECHO [expr $CONFIG_USER_BUSYBOX_ECHO&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_ENV [expr $CONFIG_USER_BUSYBOX_ENV&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_EXPR [expr $CONFIG_USER_BUSYBOX_EXPR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_FIND [expr $CONFIG_USER_BUSYBOX_FIND&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {
	set CONFIG_USER_BUSYBOX_FIND_TYPE [expr $CONFIG_USER_BUSYBOX_FIND_TYPE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {
	set CONFIG_USER_BUSYBOX_FIND_PERM [expr $CONFIG_USER_BUSYBOX_FIND_PERM&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {
	set CONFIG_USER_BUSYBOX_FIND_MTIME [expr $CONFIG_USER_BUSYBOX_FIND_MTIME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_FREE [expr $CONFIG_USER_BUSYBOX_FREE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_FREERAMDISK [expr $CONFIG_USER_BUSYBOX_FREERAMDISK&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_FSCK_MINIX [expr $CONFIG_USER_BUSYBOX_FSCK_MINIX&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_GETOPT [expr $CONFIG_USER_BUSYBOX_GETOPT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_GREP [expr $CONFIG_USER_BUSYBOX_GREP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_GREP == 1)} then {
	set CONFIG_USER_BUSYBOX_GREP_CONTEXT [expr $CONFIG_USER_BUSYBOX_GREP_CONTEXT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_GREP == 1)} then {
	set CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS [expr $CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_GUNZIP [expr $CONFIG_USER_BUSYBOX_GUNZIP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_GZIP [expr $CONFIG_USER_BUSYBOX_GZIP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_HALT [expr $CONFIG_USER_BUSYBOX_HALT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_HEAD [expr $CONFIG_USER_BUSYBOX_HEAD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_HOSTNAME [expr $CONFIG_USER_BUSYBOX_HOSTNAME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_ID [expr $CONFIG_USER_BUSYBOX_ID&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_IFCONFIG [expr $CONFIG_USER_BUSYBOX_IFCONFIG&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	set CONFIG_USER_BUSYBOX_IFCONFIG_STATUS [expr $CONFIG_USER_BUSYBOX_IFCONFIG_STATUS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	set CONFIG_USER_BUSYBOX_IFCONFIG_SLIP [expr $CONFIG_USER_BUSYBOX_IFCONFIG_SLIP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	set CONFIG_USER_BUSYBOX_IFCONFIG_HW [expr $CONFIG_USER_BUSYBOX_IFCONFIG_HW&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {
	set CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ [expr $CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_INIT [expr $CONFIG_USER_BUSYBOX_INIT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {
	set CONFIG_USER_BUSYBOX_USE_INITTAB [expr $CONFIG_USER_BUSYBOX_USE_INITTAB&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {
	set CONFIG_USER_BUSYBOX_LINUXRC [expr $CONFIG_USER_BUSYBOX_LINUXRC&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {
	set CONFIG_USER_BUSYBOX_INIT_COREDUMPS [expr $CONFIG_USER_BUSYBOX_INIT_COREDUMPS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_INSMOD [expr $CONFIG_USER_BUSYBOX_INSMOD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INSMOD == 1)} then {
	set CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM [expr $CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_KILL [expr $CONFIG_USER_BUSYBOX_KILL&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_KILLALL [expr $CONFIG_USER_BUSYBOX_KILLALL&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_KLOGD [expr $CONFIG_USER_BUSYBOX_KLOGD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_LENGTH [expr $CONFIG_USER_BUSYBOX_LENGTH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_LN [expr $CONFIG_USER_BUSYBOX_LN&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_LOGGER [expr $CONFIG_USER_BUSYBOX_LOGGER&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_LOGNAME [expr $CONFIG_USER_BUSYBOX_LOGNAME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_LS [expr $CONFIG_USER_BUSYBOX_LS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	set CONFIG_USER_BUSYBOX_LS_USERNAME [expr $CONFIG_USER_BUSYBOX_LS_USERNAME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	set CONFIG_USER_BUSYBOX_LS_TIMESTAMPS [expr $CONFIG_USER_BUSYBOX_LS_TIMESTAMPS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	set CONFIG_USER_BUSYBOX_LS_FILETYPES [expr $CONFIG_USER_BUSYBOX_LS_FILETYPES&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	set CONFIG_USER_BUSYBOX_LS_SORTFILES [expr $CONFIG_USER_BUSYBOX_LS_SORTFILES&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	set CONFIG_USER_BUSYBOX_LS_RECURSIVE [expr $CONFIG_USER_BUSYBOX_LS_RECURSIVE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {
	set CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS [expr $CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_LSMOD [expr $CONFIG_USER_BUSYBOX_LSMOD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MAKEDEVS [expr $CONFIG_USER_BUSYBOX_MAKEDEVS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MD5SUM [expr $CONFIG_USER_BUSYBOX_MD5SUM&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MKDIR [expr $CONFIG_USER_BUSYBOX_MKDIR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MKFS_MINIX [expr $CONFIG_USER_BUSYBOX_MKFS_MINIX&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MKNOD [expr $CONFIG_USER_BUSYBOX_MKNOD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MKTEMP [expr $CONFIG_USER_BUSYBOX_MKTEMP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MODPROBE [expr $CONFIG_USER_BUSYBOX_MODPROBE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MORE [expr $CONFIG_USER_BUSYBOX_MORE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MOUNT [expr $CONFIG_USER_BUSYBOX_MOUNT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {
	set CONFIG_USER_BUSYBOX_MOUNT_LOOP [expr $CONFIG_USER_BUSYBOX_MOUNT_LOOP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {
	set CONFIG_USER_BUSYBOX_MTAB_SUPPORT [expr $CONFIG_USER_BUSYBOX_MTAB_SUPPORT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {
	set CONFIG_USER_BUSYBOX_NFSMOUNT [expr $CONFIG_USER_BUSYBOX_NFSMOUNT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_MV [expr $CONFIG_USER_BUSYBOX_MV&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_NC [expr $CONFIG_USER_BUSYBOX_NC&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_NSLOOKUP [expr $CONFIG_USER_BUSYBOX_NSLOOKUP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_PIDOF [expr $CONFIG_USER_BUSYBOX_PIDOF&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_PING [expr $CONFIG_USER_BUSYBOX_PING&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_PING == 1)} then {
	set CONFIG_USER_BUSYBOX_FANCY_PING [expr $CONFIG_USER_BUSYBOX_FANCY_PING&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_PIVOT_ROOT [expr $CONFIG_USER_BUSYBOX_PIVOT_ROOT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_POWEROFF [expr $CONFIG_USER_BUSYBOX_POWEROFF&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_PRINTF [expr $CONFIG_USER_BUSYBOX_PRINTF&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_PS [expr $CONFIG_USER_BUSYBOX_PS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_PWD [expr $CONFIG_USER_BUSYBOX_PWD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RDATE [expr $CONFIG_USER_BUSYBOX_RDATE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_READLINK [expr $CONFIG_USER_BUSYBOX_READLINK&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_REBOOT [expr $CONFIG_USER_BUSYBOX_REBOOT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RENICE [expr $CONFIG_USER_BUSYBOX_RENICE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RESET [expr $CONFIG_USER_BUSYBOX_RESET&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RM [expr $CONFIG_USER_BUSYBOX_RM&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RMDIR [expr $CONFIG_USER_BUSYBOX_RMDIR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RMMOD [expr $CONFIG_USER_BUSYBOX_RMMOD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_ROUTE [expr $CONFIG_USER_BUSYBOX_ROUTE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_RPM2CPIO [expr $CONFIG_USER_BUSYBOX_RPM2CPIO&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_SED [expr $CONFIG_USER_BUSYBOX_SED&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_SHELL [expr $CONFIG_USER_BUSYBOX_SHELL&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_ASH [expr $CONFIG_USER_BUSYBOX_ASH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_IS_ASH [expr $CONFIG_USER_BUSYBOX_SH_IS_ASH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_HUSH [expr $CONFIG_USER_BUSYBOX_HUSH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_IS_HUSH [expr $CONFIG_USER_BUSYBOX_SH_IS_HUSH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_LASH [expr $CONFIG_USER_BUSYBOX_LASH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_IS_LASH [expr $CONFIG_USER_BUSYBOX_SH_IS_LASH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_MSH [expr $CONFIG_USER_BUSYBOX_MSH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_IS_MSH [expr $CONFIG_USER_BUSYBOX_SH_IS_MSH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_COMMAND_EDITING [expr $CONFIG_USER_BUSYBOX_COMMAND_EDITING&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_TAB_COMPLETION [expr $CONFIG_USER_BUSYBOX_TAB_COMPLETION&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_USERNAME_COMPLETION [expr $CONFIG_USER_BUSYBOX_USERNAME_COMPLETION&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL [expr $CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1) && ($CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN [expr $CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {
	set CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT [expr $CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_SLEEP [expr $CONFIG_USER_BUSYBOX_SLEEP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_SORT [expr $CONFIG_USER_BUSYBOX_SORT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SORT == 1)} then {
	set CONFIG_USER_BUSYBOX_SORT_REVERSE [expr $CONFIG_USER_BUSYBOX_SORT_REVERSE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SORT == 1)} then {
	set CONFIG_USER_BUSYBOX_SORT_UNIQUE [expr $CONFIG_USER_BUSYBOX_SORT_UNIQUE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_STTY [expr $CONFIG_USER_BUSYBOX_STTY&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_SYNC [expr $CONFIG_USER_BUSYBOX_SYNC&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_SYSLOGD [expr $CONFIG_USER_BUSYBOX_SYSLOGD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SYSLOGD == 1)} then {
	set CONFIG_USER_BUSYBOX_REMOTE_LOG [expr $CONFIG_USER_BUSYBOX_REMOTE_LOG&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SYSLOGD == 1)} then {
	set CONFIG_USER_BUSYBOX_IPC_SYSLOG [expr $CONFIG_USER_BUSYBOX_IPC_SYSLOG&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TAIL [expr $CONFIG_USER_BUSYBOX_TAIL&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAIL == 1)} then {
	set CONFIG_USER_BUSYBOX_FANCY_TAIL [expr $CONFIG_USER_BUSYBOX_FANCY_TAIL&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TAR [expr $CONFIG_USER_BUSYBOX_TAR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAR == 1)} then {
	set CONFIG_USER_BUSYBOX_TAR_CREATE [expr $CONFIG_USER_BUSYBOX_TAR_CREATE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAR == 1)} then {
	set CONFIG_USER_BUSYBOX_TAR_EXCLUDE [expr $CONFIG_USER_BUSYBOX_TAR_EXCLUDE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TEE [expr $CONFIG_USER_BUSYBOX_TEE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TELNET [expr $CONFIG_USER_BUSYBOX_TELNET&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TELNET == 1)} then {
	set CONFIG_USER_BUSYBOX_TELNET_TTYPE [expr $CONFIG_USER_BUSYBOX_TELNET_TTYPE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TEST [expr $CONFIG_USER_BUSYBOX_TEST&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TFTP [expr $CONFIG_USER_BUSYBOX_TFTP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TFTP == 1)} then {
	set CONFIG_USER_BUSYBOX_TFTP_PUT [expr $CONFIG_USER_BUSYBOX_TFTP_PUT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TFTP == 1)} then {
	set CONFIG_USER_BUSYBOX_TFTP_GET [expr $CONFIG_USER_BUSYBOX_TFTP_GET&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TOUCH [expr $CONFIG_USER_BUSYBOX_TOUCH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TR [expr $CONFIG_USER_BUSYBOX_TR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TRACEROUTE [expr $CONFIG_USER_BUSYBOX_TRACEROUTE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TRUE_FALSE [expr $CONFIG_USER_BUSYBOX_TRUE_FALSE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_TTY [expr $CONFIG_USER_BUSYBOX_TTY&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UMOUNT [expr $CONFIG_USER_BUSYBOX_UMOUNT&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_UMOUNT == 1)} then {
	set CONFIG_USER_BUSYBOX_MOUNT_FORCE [expr $CONFIG_USER_BUSYBOX_MOUNT_FORCE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UNAME [expr $CONFIG_USER_BUSYBOX_UNAME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UNIQ [expr $CONFIG_USER_BUSYBOX_UNIQ&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UNIX2DOS [expr $CONFIG_USER_BUSYBOX_UNIX2DOS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UPTIME [expr $CONFIG_USER_BUSYBOX_UPTIME&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_USLEEP [expr $CONFIG_USER_BUSYBOX_USLEEP&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UUDECODE [expr $CONFIG_USER_BUSYBOX_UUDECODE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_UUENCODE [expr $CONFIG_USER_BUSYBOX_UUENCODE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_VI [expr $CONFIG_USER_BUSYBOX_VI&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_COLON [expr $CONFIG_USER_BUSYBOX_VI_COLON&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_YANKMARK [expr $CONFIG_USER_BUSYBOX_VI_YANKMARK&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_SEARCH [expr $CONFIG_USER_BUSYBOX_VI_SEARCH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_USE_SIGNALS [expr $CONFIG_USER_BUSYBOX_VI_USE_SIGNALS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_DOT_CMD [expr $CONFIG_USER_BUSYBOX_VI_DOT_CMD&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_READONLY [expr $CONFIG_USER_BUSYBOX_VI_READONLY&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_SETOPTS [expr $CONFIG_USER_BUSYBOX_VI_SETOPTS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_SET [expr $CONFIG_USER_BUSYBOX_VI_SET&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {
	set CONFIG_USER_BUSYBOX_VI_WIN_RESIZE [expr $CONFIG_USER_BUSYBOX_VI_WIN_RESIZE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_WATCHDOG [expr $CONFIG_USER_BUSYBOX_WATCHDOG&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_WC [expr $CONFIG_USER_BUSYBOX_WC&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_WGET [expr $CONFIG_USER_BUSYBOX_WGET&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_WGET == 1)} then {
	set CONFIG_USER_BUSYBOX_WGET_STATUSBAR [expr $CONFIG_USER_BUSYBOX_WGET_STATUSBAR&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_WGET == 1)} then {
	set CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION [expr $CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_WHICH [expr $CONFIG_USER_BUSYBOX_WHICH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_WHOAMI [expr $CONFIG_USER_BUSYBOX_WHOAMI&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_XARGS [expr $CONFIG_USER_BUSYBOX_XARGS&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_YES [expr $CONFIG_USER_BUSYBOX_YES&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_VERBOSE_USAGE [expr $CONFIG_USER_BUSYBOX_VERBOSE_USAGE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_AUTOWIDTH [expr $CONFIG_USER_BUSYBOX_AUTOWIDTH&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE [expr $CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE [expr $CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING [expr $CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING&15]}
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {
	set CONFIG_USER_BUSYBOX_HUMAN_READABLE [expr $CONFIG_USER_BUSYBOX_HUMAN_READABLE&15]}
}


menu_option menu9 9 "Tinylogin"
proc menu9 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 9}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 9]]
	message $w.m -width 400 -aspect 300 -text \
		"Tinylogin"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Tinylogin" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 9; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu10 .menu10 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 9 0 "Tinylogin" CONFIG_USER_TINYLOGIN_TINYLOGIN
	comment $w.config.f 9 1 "Applets"
	bool $w.config.f 9 2 "adduser" CONFIG_USER_TINYLOGIN_ADDUSER
	bool $w.config.f 9 3 "addgroup" CONFIG_USER_TINYLOGIN_ADDGROUP
	bool $w.config.f 9 4 "deluser" CONFIG_USER_TINYLOGIN_DELUSER
	bool $w.config.f 9 5 "delgroup" CONFIG_USER_TINYLOGIN_DELGROUP
	bool $w.config.f 9 6 "login" CONFIG_USER_TINYLOGIN_LOGIN
	bool $w.config.f 9 7 "login: /etc/securetty" CONFIG_USER_TINYLOGIN_SECURETTY
	bool $w.config.f 9 8 "su" CONFIG_USER_TINYLOGIN_SU
	bool $w.config.f 9 9 "sulogin" CONFIG_USER_TINYLOGIN_SULOGIN
	bool $w.config.f 9 10 "passwd" CONFIG_USER_TINYLOGIN_PASSWD
	bool $w.config.f 9 11 "getty" CONFIG_USER_TINYLOGIN_GETTY
	comment $w.config.f 9 12 "Features"
	bool $w.config.f 9 13 "Shadow passwords" CONFIG_USER_TINYLOGIN_SHADOWPASSWDS
	bool $w.config.f 9 14 "md5 passwords" CONFIG_USER_TINYLOGIN_MD5_PASSWORDS
	bool $w.config.f 9 15 "sha passwords" CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS
	bool $w.config.f 9 16 "Trivial help" CONFIG_USER_TINYLOGIN_TRIVIAL_HELP



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu9 {} {
	global CONFIG_USER_TINYLOGIN_TINYLOGIN
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {configure_entry .menu9.config.f.x1 normal {m}} else {configure_entry .menu9.config.f.x1 disabled {m}}
	global CONFIG_USER_TINYLOGIN_ADDUSER
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x2 normal {n l y}} else {configure_entry .menu9.config.f.x2 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_ADDGROUP
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x3 normal {n l y}} else {configure_entry .menu9.config.f.x3 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_DELUSER
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x4 normal {n l y}} else {configure_entry .menu9.config.f.x4 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_DELGROUP
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x5 normal {n l y}} else {configure_entry .menu9.config.f.x5 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_LOGIN
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x6 normal {n l y}} else {configure_entry .menu9.config.f.x6 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_SECURETTY
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1) && ($CONFIG_USER_TINYLOGIN_LOGIN == 1)} then {
	configure_entry .menu9.config.f.x7 normal {n l y}} else {configure_entry .menu9.config.f.x7 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_SU
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x8 normal {n l y}} else {configure_entry .menu9.config.f.x8 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_SULOGIN
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x9 normal {n l y}} else {configure_entry .menu9.config.f.x9 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_PASSWD
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x10 normal {n l y}} else {configure_entry .menu9.config.f.x10 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_GETTY
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x11 normal {n l y}} else {configure_entry .menu9.config.f.x11 disabled {y n l}}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {configure_entry .menu9.config.f.x12 normal {m}} else {configure_entry .menu9.config.f.x12 disabled {m}}
	global CONFIG_USER_TINYLOGIN_SHADOWPASSWDS
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x13 normal {n l y}} else {configure_entry .menu9.config.f.x13 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_MD5_PASSWORDS
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x14 normal {n l y}} else {configure_entry .menu9.config.f.x14 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x15 normal {n l y}} else {configure_entry .menu9.config.f.x15 disabled {y n l}}
	global CONFIG_USER_TINYLOGIN_TRIVIAL_HELP
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	configure_entry .menu9.config.f.x16 normal {n l y}} else {configure_entry .menu9.config.f.x16 disabled {y n l}}
}


proc update_define_menu9 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_USER_TINYLOGIN_ADDUSER
set CONFIG_USER_TINYLOGIN_ADDUSER [expr $CONFIG_USER_TINYLOGIN_ADDUSER|16]
	global CONFIG_USER_TINYLOGIN_ADDGROUP
set CONFIG_USER_TINYLOGIN_ADDGROUP [expr $CONFIG_USER_TINYLOGIN_ADDGROUP|16]
	global CONFIG_USER_TINYLOGIN_DELUSER
set CONFIG_USER_TINYLOGIN_DELUSER [expr $CONFIG_USER_TINYLOGIN_DELUSER|16]
	global CONFIG_USER_TINYLOGIN_DELGROUP
set CONFIG_USER_TINYLOGIN_DELGROUP [expr $CONFIG_USER_TINYLOGIN_DELGROUP|16]
	global CONFIG_USER_TINYLOGIN_LOGIN
set CONFIG_USER_TINYLOGIN_LOGIN [expr $CONFIG_USER_TINYLOGIN_LOGIN|16]
	global CONFIG_USER_TINYLOGIN_SECURETTY
set CONFIG_USER_TINYLOGIN_SECURETTY [expr $CONFIG_USER_TINYLOGIN_SECURETTY|16]
	global CONFIG_USER_TINYLOGIN_SU
set CONFIG_USER_TINYLOGIN_SU [expr $CONFIG_USER_TINYLOGIN_SU|16]
	global CONFIG_USER_TINYLOGIN_SULOGIN
set CONFIG_USER_TINYLOGIN_SULOGIN [expr $CONFIG_USER_TINYLOGIN_SULOGIN|16]
	global CONFIG_USER_TINYLOGIN_PASSWD
set CONFIG_USER_TINYLOGIN_PASSWD [expr $CONFIG_USER_TINYLOGIN_PASSWD|16]
	global CONFIG_USER_TINYLOGIN_GETTY
set CONFIG_USER_TINYLOGIN_GETTY [expr $CONFIG_USER_TINYLOGIN_GETTY|16]
	global CONFIG_USER_TINYLOGIN_SHADOWPASSWDS
set CONFIG_USER_TINYLOGIN_SHADOWPASSWDS [expr $CONFIG_USER_TINYLOGIN_SHADOWPASSWDS|16]
	global CONFIG_USER_TINYLOGIN_MD5_PASSWORDS
set CONFIG_USER_TINYLOGIN_MD5_PASSWORDS [expr $CONFIG_USER_TINYLOGIN_MD5_PASSWORDS|16]
	global CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS
set CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS [expr $CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS|16]
	global CONFIG_USER_TINYLOGIN_TRIVIAL_HELP
set CONFIG_USER_TINYLOGIN_TRIVIAL_HELP [expr $CONFIG_USER_TINYLOGIN_TRIVIAL_HELP|16]
	global CONFIG_USER_TINYLOGIN_TINYLOGIN
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_ADDUSER [expr $CONFIG_USER_TINYLOGIN_ADDUSER&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_ADDGROUP [expr $CONFIG_USER_TINYLOGIN_ADDGROUP&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_DELUSER [expr $CONFIG_USER_TINYLOGIN_DELUSER&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_DELGROUP [expr $CONFIG_USER_TINYLOGIN_DELGROUP&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_LOGIN [expr $CONFIG_USER_TINYLOGIN_LOGIN&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1) && ($CONFIG_USER_TINYLOGIN_LOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_SECURETTY [expr $CONFIG_USER_TINYLOGIN_SECURETTY&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_SU [expr $CONFIG_USER_TINYLOGIN_SU&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_SULOGIN [expr $CONFIG_USER_TINYLOGIN_SULOGIN&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_PASSWD [expr $CONFIG_USER_TINYLOGIN_PASSWD&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_GETTY [expr $CONFIG_USER_TINYLOGIN_GETTY&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_SHADOWPASSWDS [expr $CONFIG_USER_TINYLOGIN_SHADOWPASSWDS&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_MD5_PASSWORDS [expr $CONFIG_USER_TINYLOGIN_MD5_PASSWORDS&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS [expr $CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS&15]}
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {
	set CONFIG_USER_TINYLOGIN_TRIVIAL_HELP [expr $CONFIG_USER_TINYLOGIN_TRIVIAL_HELP&15]}
}


menu_option menu10 10 "MicroWindows"
proc menu10 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 10}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 10]]
	message $w.m -width 400 -aspect 300 -text \
		"MicroWindows"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "MicroWindows" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 10; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu11 .menu11 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 10 0 "MicroWindows" CONFIG_USER_MICROWIN
	comment $w.config.f 10 1 "Compiling Options"
	bool $w.config.f 10 2 "Optimize" CONFIG_USER_MICROWIN_OPTIMIZE
	bool $w.config.f 10 3 "Debug" CONFIG_USER_MICROWIN_DEBUG
	bool $w.config.f 10 4 "Verbose" CONFIG_USER_MICROWIN_VERBOSE
	comment $w.config.f 10 5 "Libraries"
	bool $w.config.f 10 6 "Microwin" CONFIG_USER_MICROWIN_MICROWIN
	bool $w.config.f 10 7 "NanoX" CONFIG_USER_MICROWIN_NANOX
	bool $w.config.f 10 8 "SharedLibs" CONFIG_USER_MICROWIN_SHAREDLIBS
	bool $w.config.f 10 9 "NWidget" CONFIG_USER_MICROWIN_NWIDGET
	bool $w.config.f 10 10 "OBJFramework" CONFIG_USER_MICROWIN_OBJFRAMEWORK
	comment $w.config.f 10 11 "Demos"
	bool $w.config.f 10 12 "MicrowinDemo" CONFIG_USER_MICROWIN_MICROWINDEMO
	bool $w.config.f 10 13 "NanoXDemo" CONFIG_USER_MICROWIN_NANOXDEMO
	comment $w.config.f 10 14 "Applications"
	bool $w.config.f 10 15 "NanoWM" CONFIG_USER_MICROWIN_NANOWM
	comment $w.config.f 10 16 "Settings"
	global tmpvar_2
	minimenu $w.config.f 10 17 "Screeen PixType" tmpvar_2 CONFIG_USER_MICROWIN_MWPF_PALETTE
	menu $w.config.f.x17.x.menu -tearoffcommand "menutitle \"Screeen PixType\""
	$w.config.f.x17.x.menu add radiobutton -label "Packed-8bit-Palette" -variable tmpvar_2 -value "Packed-8bit-Palette" -command "update_active"
	$w.config.f.x17.x.menu add radiobutton -label "Packed-32bit-8/8/8" -variable tmpvar_2 -value "Packed-32bit-8/8/8" -command "update_active"
	$w.config.f.x17.x.menu add radiobutton -label "Packed-24bit-8/8/8" -variable tmpvar_2 -value "Packed-24bit-8/8/8" -command "update_active"
	$w.config.f.x17.x.menu add radiobutton -label "Packed-16bit-5/6/5" -variable tmpvar_2 -value "Packed-16bit-5/6/5" -command "update_active"
	$w.config.f.x17.x.menu add radiobutton -label "Packed-16bit-5/5/5" -variable tmpvar_2 -value "Packed-16bit-5/5/5" -command "update_active"
	$w.config.f.x17.x.menu add radiobutton -label "Packed-8bit-3/3/2" -variable tmpvar_2 -value "Packed-8bit-3/3/2" -command "update_active"
	menusplit $w $w.config.f.x17.x.menu 6
	bool $w.config.f 10 18 "Link App into server" CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER
	bool $w.config.f 10 19 "Have File IO" CONFIG_USER_MICROWIN_HAVE_FILEIO
	bool $w.config.f 10 20 "Have BMP Support" CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT
	bool $w.config.f 10 21 "Have GIF Support" CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT
	bool $w.config.f 10 22 "Have PNM Support" CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT
	bool $w.config.f 10 23 "Have XPM Support" CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT
	bool $w.config.f 10 24 "Have JPEG Support" CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT
	bool $w.config.f 10 25 "Have PNG Support" CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT
	bool $w.config.f 10 26 "Have T1LIB Support" CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT
	bool $w.config.f 10 27 "Have FreeType Support" CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT
	bool $w.config.f 10 28 "Have SharedMemory Support" CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT
	bool $w.config.f 10 29 "Have Han Zi Ku font Support" CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT
	bool $w.config.f 10 30 "Have Big5 Support" CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT
	bool $w.config.f 10 31 "Have GB2312 Support" CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT
	bool $w.config.f 10 32 "Have MS Fonts" CONFIG_USER_MICROWIN_HAVEMSFONTS
	bool $w.config.f 10 33 "Build Screen Driver only" CONFIG_USER_MICROWIN_NOFONTSORCLIPPING
	bool $w.config.f 10 34 "Window Erase Move" CONFIG_USER_MICROWIN_ERASEMOVE
	bool $w.config.f 10 35 "Window UpdateRegions Move" CONFIG_USER_MICROWIN_UPDATEREGIONS
	bool $w.config.f 10 36 "Gray Palette" CONFIG_USER_MICROWIN_GRAYPALETTE
	comment $w.config.f 10 37 "Display Config"
	bool $w.config.f 10 38 "X11 Display" CONFIG_USER_MICROWIN_X11
	bool $w.config.f 10 39 "Frame Buffer Display" CONFIG_USER_MICROWIN_FRAMEBUFFER
	bool $w.config.f 10 40 "Frame Buffer VGA" CONFIG_USER_MICROWIN_FBVGA
	bool $w.config.f 10 41 "VT Switch" CONFIG_USER_MICROWIN_VTSWITCH
	bool $w.config.f 10 42 "Portrait Mode" CONFIG_USER_MICROWIN_PORTRAIT_MODE
	bool $w.config.f 10 43 "Frame Buffer Reverse" CONFIG_USER_MICROWIN_FBREVERSE
	bool $w.config.f 10 44 "VGA Lib" CONFIG_USER_MICROWIN_VGALIB
	bool $w.config.f 10 45 "HW VGA" CONFIG_USER_MICROWIN_HWVGA
	bool $w.config.f 10 46 "Cleopatra VGA" CONFIG_USER_MICROWIN_CLEOVGA
	comment $w.config.f 10 47 "Mouse/Touch Screen"
	bool $w.config.f 10 48 "GPM Mouse" CONFIG_USER_MICROWIN_GPMMOUSE
	bool $w.config.f 10 49 "Serial Mouse" CONFIG_USER_MICROWIN_SERMOUSE
	bool $w.config.f 10 50 "TP Mouse" CONFIG_USER_MICROWIN_TPMOUSE
	bool $w.config.f 10 51 "TP Helio" CONFIG_USER_MICROWIN_TPHELIO
	bool $w.config.f 10 52 "ADS Mouse" CONFIG_USER_MICROWIN_ADSMOUSE
	bool $w.config.f 10 53 "IPAQ Mouse" CONFIG_USER_MICROWIN_IPAQMOUSE
	bool $w.config.f 10 54 "Harrier Mouse" CONFIG_USER_MICROWIN_HARRIERMOUSE
	bool $w.config.f 10 55 "PSION Mouse" CONFIG_USER_MICROWIN_PSIONMOUSE
	bool $w.config.f 10 56 "uClinux/Palm TS" CONFIG_USER_MICROWIN_UCTSMOUSE
	bool $w.config.f 10 57 "DragonEngine TS" CONFIG_USER_MICROWIN_DE2TSMOUSE
	bool $w.config.f 10 58 "Cleopatra Mouse" CONFIG_USER_MICROWIN_CLEOMOUSE
	bool $w.config.f 10 59 "No Mouse" CONFIG_USER_MICROWIN_NOMOUSE
	comment $w.config.f 10 60 "Keyboard"
	bool $w.config.f 10 61 "TTY Keyboard" CONFIG_USER_MICROWIN_TTYKBD
	bool $w.config.f 10 62 "Scan Keyboard" CONFIG_USER_MICROWIN_SCANKBD
	bool $w.config.f 10 63 "Pipe Keyboard" CONFIG_USER_MICROWIN_PIPEKBD
	bool $w.config.f 10 64 "Cleopatra Keyboard" CONFIG_USER_MICROWIN_CLEOKBD
	bool $w.config.f 10 65 "No Keyboard" CONFIG_USER_MICROWIN_NOKBD
	comment $w.config.f 10 66 "Install These Applications"
	bool $w.config.f 10 67 "Landmine" CONFIG_USER_MICROWIN_BIN_LANDMINE
	bool $w.config.f 10 68 "Launcher" CONFIG_USER_MICROWIN_BIN_LAUNCHER
	bool $w.config.f 10 69 "Move" CONFIG_USER_MICROWIN_BIN_MOVE
	bool $w.config.f 10 70 "MTerm" CONFIG_USER_MICROWIN_BIN_MTERM
	bool $w.config.f 10 71 "MTest" CONFIG_USER_MICROWIN_BIN_MTEST
	bool $w.config.f 10 72 "MTest2" CONFIG_USER_MICROWIN_BIN_MTEST2
	bool $w.config.f 10 73 "MUserFd" CONFIG_USER_MICROWIN_BIN_MUSERFD
	bool $w.config.f 10 74 "Nano-X" CONFIG_USER_MICROWIN_BIN_NANO_X
	bool $w.config.f 10 75 "NanoWM" CONFIG_USER_MICROWIN_BIN_NANOWM
	bool $w.config.f 10 76 "NPanel" CONFIG_USER_MICROWIN_BIN_NPANEL
	bool $w.config.f 10 77 "NTerm" CONFIG_USER_MICROWIN_BIN_NTERM
	bool $w.config.f 10 78 "NTest" CONFIG_USER_MICROWIN_BIN_NTEST
	bool $w.config.f 10 79 "NTetris" CONFIG_USER_MICROWIN_BIN_NTETRIS
	bool $w.config.f 10 80 "NXclock" CONFIG_USER_MICROWIN_BIN_NXCLOCK
	bool $w.config.f 10 81 "NXev" CONFIG_USER_MICROWIN_BIN_NXEV
	bool $w.config.f 10 82 "NXkbd" CONFIG_USER_MICROWIN_BIN_NXKBD
	bool $w.config.f 10 83 "NXlsclients" CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS
	bool $w.config.f 10 84 "NXterm" CONFIG_USER_MICROWIN_BIN_NXTERM
	bool $w.config.f 10 85 "NXView" CONFIG_USER_MICROWIN_BIN_NXVIEW
	bool $w.config.f 10 86 "Slider" CONFIG_USER_MICROWIN_BIN_SLIDER
	bool $w.config.f 10 87 "VNC" CONFIG_USER_MICROWIN_BIN_VNC
	bool $w.config.f 10 88 "World" CONFIG_USER_MICROWIN_BIN_WORLD



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu10 {} {
	global CONFIG_USER_MICROWIN
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x1 normal {m}} else {configure_entry .menu10.config.f.x1 disabled {m}}
	global CONFIG_USER_MICROWIN_OPTIMIZE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x2 normal {n l y}} else {configure_entry .menu10.config.f.x2 disabled {y n l}}
	global CONFIG_USER_MICROWIN_DEBUG
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x3 normal {n l y}} else {configure_entry .menu10.config.f.x3 disabled {y n l}}
	global CONFIG_USER_MICROWIN_VERBOSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x4 normal {n l y}} else {configure_entry .menu10.config.f.x4 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x5 normal {m}} else {configure_entry .menu10.config.f.x5 disabled {m}}
	global CONFIG_USER_MICROWIN_MICROWIN
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x6 normal {n l y}} else {configure_entry .menu10.config.f.x6 disabled {y n l}}
	global CONFIG_USER_MICROWIN_NANOX
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x7 normal {n l y}} else {configure_entry .menu10.config.f.x7 disabled {y n l}}
	global CONFIG_USER_MICROWIN_SHAREDLIBS
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x8 normal {n l y}} else {configure_entry .menu10.config.f.x8 disabled {y n l}}
	global CONFIG_USER_MICROWIN_NWIDGET
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x9 normal {n l y}} else {configure_entry .menu10.config.f.x9 disabled {y n l}}
	global CONFIG_USER_MICROWIN_OBJFRAMEWORK
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x10 normal {n l y}} else {configure_entry .menu10.config.f.x10 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x11 normal {m}} else {configure_entry .menu10.config.f.x11 disabled {m}}
	global CONFIG_USER_MICROWIN_MICROWINDEMO
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x12 normal {n l y}} else {configure_entry .menu10.config.f.x12 disabled {y n l}}
	global CONFIG_USER_MICROWIN_NANOXDEMO
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x13 normal {n l y}} else {configure_entry .menu10.config.f.x13 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x14 normal {m}} else {configure_entry .menu10.config.f.x14 disabled {m}}
	global CONFIG_USER_MICROWIN_NANOWM
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x15 normal {n l y}} else {configure_entry .menu10.config.f.x15 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x16 normal {m}} else {configure_entry .menu10.config.f.x16 disabled {m}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x17 normal {x l}} else {configure_entry .menu10.config.f.x17 disabled {x l}}
	global CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x18 normal {n l y}} else {configure_entry .menu10.config.f.x18 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_FILEIO
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x19 normal {n l y}} else {configure_entry .menu10.config.f.x19 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x20 normal {n l y}} else {configure_entry .menu10.config.f.x20 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x21 normal {n l y}} else {configure_entry .menu10.config.f.x21 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x22 normal {n l y}} else {configure_entry .menu10.config.f.x22 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x23 normal {n l y}} else {configure_entry .menu10.config.f.x23 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x24 normal {n l y}} else {configure_entry .menu10.config.f.x24 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x25 normal {n l y}} else {configure_entry .menu10.config.f.x25 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x26 normal {n l y}} else {configure_entry .menu10.config.f.x26 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x27 normal {n l y}} else {configure_entry .menu10.config.f.x27 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x28 normal {n l y}} else {configure_entry .menu10.config.f.x28 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x29 normal {n l y}} else {configure_entry .menu10.config.f.x29 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x30 normal {n l y}} else {configure_entry .menu10.config.f.x30 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x31 normal {n l y}} else {configure_entry .menu10.config.f.x31 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HAVEMSFONTS
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x32 normal {n l y}} else {configure_entry .menu10.config.f.x32 disabled {y n l}}
	global CONFIG_USER_MICROWIN_NOFONTSORCLIPPING
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x33 normal {n l y}} else {configure_entry .menu10.config.f.x33 disabled {y n l}}
	global CONFIG_USER_MICROWIN_ERASEMOVE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x34 normal {n l y}} else {configure_entry .menu10.config.f.x34 disabled {y n l}}
	global CONFIG_USER_MICROWIN_UPDATEREGIONS
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x35 normal {n l y}} else {configure_entry .menu10.config.f.x35 disabled {y n l}}
	global CONFIG_USER_MICROWIN_GRAYPALETTE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x36 normal {n l y}} else {configure_entry .menu10.config.f.x36 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x37 normal {m}} else {configure_entry .menu10.config.f.x37 disabled {m}}
	global CONFIG_USER_MICROWIN_X11
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x38 normal {n l y}} else {configure_entry .menu10.config.f.x38 disabled {y n l}}
	global CONFIG_USER_MICROWIN_FRAMEBUFFER
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x39 normal {n l y}} else {configure_entry .menu10.config.f.x39 disabled {y n l}}
	global CONFIG_USER_MICROWIN_FBVGA
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x40 normal {n l y}} else {configure_entry .menu10.config.f.x40 disabled {y n l}}
	global CONFIG_USER_MICROWIN_VTSWITCH
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x41 normal {n l y}} else {configure_entry .menu10.config.f.x41 disabled {y n l}}
	global CONFIG_USER_MICROWIN_PORTRAIT_MODE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x42 normal {n l y}} else {configure_entry .menu10.config.f.x42 disabled {y n l}}
	global CONFIG_USER_MICROWIN_FBREVERSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x43 normal {n l y}} else {configure_entry .menu10.config.f.x43 disabled {y n l}}
	global CONFIG_USER_MICROWIN_VGALIB
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x44 normal {n l y}} else {configure_entry .menu10.config.f.x44 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HWVGA
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x45 normal {n l y}} else {configure_entry .menu10.config.f.x45 disabled {y n l}}
	global CONFIG_USER_MICROWIN_CLEOVGA
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x46 normal {n l y}} else {configure_entry .menu10.config.f.x46 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x47 normal {m}} else {configure_entry .menu10.config.f.x47 disabled {m}}
	global CONFIG_USER_MICROWIN_GPMMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x48 normal {n l y}} else {configure_entry .menu10.config.f.x48 disabled {y n l}}
	global CONFIG_USER_MICROWIN_SERMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x49 normal {n l y}} else {configure_entry .menu10.config.f.x49 disabled {y n l}}
	global CONFIG_USER_MICROWIN_TPMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x50 normal {n l y}} else {configure_entry .menu10.config.f.x50 disabled {y n l}}
	global CONFIG_USER_MICROWIN_TPHELIO
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x51 normal {n l y}} else {configure_entry .menu10.config.f.x51 disabled {y n l}}
	global CONFIG_USER_MICROWIN_ADSMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x52 normal {n l y}} else {configure_entry .menu10.config.f.x52 disabled {y n l}}
	global CONFIG_USER_MICROWIN_IPAQMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x53 normal {n l y}} else {configure_entry .menu10.config.f.x53 disabled {y n l}}
	global CONFIG_USER_MICROWIN_HARRIERMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x54 normal {n l y}} else {configure_entry .menu10.config.f.x54 disabled {y n l}}
	global CONFIG_USER_MICROWIN_PSIONMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x55 normal {n l y}} else {configure_entry .menu10.config.f.x55 disabled {y n l}}
	global CONFIG_USER_MICROWIN_UCTSMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x56 normal {n l y}} else {configure_entry .menu10.config.f.x56 disabled {y n l}}
	global CONFIG_USER_MICROWIN_DE2TSMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x57 normal {n l y}} else {configure_entry .menu10.config.f.x57 disabled {y n l}}
	global CONFIG_USER_MICROWIN_CLEOMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x58 normal {n l y}} else {configure_entry .menu10.config.f.x58 disabled {y n l}}
	global CONFIG_USER_MICROWIN_NOMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x59 normal {n l y}} else {configure_entry .menu10.config.f.x59 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x60 normal {m}} else {configure_entry .menu10.config.f.x60 disabled {m}}
	global CONFIG_USER_MICROWIN_TTYKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x61 normal {n l y}} else {configure_entry .menu10.config.f.x61 disabled {y n l}}
	global CONFIG_USER_MICROWIN_SCANKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x62 normal {n l y}} else {configure_entry .menu10.config.f.x62 disabled {y n l}}
	global CONFIG_USER_MICROWIN_PIPEKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x63 normal {n l y}} else {configure_entry .menu10.config.f.x63 disabled {y n l}}
	global CONFIG_USER_MICROWIN_CLEOKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x64 normal {n l y}} else {configure_entry .menu10.config.f.x64 disabled {y n l}}
	global CONFIG_USER_MICROWIN_NOKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x65 normal {n l y}} else {configure_entry .menu10.config.f.x65 disabled {y n l}}
	if {($CONFIG_USER_MICROWIN == 1)} then {configure_entry .menu10.config.f.x66 normal {m}} else {configure_entry .menu10.config.f.x66 disabled {m}}
	global CONFIG_USER_MICROWIN_BIN_LANDMINE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x67 normal {n l y}} else {configure_entry .menu10.config.f.x67 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_LAUNCHER
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x68 normal {n l y}} else {configure_entry .menu10.config.f.x68 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_MOVE
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x69 normal {n l y}} else {configure_entry .menu10.config.f.x69 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_MTERM
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x70 normal {n l y}} else {configure_entry .menu10.config.f.x70 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_MTEST
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x71 normal {n l y}} else {configure_entry .menu10.config.f.x71 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_MTEST2
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x72 normal {n l y}} else {configure_entry .menu10.config.f.x72 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_MUSERFD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x73 normal {n l y}} else {configure_entry .menu10.config.f.x73 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NANO_X
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x74 normal {n l y}} else {configure_entry .menu10.config.f.x74 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NANOWM
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x75 normal {n l y}} else {configure_entry .menu10.config.f.x75 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NPANEL
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x76 normal {n l y}} else {configure_entry .menu10.config.f.x76 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NTERM
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x77 normal {n l y}} else {configure_entry .menu10.config.f.x77 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NTEST
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x78 normal {n l y}} else {configure_entry .menu10.config.f.x78 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NTETRIS
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x79 normal {n l y}} else {configure_entry .menu10.config.f.x79 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NXCLOCK
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x80 normal {n l y}} else {configure_entry .menu10.config.f.x80 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NXEV
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x81 normal {n l y}} else {configure_entry .menu10.config.f.x81 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NXKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x82 normal {n l y}} else {configure_entry .menu10.config.f.x82 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x83 normal {n l y}} else {configure_entry .menu10.config.f.x83 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NXTERM
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x84 normal {n l y}} else {configure_entry .menu10.config.f.x84 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_NXVIEW
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x85 normal {n l y}} else {configure_entry .menu10.config.f.x85 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_SLIDER
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x86 normal {n l y}} else {configure_entry .menu10.config.f.x86 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_VNC
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x87 normal {n l y}} else {configure_entry .menu10.config.f.x87 disabled {y n l}}
	global CONFIG_USER_MICROWIN_BIN_WORLD
	if {($CONFIG_USER_MICROWIN == 1)} then {
	configure_entry .menu10.config.f.x88 normal {n l y}} else {configure_entry .menu10.config.f.x88 disabled {y n l}}
}


proc update_define_menu10 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_USER_MICROWIN_OPTIMIZE
set CONFIG_USER_MICROWIN_OPTIMIZE [expr $CONFIG_USER_MICROWIN_OPTIMIZE|16]
	global CONFIG_USER_MICROWIN_DEBUG
set CONFIG_USER_MICROWIN_DEBUG [expr $CONFIG_USER_MICROWIN_DEBUG|16]
	global CONFIG_USER_MICROWIN_VERBOSE
set CONFIG_USER_MICROWIN_VERBOSE [expr $CONFIG_USER_MICROWIN_VERBOSE|16]
	global CONFIG_USER_MICROWIN_MICROWIN
set CONFIG_USER_MICROWIN_MICROWIN [expr $CONFIG_USER_MICROWIN_MICROWIN|16]
	global CONFIG_USER_MICROWIN_NANOX
set CONFIG_USER_MICROWIN_NANOX [expr $CONFIG_USER_MICROWIN_NANOX|16]
	global CONFIG_USER_MICROWIN_SHAREDLIBS
set CONFIG_USER_MICROWIN_SHAREDLIBS [expr $CONFIG_USER_MICROWIN_SHAREDLIBS|16]
	global CONFIG_USER_MICROWIN_NWIDGET
set CONFIG_USER_MICROWIN_NWIDGET [expr $CONFIG_USER_MICROWIN_NWIDGET|16]
	global CONFIG_USER_MICROWIN_OBJFRAMEWORK
set CONFIG_USER_MICROWIN_OBJFRAMEWORK [expr $CONFIG_USER_MICROWIN_OBJFRAMEWORK|16]
	global CONFIG_USER_MICROWIN_MICROWINDEMO
set CONFIG_USER_MICROWIN_MICROWINDEMO [expr $CONFIG_USER_MICROWIN_MICROWINDEMO|16]
	global CONFIG_USER_MICROWIN_NANOXDEMO
set CONFIG_USER_MICROWIN_NANOXDEMO [expr $CONFIG_USER_MICROWIN_NANOXDEMO|16]
	global CONFIG_USER_MICROWIN_NANOWM
set CONFIG_USER_MICROWIN_NANOWM [expr $CONFIG_USER_MICROWIN_NANOWM|16]
	global CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER
set CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER [expr $CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER|16]
	global CONFIG_USER_MICROWIN_HAVE_FILEIO
set CONFIG_USER_MICROWIN_HAVE_FILEIO [expr $CONFIG_USER_MICROWIN_HAVE_FILEIO|16]
	global CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT
set CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT|16]
	global CONFIG_USER_MICROWIN_HAVEMSFONTS
set CONFIG_USER_MICROWIN_HAVEMSFONTS [expr $CONFIG_USER_MICROWIN_HAVEMSFONTS|16]
	global CONFIG_USER_MICROWIN_NOFONTSORCLIPPING
set CONFIG_USER_MICROWIN_NOFONTSORCLIPPING [expr $CONFIG_USER_MICROWIN_NOFONTSORCLIPPING|16]
	global CONFIG_USER_MICROWIN_ERASEMOVE
set CONFIG_USER_MICROWIN_ERASEMOVE [expr $CONFIG_USER_MICROWIN_ERASEMOVE|16]
	global CONFIG_USER_MICROWIN_UPDATEREGIONS
set CONFIG_USER_MICROWIN_UPDATEREGIONS [expr $CONFIG_USER_MICROWIN_UPDATEREGIONS|16]
	global CONFIG_USER_MICROWIN_GRAYPALETTE
set CONFIG_USER_MICROWIN_GRAYPALETTE [expr $CONFIG_USER_MICROWIN_GRAYPALETTE|16]
	global CONFIG_USER_MICROWIN_X11
set CONFIG_USER_MICROWIN_X11 [expr $CONFIG_USER_MICROWIN_X11|16]
	global CONFIG_USER_MICROWIN_FRAMEBUFFER
set CONFIG_USER_MICROWIN_FRAMEBUFFER [expr $CONFIG_USER_MICROWIN_FRAMEBUFFER|16]
	global CONFIG_USER_MICROWIN_FBVGA
set CONFIG_USER_MICROWIN_FBVGA [expr $CONFIG_USER_MICROWIN_FBVGA|16]
	global CONFIG_USER_MICROWIN_VTSWITCH
set CONFIG_USER_MICROWIN_VTSWITCH [expr $CONFIG_USER_MICROWIN_VTSWITCH|16]
	global CONFIG_USER_MICROWIN_PORTRAIT_MODE
set CONFIG_USER_MICROWIN_PORTRAIT_MODE [expr $CONFIG_USER_MICROWIN_PORTRAIT_MODE|16]
	global CONFIG_USER_MICROWIN_FBREVERSE
set CONFIG_USER_MICROWIN_FBREVERSE [expr $CONFIG_USER_MICROWIN_FBREVERSE|16]
	global CONFIG_USER_MICROWIN_VGALIB
set CONFIG_USER_MICROWIN_VGALIB [expr $CONFIG_USER_MICROWIN_VGALIB|16]
	global CONFIG_USER_MICROWIN_HWVGA
set CONFIG_USER_MICROWIN_HWVGA [expr $CONFIG_USER_MICROWIN_HWVGA|16]
	global CONFIG_USER_MICROWIN_CLEOVGA
set CONFIG_USER_MICROWIN_CLEOVGA [expr $CONFIG_USER_MICROWIN_CLEOVGA|16]
	global CONFIG_USER_MICROWIN_GPMMOUSE
set CONFIG_USER_MICROWIN_GPMMOUSE [expr $CONFIG_USER_MICROWIN_GPMMOUSE|16]
	global CONFIG_USER_MICROWIN_SERMOUSE
set CONFIG_USER_MICROWIN_SERMOUSE [expr $CONFIG_USER_MICROWIN_SERMOUSE|16]
	global CONFIG_USER_MICROWIN_TPMOUSE
set CONFIG_USER_MICROWIN_TPMOUSE [expr $CONFIG_USER_MICROWIN_TPMOUSE|16]
	global CONFIG_USER_MICROWIN_TPHELIO
set CONFIG_USER_MICROWIN_TPHELIO [expr $CONFIG_USER_MICROWIN_TPHELIO|16]
	global CONFIG_USER_MICROWIN_ADSMOUSE
set CONFIG_USER_MICROWIN_ADSMOUSE [expr $CONFIG_USER_MICROWIN_ADSMOUSE|16]
	global CONFIG_USER_MICROWIN_IPAQMOUSE
set CONFIG_USER_MICROWIN_IPAQMOUSE [expr $CONFIG_USER_MICROWIN_IPAQMOUSE|16]
	global CONFIG_USER_MICROWIN_HARRIERMOUSE
set CONFIG_USER_MICROWIN_HARRIERMOUSE [expr $CONFIG_USER_MICROWIN_HARRIERMOUSE|16]
	global CONFIG_USER_MICROWIN_PSIONMOUSE
set CONFIG_USER_MICROWIN_PSIONMOUSE [expr $CONFIG_USER_MICROWIN_PSIONMOUSE|16]
	global CONFIG_USER_MICROWIN_UCTSMOUSE
set CONFIG_USER_MICROWIN_UCTSMOUSE [expr $CONFIG_USER_MICROWIN_UCTSMOUSE|16]
	global CONFIG_USER_MICROWIN_DE2TSMOUSE
set CONFIG_USER_MICROWIN_DE2TSMOUSE [expr $CONFIG_USER_MICROWIN_DE2TSMOUSE|16]
	global CONFIG_USER_MICROWIN_CLEOMOUSE
set CONFIG_USER_MICROWIN_CLEOMOUSE [expr $CONFIG_USER_MICROWIN_CLEOMOUSE|16]
	global CONFIG_USER_MICROWIN_NOMOUSE
set CONFIG_USER_MICROWIN_NOMOUSE [expr $CONFIG_USER_MICROWIN_NOMOUSE|16]
	global CONFIG_USER_MICROWIN_TTYKBD
set CONFIG_USER_MICROWIN_TTYKBD [expr $CONFIG_USER_MICROWIN_TTYKBD|16]
	global CONFIG_USER_MICROWIN_SCANKBD
set CONFIG_USER_MICROWIN_SCANKBD [expr $CONFIG_USER_MICROWIN_SCANKBD|16]
	global CONFIG_USER_MICROWIN_PIPEKBD
set CONFIG_USER_MICROWIN_PIPEKBD [expr $CONFIG_USER_MICROWIN_PIPEKBD|16]
	global CONFIG_USER_MICROWIN_CLEOKBD
set CONFIG_USER_MICROWIN_CLEOKBD [expr $CONFIG_USER_MICROWIN_CLEOKBD|16]
	global CONFIG_USER_MICROWIN_NOKBD
set CONFIG_USER_MICROWIN_NOKBD [expr $CONFIG_USER_MICROWIN_NOKBD|16]
	global CONFIG_USER_MICROWIN_BIN_LANDMINE
set CONFIG_USER_MICROWIN_BIN_LANDMINE [expr $CONFIG_USER_MICROWIN_BIN_LANDMINE|16]
	global CONFIG_USER_MICROWIN_BIN_LAUNCHER
set CONFIG_USER_MICROWIN_BIN_LAUNCHER [expr $CONFIG_USER_MICROWIN_BIN_LAUNCHER|16]
	global CONFIG_USER_MICROWIN_BIN_MOVE
set CONFIG_USER_MICROWIN_BIN_MOVE [expr $CONFIG_USER_MICROWIN_BIN_MOVE|16]
	global CONFIG_USER_MICROWIN_BIN_MTERM
set CONFIG_USER_MICROWIN_BIN_MTERM [expr $CONFIG_USER_MICROWIN_BIN_MTERM|16]
	global CONFIG_USER_MICROWIN_BIN_MTEST
set CONFIG_USER_MICROWIN_BIN_MTEST [expr $CONFIG_USER_MICROWIN_BIN_MTEST|16]
	global CONFIG_USER_MICROWIN_BIN_MTEST2
set CONFIG_USER_MICROWIN_BIN_MTEST2 [expr $CONFIG_USER_MICROWIN_BIN_MTEST2|16]
	global CONFIG_USER_MICROWIN_BIN_MUSERFD
set CONFIG_USER_MICROWIN_BIN_MUSERFD [expr $CONFIG_USER_MICROWIN_BIN_MUSERFD|16]
	global CONFIG_USER_MICROWIN_BIN_NANO_X
set CONFIG_USER_MICROWIN_BIN_NANO_X [expr $CONFIG_USER_MICROWIN_BIN_NANO_X|16]
	global CONFIG_USER_MICROWIN_BIN_NANOWM
set CONFIG_USER_MICROWIN_BIN_NANOWM [expr $CONFIG_USER_MICROWIN_BIN_NANOWM|16]
	global CONFIG_USER_MICROWIN_BIN_NPANEL
set CONFIG_USER_MICROWIN_BIN_NPANEL [expr $CONFIG_USER_MICROWIN_BIN_NPANEL|16]
	global CONFIG_USER_MICROWIN_BIN_NTERM
set CONFIG_USER_MICROWIN_BIN_NTERM [expr $CONFIG_USER_MICROWIN_BIN_NTERM|16]
	global CONFIG_USER_MICROWIN_BIN_NTEST
set CONFIG_USER_MICROWIN_BIN_NTEST [expr $CONFIG_USER_MICROWIN_BIN_NTEST|16]
	global CONFIG_USER_MICROWIN_BIN_NTETRIS
set CONFIG_USER_MICROWIN_BIN_NTETRIS [expr $CONFIG_USER_MICROWIN_BIN_NTETRIS|16]
	global CONFIG_USER_MICROWIN_BIN_NXCLOCK
set CONFIG_USER_MICROWIN_BIN_NXCLOCK [expr $CONFIG_USER_MICROWIN_BIN_NXCLOCK|16]
	global CONFIG_USER_MICROWIN_BIN_NXEV
set CONFIG_USER_MICROWIN_BIN_NXEV [expr $CONFIG_USER_MICROWIN_BIN_NXEV|16]
	global CONFIG_USER_MICROWIN_BIN_NXKBD
set CONFIG_USER_MICROWIN_BIN_NXKBD [expr $CONFIG_USER_MICROWIN_BIN_NXKBD|16]
	global CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS
set CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS [expr $CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS|16]
	global CONFIG_USER_MICROWIN_BIN_NXTERM
set CONFIG_USER_MICROWIN_BIN_NXTERM [expr $CONFIG_USER_MICROWIN_BIN_NXTERM|16]
	global CONFIG_USER_MICROWIN_BIN_NXVIEW
set CONFIG_USER_MICROWIN_BIN_NXVIEW [expr $CONFIG_USER_MICROWIN_BIN_NXVIEW|16]
	global CONFIG_USER_MICROWIN_BIN_SLIDER
set CONFIG_USER_MICROWIN_BIN_SLIDER [expr $CONFIG_USER_MICROWIN_BIN_SLIDER|16]
	global CONFIG_USER_MICROWIN_BIN_VNC
set CONFIG_USER_MICROWIN_BIN_VNC [expr $CONFIG_USER_MICROWIN_BIN_VNC|16]
	global CONFIG_USER_MICROWIN_BIN_WORLD
set CONFIG_USER_MICROWIN_BIN_WORLD [expr $CONFIG_USER_MICROWIN_BIN_WORLD|16]
	global CONFIG_USER_MICROWIN
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_OPTIMIZE [expr $CONFIG_USER_MICROWIN_OPTIMIZE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_DEBUG [expr $CONFIG_USER_MICROWIN_DEBUG&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_VERBOSE [expr $CONFIG_USER_MICROWIN_VERBOSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_MICROWIN [expr $CONFIG_USER_MICROWIN_MICROWIN&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NANOX [expr $CONFIG_USER_MICROWIN_NANOX&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_SHAREDLIBS [expr $CONFIG_USER_MICROWIN_SHAREDLIBS&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NWIDGET [expr $CONFIG_USER_MICROWIN_NWIDGET&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_OBJFRAMEWORK [expr $CONFIG_USER_MICROWIN_OBJFRAMEWORK&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_MICROWINDEMO [expr $CONFIG_USER_MICROWIN_MICROWINDEMO&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NANOXDEMO [expr $CONFIG_USER_MICROWIN_NANOXDEMO&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NANOWM [expr $CONFIG_USER_MICROWIN_NANOWM&15]}
	global tmpvar_2
	global CONFIG_USER_MICROWIN_MWPF_PALETTE
	if {$tmpvar_2 == "Packed-8bit-Palette"} then {set CONFIG_USER_MICROWIN_MWPF_PALETTE 1} else {set CONFIG_USER_MICROWIN_MWPF_PALETTE 0}
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888
	if {$tmpvar_2 == "Packed-32bit-8/8/8"} then {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 1} else {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 0}
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888
	if {$tmpvar_2 == "Packed-24bit-8/8/8"} then {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 1} else {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 0}
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565
	if {$tmpvar_2 == "Packed-16bit-5/6/5"} then {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 1} else {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 0}
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555
	if {$tmpvar_2 == "Packed-16bit-5/5/5"} then {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 1} else {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 0}
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332
	if {$tmpvar_2 == "Packed-8bit-3/3/2"} then {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 1} else {set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 0}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER [expr $CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_FILEIO [expr $CONFIG_USER_MICROWIN_HAVE_FILEIO&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT [expr $CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HAVEMSFONTS [expr $CONFIG_USER_MICROWIN_HAVEMSFONTS&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NOFONTSORCLIPPING [expr $CONFIG_USER_MICROWIN_NOFONTSORCLIPPING&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_ERASEMOVE [expr $CONFIG_USER_MICROWIN_ERASEMOVE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_UPDATEREGIONS [expr $CONFIG_USER_MICROWIN_UPDATEREGIONS&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_GRAYPALETTE [expr $CONFIG_USER_MICROWIN_GRAYPALETTE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_X11 [expr $CONFIG_USER_MICROWIN_X11&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_FRAMEBUFFER [expr $CONFIG_USER_MICROWIN_FRAMEBUFFER&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_FBVGA [expr $CONFIG_USER_MICROWIN_FBVGA&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_VTSWITCH [expr $CONFIG_USER_MICROWIN_VTSWITCH&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_PORTRAIT_MODE [expr $CONFIG_USER_MICROWIN_PORTRAIT_MODE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_FBREVERSE [expr $CONFIG_USER_MICROWIN_FBREVERSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_VGALIB [expr $CONFIG_USER_MICROWIN_VGALIB&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HWVGA [expr $CONFIG_USER_MICROWIN_HWVGA&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_CLEOVGA [expr $CONFIG_USER_MICROWIN_CLEOVGA&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_GPMMOUSE [expr $CONFIG_USER_MICROWIN_GPMMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_SERMOUSE [expr $CONFIG_USER_MICROWIN_SERMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_TPMOUSE [expr $CONFIG_USER_MICROWIN_TPMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_TPHELIO [expr $CONFIG_USER_MICROWIN_TPHELIO&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_ADSMOUSE [expr $CONFIG_USER_MICROWIN_ADSMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_IPAQMOUSE [expr $CONFIG_USER_MICROWIN_IPAQMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_HARRIERMOUSE [expr $CONFIG_USER_MICROWIN_HARRIERMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_PSIONMOUSE [expr $CONFIG_USER_MICROWIN_PSIONMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_UCTSMOUSE [expr $CONFIG_USER_MICROWIN_UCTSMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_DE2TSMOUSE [expr $CONFIG_USER_MICROWIN_DE2TSMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_CLEOMOUSE [expr $CONFIG_USER_MICROWIN_CLEOMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NOMOUSE [expr $CONFIG_USER_MICROWIN_NOMOUSE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_TTYKBD [expr $CONFIG_USER_MICROWIN_TTYKBD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_SCANKBD [expr $CONFIG_USER_MICROWIN_SCANKBD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_PIPEKBD [expr $CONFIG_USER_MICROWIN_PIPEKBD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_CLEOKBD [expr $CONFIG_USER_MICROWIN_CLEOKBD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_NOKBD [expr $CONFIG_USER_MICROWIN_NOKBD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_LANDMINE [expr $CONFIG_USER_MICROWIN_BIN_LANDMINE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_LAUNCHER [expr $CONFIG_USER_MICROWIN_BIN_LAUNCHER&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_MOVE [expr $CONFIG_USER_MICROWIN_BIN_MOVE&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_MTERM [expr $CONFIG_USER_MICROWIN_BIN_MTERM&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_MTEST [expr $CONFIG_USER_MICROWIN_BIN_MTEST&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_MTEST2 [expr $CONFIG_USER_MICROWIN_BIN_MTEST2&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_MUSERFD [expr $CONFIG_USER_MICROWIN_BIN_MUSERFD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NANO_X [expr $CONFIG_USER_MICROWIN_BIN_NANO_X&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NANOWM [expr $CONFIG_USER_MICROWIN_BIN_NANOWM&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NPANEL [expr $CONFIG_USER_MICROWIN_BIN_NPANEL&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NTERM [expr $CONFIG_USER_MICROWIN_BIN_NTERM&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NTEST [expr $CONFIG_USER_MICROWIN_BIN_NTEST&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NTETRIS [expr $CONFIG_USER_MICROWIN_BIN_NTETRIS&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NXCLOCK [expr $CONFIG_USER_MICROWIN_BIN_NXCLOCK&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NXEV [expr $CONFIG_USER_MICROWIN_BIN_NXEV&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NXKBD [expr $CONFIG_USER_MICROWIN_BIN_NXKBD&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS [expr $CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NXTERM [expr $CONFIG_USER_MICROWIN_BIN_NXTERM&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_NXVIEW [expr $CONFIG_USER_MICROWIN_BIN_NXVIEW&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_SLIDER [expr $CONFIG_USER_MICROWIN_BIN_SLIDER&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_VNC [expr $CONFIG_USER_MICROWIN_BIN_VNC&15]}
	if {($CONFIG_USER_MICROWIN == 1)} then {
	set CONFIG_USER_MICROWIN_BIN_WORLD [expr $CONFIG_USER_MICROWIN_BIN_WORLD&15]}
}


menu_option menu11 11 "Games"
proc menu11 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 11}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 11]]
	message $w.m -width 400 -aspect 300 -text \
		"Games"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Games" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 11; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu12 .menu12 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 11 0 "advent4" CONFIG_USER_GAMES_ADVENT4
	bool $w.config.f 11 1 "dungeon" CONFIG_USER_GAMES_DUNGEON
	bool $w.config.f 11 2 "rubik" CONFIG_USER_GAMES_RUBIK



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu11 {} {
}


proc update_define_menu11 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


menu_option menu12 12 "Miscellaneous Configuration"
proc menu12 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 12}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 12]]
	message $w.m -width 400 -aspect 300 -text \
		"Miscellaneous Configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Miscellaneous Configuration" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 12; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu13 .menu13 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	global tmpvar_3
	minimenu $w.config.f 12 0 "RAMFS Image" tmpvar_3 CONFIG_USER_RAMIMAGE_NONE
	menu $w.config.f.x0.x.menu -tearoffcommand "menutitle \"RAMFS Image\""
	$w.config.f.x0.x.menu add radiobutton -label "None" -variable tmpvar_3 -value "None" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "64K" -variable tmpvar_3 -value "64K" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "128K" -variable tmpvar_3 -value "128K" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "256K" -variable tmpvar_3 -value "256K" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "512K" -variable tmpvar_3 -value "512K" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "1024K" -variable tmpvar_3 -value "1024K" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "2048K" -variable tmpvar_3 -value "2048K" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "8192K" -variable tmpvar_3 -value "8192K" -command "update_active"
	menusplit $w $w.config.f.x0.x.menu 8
	bool $w.config.f 12 1 "generic cgi" CONFIG_USER_CGI_GENERIC
	bool $w.config.f 12 2 "cgihtml" CONFIG_USER_CGIHTML
	bool $w.config.f 12 3 "SnapGear Button daemon" CONFIG_USER_DEMO_BUTTON
	bool $w.config.f 12 4 "SnapGear Latch daemon" CONFIG_USER_DEMO_LATCH
	bool $w.config.f 12 5 "SnapGear Morse demo" CONFIG_USER_DEMO_MORSE
	bool $w.config.f 12 6 "SnapGear R2100 daemon" CONFIG_USER_DEMO_R2100



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu12 {} {
}


proc update_define_menu12 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global tmpvar_3
	global CONFIG_USER_RAMIMAGE_NONE
	if {$tmpvar_3 == "None"} then {set CONFIG_USER_RAMIMAGE_NONE 1} else {set CONFIG_USER_RAMIMAGE_NONE 0}
	global CONFIG_USER_RAMIMAGE_RAMFS64
	if {$tmpvar_3 == "64K"} then {set CONFIG_USER_RAMIMAGE_RAMFS64 1} else {set CONFIG_USER_RAMIMAGE_RAMFS64 0}
	global CONFIG_USER_RAMIMAGE_RAMFS128
	if {$tmpvar_3 == "128K"} then {set CONFIG_USER_RAMIMAGE_RAMFS128 1} else {set CONFIG_USER_RAMIMAGE_RAMFS128 0}
	global CONFIG_USER_RAMIMAGE_RAMFS256
	if {$tmpvar_3 == "256K"} then {set CONFIG_USER_RAMIMAGE_RAMFS256 1} else {set CONFIG_USER_RAMIMAGE_RAMFS256 0}
	global CONFIG_USER_RAMIMAGE_RAMFS512
	if {$tmpvar_3 == "512K"} then {set CONFIG_USER_RAMIMAGE_RAMFS512 1} else {set CONFIG_USER_RAMIMAGE_RAMFS512 0}
	global CONFIG_USER_RAMIMAGE_RAMFS1024
	if {$tmpvar_3 == "1024K"} then {set CONFIG_USER_RAMIMAGE_RAMFS1024 1} else {set CONFIG_USER_RAMIMAGE_RAMFS1024 0}
	global CONFIG_USER_RAMIMAGE_RAMFS2048
	if {$tmpvar_3 == "2048K"} then {set CONFIG_USER_RAMIMAGE_RAMFS2048 1} else {set CONFIG_USER_RAMIMAGE_RAMFS2048 0}
	global CONFIG_USER_RAMIMAGE_RAMFS8192
	if {$tmpvar_3 == "8192K"} then {set CONFIG_USER_RAMIMAGE_RAMFS8192 1} else {set CONFIG_USER_RAMIMAGE_RAMFS8192 0}
}


menu_option menu13 13 "Debug Builds"
proc menu13 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 13}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 13]]
	message $w.m -width 400 -aspect 300 -text \
		"Debug Builds"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Debug Builds" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 13; break"
	set nextscript "catch {focus $oldFocus}; menu14 .menu14 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	$w.f.next configure -state disabled
	bind all <Alt-n> "puts \"no more menus\" "
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 13 0 "build debugable libraries" CONFIG_LIB_DEBUG
	bool $w.config.f 13 1 "build debugable applications" CONFIG_USER_DEBUG
	comment $w.config.f 13 2 "Debug tools"
	bool $w.config.f 13 3 "tpt" CONFIG_USER_TIMEPEG_TPT
	comment $w.config.f 13 4 "Debug libraries"
	bool $w.config.f 13 5 "ccmalloc" CONFIG_LIB_LIBCCMALLOC



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu13 {} {
}


proc update_define_menu13 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


proc update_mainmenu {}  {
}


set CONFIG_PROP_AUTHD_AUTHD 0
set CONFIG_PROP_AUTHD_CERBERIAN 0
set CONFIG_PROP_AUTHD_USER 0
set CONFIG_PROP_AUTHD_USERACL 0
set CONFIG_PROP_AUTHD_BWLIST 0
set CONFIG_PROP_AUTHD_LOCALHOST 0
set CONFIG_PROP_AUTHD_NASL 0
set CONFIG_PROP_AUTHD_P2P 0
set CONFIG_PROP_AUTHD_WWWLIST 0
set CONFIG_PROP_AUTHD_ZONELABS 0
set CONFIG_PROP_AUTHD_ZLAV 0
set CONFIG_PROP_AUTHD_DIRECT 0
set CONFIG_PROP_AUTHD_TESTER 0
set CONFIG_PROP_AMAZON_BOA_LDAP 0
set CONFIG_PROP_AMAZON_TIMERD 0
set CONFIG_PROP_TAMS_CONCENTRATOR 0
set CONFIG_PROP_CXEQ 0
set CONFIG_PROP_FSTHRASH_FSTHRASH 0
set CONFIG_PROP_FLASHPROG 0
set CONFIG_PROP_SQUID_MOUNT 0
set CONFIG_USER_CGI 0
set CONFIG_USER_CGI_ETH1_BRIDGE 0
set CONFIG_USER_CGI_NO_SERIAL 0
set CONFIG_USER_CGI_NO_COM2 0
set CONFIG_USER_CGI_COM2_MODEM 0
set CONFIG_USER_CGI_NO_DIALIN 0
set CONFIG_USER_CGI_DMZ 0
set CONFIG_USER_CGI_LOAD_BALANCING 0
set CONFIG_USER_CGI_VLAN 0
set CONFIG_USER_CGI_BRIDGE 0
set CONFIG_USER_CGI_LOOPBACK 0
set CONFIG_USER_CGI_DISKTEL 0
set CONFIG_USER_FIREWALL_TOOLS 0
set CONFIG_USER_FIREWALL_SCRIPT_ONLY 0
set CONFIG_USER_AES_PERF 0
set CONFIG_USER_BR_BR 0
set CONFIG_USER_CERBERIAN_CERBERIAN 0
set CONFIG_USER_CERBERIAN_PROXYAUTH 0
set CONFIG_USER_CERBERIAN_AUTHACL 0
set CONFIG_USER_CERBERIAN_CERBTEST 0
set CONFIG_PROP_CMA_CMA 0
set CONFIG_PROP_CRD_CRD 0
set CONFIG_USER_DESTEST_DESTEST 0
set CONFIG_USER_DESTEST_DESPERF 0
set CONFIG_USER_EMCTEST_EMCTEST 0
set CONFIG_USER_FACTORY_FACTTEST 0
set CONFIG_USER_FACTORY_ETHER_INTERFACE "eth0"
set CONFIG_USER_GDSD_GDSD 0
set CONFIG_USER_GDSD_GDSD_INET 0
set CONFIG_USER_GRE_GRE 0
set CONFIG_USER_IDB_IDB 0
set CONFIG_PROP_IFMOND_IFMOND 0
set CONFIG_USER_IPSEC_CONFIGURATOR 0
set CONFIG_PROP_LOGD_LOGD 0
set CONFIG_USER_REDIALER_REDIALER 0
set CONFIG_USER_PKTDELAY_PKTDELAY 0
set CONFIG_USER_PROTECT 0
set CONFIG_USER_SETKEY_SETKEY 0
set CONFIG_USER_IOD 0
set CONFIG_USER_SWTEST_SWTEST 0
set CONFIG_USER_MGMT_MGMT 0
set CONFIG_PROP_REPORTD_REPORTD 0
set CONFIG_USER_SGSNMPD_AGENT 0
set CONFIG_PROP_SGSNMPD_FULLMIB2 0
set CONFIG_USER_SGSNMPD_TCP 0
set CONFIG_USER_SGSNMPD_TCPSSL 0
set CONFIG_USER_SGSNMPD_SNAPGEAR 0
set CONFIG_PROP_WCL_WCL 0
set CONFIG_USER_TQRECV_TQRECV 0
set CONFIG_USER_UPNPD 0
set CONFIG_PROP_VLAN_VLAN 0
set CONFIG_USER_WINSD_WS 0
set CONFIG_USER_INIT_INIT 0
set CONFIG_USER_INIT_CONSOLE_SH 0
set CONFIG_USER_INIT_RUN_FIREWALL 0
set tmpvar_0 "(not set)"
set CONFIG_USER_SASH_SH 0
set CONFIG_USER_SH_SH 0
set CONFIG_USER_NWSH_SH 0
set CONFIG_USER_BASH_BASH 0
set CONFIG_USER_OTHER_SH 0
set CONFIG_USER_SASH_HISTORY 0
set CONFIG_USER_SASH_REBOOT 0
set CONFIG_USER_SASH_REBOOT_SNAPGEAR 0
set CONFIG_USER_SASH_SHUTDOWN 0
set CONFIG_USER_INIT_EXPAND 0
set CONFIG_USER_INIT_EXPAND_NOZEROES 0
set CONFIG_USER_VERSION_VERSION 0
set CONFIG_USER_LOGIN_LOGIN 0
set CONFIG_USER_OLD_PASSWORDS 0
set CONFIG_USER_ONLY_ROOT 0
set CONFIG_USER_AGETTY_AGETTY 0
set CONFIG_USER_GETTYD_GETTYD 0
set CONFIG_USER_LOGIN_PASSWD 0
set CONFIG_USER_CRON_CRON 0
set CONFIG_USER_HWCLOCK_HWCLOCK 0
set CONFIG_USER_RTC_M41T11 0
set CONFIG_USER_RTC_DS1302 0
set CONFIG_USER_VIXIECRON_CRON 0
set CONFIG_USER_VIXIECRON_CRONTAB 0
set CONFIG_USER_AT_AT 0
set CONFIG_USER_AT_ATD 0
set CONFIG_USER_AT_ATRUN 0
set CONFIG_LIB_LIBAES_FORCE 0
set CONFIG_LIB_LIBDES_FORCE 0
set CONFIG_LIB_LIBSSL_FORCE 0
set CONFIG_LIB_LIBGMP_FORCE 0
set CONFIG_LIB_LIBG_FORCE 0
set CONFIG_LIB_LIBLDAP_FORCE 0
set CONFIG_LIB_LIBPAM_FORCE 0
set CONFIG_LIB_LIBPCAP_FORCE 0
set CONFIG_LIB_ZLIB_FORCE 0
set CONFIG_LIB_LIBATM_FORCE 0
set CONFIG_LIB_LIBPNG_FORCE 0
set CONFIG_LIB_LIBJPEG_FORCE 0
set CONFIG_LIB_NCURSES_FORCE 0
set CONFIG_LIB_UC_LIBC_TIMEZONE 0
set CONFIG_LIB_UC_LIBC_TZ_FROM_FILE 0
set CONFIG_USER_FLASHW_FLASHW 0
set CONFIG_USER_NETFLASH_NETFLASH 0
set CONFIG_USER_FLASH_FLASH 0
set CONFIG_USER_NETFLASH_WITH_FTP 0
set CONFIG_USER_NETFLASH_VERSION 0
set CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT 0
set CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER 0
set CONFIG_USER_NETFLASH_DECOMPRESS 0
set CONFIG_USER_NETFLASH_AUTODECOMPRESS 0
set CONFIG_USER_NETFLASH_HMACMD5 0
set CONFIG_USER_NETFLASH_HMACMD5_KEY "HMAC-MD5 key"
set CONFIG_USER_RECOVER_BIOS 0
set CONFIG_USER_NETFLASH_CRYPTO 0
set CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL 0
set CONFIG_USER_RECOVER_STATIC_TFTP 0
set CONFIG_USER_RECOVER_RECOVER 0
set CONFIG_USER_RECOVER_ETHERNET_INTERFACE "eth0"
set CONFIG_USER_RECOVER_USE_STATIC_SERVER 0
set CONFIG_USER_RECOVER_STATIC_SERVER "0.0.0.0"
set CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS 0
set CONFIG_USER_BOOTTOOLS_FLASHLOADER 0
set CONFIG_USER_BOOTTOOLS_HIMEMLOADER 0
set CONFIG_USER_MTDUTILS 0
set CONFIG_USER_MTDUTILS_ERASE 0
set CONFIG_USER_MTDUTILS_ERASEALL 0
set CONFIG_USER_MTDUTILS_FTL_CHECK 0
set CONFIG_USER_MTDUTILS_FTL_FORMAT 0
set CONFIG_USER_MTDUTILS_MKFSJFFS 0
set CONFIG_USER_MTDUTILS_MKFSJFFS2 0
set CONFIG_USER_MTDUTILS_NFTLDUMP 0
set CONFIG_USER_MTDUTILS_NFTL_FORMAT 0
set CONFIG_USER_MTDUTILS_NANDDUMP 0
set CONFIG_USER_MTDUTILS_NANDTEST 0
set CONFIG_USER_MTDUTILS_NANDWRITE 0
set CONFIG_USER_MTDUTILS_DOC_LOADBIOS 0
set CONFIG_USER_MTDUTILS_DOC_LOADIPL 0
set CONFIG_USER_FLATFSD_FLATFSD 0
set tmpvar_1 "(not set)"
set CONFIG_USER_FLATFSD_AUTO 0
set CONFIG_USER_FLATFSD_USE_FLASH_FS 0
set CONFIG_USER_FLATFSD_DISKLIKE 0
set CONFIG_USER_MOUNT_MOUNT 0
set CONFIG_USER_MOUNT_UMOUNT 0
set CONFIG_USER_FDISK_FDISK 0
set CONFIG_USER_FDISK_SFDISK 0
set CONFIG_USER_E2FSPROGS_E2FSCK_E2FSCK 0
set CONFIG_USER_E2FSPROGS_MISC_MKE2FS 0
set CONFIG_USER_E2FSPROGS_MISC_BADBLOCKS 0
set CONFIG_USER_E2FSPROGS_MISC_CHATTR 0
set CONFIG_USER_E2FSPROGS_MISC_DUMPE2FS 0
set CONFIG_USER_E2FSPROGS_MISC_E2LABEL 0
set CONFIG_USER_E2FSPROGS_MISC_FSCK 0
set CONFIG_USER_E2FSPROGS_MISC_LSATTR 0
set CONFIG_USER_E2FSPROGS_MISC_MKLOST_FOUND 0
set CONFIG_USER_E2FSPROGS_MISC_TUNE2FS 0
set CONFIG_USER_E2FSPROGS_MISC_UUIDGEN 0
set CONFIG_USER_REISERFSPROGS 0
set CONFIG_USER_REISERFSPROGS_DEBUGRESIERFS 0
set CONFIG_USER_REISERFSPROGS_MKREISERFS 0
set CONFIG_USER_REISERFSPROGS_REISERFSCK 0
set CONFIG_USER_REISERFSPROGS_RESIZE_REISERFS 0
set CONFIG_USER_REISERFSPROGS_UNPACK 0
set CONFIG_USER_SAMBA 0
set CONFIG_USER_SAMBA_SMBD 0
set CONFIG_USER_SAMBA_NMBD 0
set CONFIG_USER_SAMBA_SMBMOUNT 0
set CONFIG_USER_SAMBA_SMBUMOUNT 0
set CONFIG_USER_SMBMOUNT_SMBMOUNT 0
set CONFIG_USER_SMBMOUNT_SMBUMOUNT 0
set CONFIG_USER_CRAMFS_CRAMFSCK 0
set CONFIG_USER_CRAMFS_MKCRAMFS 0
set CONFIG_USER_ROUTE_ARP 0
set CONFIG_USER_FNORD_HTTPD 0
set CONFIG_USER_BOA_SRC_BOA 0
set CONFIG_USER_BOA_WITH_SSL 0
set CONFIG_USER_BPALOGIN_BPALOGIN 0
set CONFIG_USER_BR2684CTL_BR2684CTL 0
set CONFIG_USER_BRCFG_BRCFG 0
set CONFIG_USER_BRCTL_BRCTL 0
set CONFIG_USER_DHCPCD_DHCPCD 0
set CONFIG_USER_DHCPCD_LLIP 0
set CONFIG_USER_DHCPCD_NEW_DHCPCD 0
set CONFIG_USER_DHCPD_DHCPD 0
set CONFIG_USER_DHCP_ISC_SERVER_DHCPD 0
set CONFIG_USER_DHCP_ISC_CLIENT_DHCLIENT 0
set CONFIG_USER_DHCP_ISC_RELAY_DHCRELAY 0
set CONFIG_USER_DIALD_DIALD 0
set CONFIG_USER_DISCARD_DISCARD 0
set CONFIG_USER_DNSMASQ_DNSMASQ 0
set CONFIG_USER_ETHATTACH_ETHATTACH 0
set CONFIG_USER_EZIPUPDATE_EZIPUPDATE 0
set CONFIG_USER_FTP_FTP_FTP 0
set CONFIG_USER_FTPD_FTPD 0
set CONFIG_USER_FREESWAN 0
set CONFIG_USER_IPSEC_KEEPALIVE 0
set CONFIG_USER_FREESWAN_PLUTO_PLUTO 0
set CONFIG_USER_FREESWAN_PLUTO_WHACK 0
set CONFIG_USER_FREESWAN_UTILS_RANBITS 0
set CONFIG_USER_FREESWAN_UTILS_RSASIGKEY 0
set CONFIG_USER_FREESWAN_KLIPS_EROUTE 0
set CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG 0
set CONFIG_USER_FREESWAN_KLIPS_SPI 0
set CONFIG_USER_FREESWAN_KLIPS_SPIGRP 0
set CONFIG_USER_FREESWAN_KLIPS_TNCFG 0
set CONFIG_USER_FSWCERT_FSWCERT 0
set CONFIG_USER_HTTPD_HTTPD 0
set CONFIG_USER_IFATTACH_IFATTACH 0
set CONFIG_USER_ROUTE_IFCONFIG 0
set CONFIG_USER_INETD_INETD 0
set CONFIG_USER_IPCHAINS_IPCHAINS 0
set CONFIG_USER_IPFWADM_IPFWADM 0
set CONFIG_USER_IPMASQADM_IPMASQADM 0
set CONFIG_USER_IPPORTFW_IPPORTFW 0
set CONFIG_USER_IPREDIR_IPREDIR 0
set CONFIG_USER_IPROUTE2 0
set CONFIG_USER_IPROUTE2_TC_TC 0
set CONFIG_USER_IPROUTE2_IP_IFCFG 0
set CONFIG_USER_IPROUTE2_IP_IP 0
set CONFIG_USER_IPROUTE2_IP_ROUTEF 0
set CONFIG_USER_IPROUTE2_IP_ROUTEL 0
set CONFIG_USER_IPROUTE2_IP_RTACCT 0
set CONFIG_USER_IPROUTE2_IP_RTMON 0
set CONFIG_USER_IPROUTE2_IP_RTPR 0
set CONFIG_USER_IPTABLES_IPTABLES 0
set CONFIG_USER_KENDIN_CONFIG 0
set CONFIG_USER_KLAXON_KLAXON 0
set CONFIG_USER_KLAXON_RFC931 0
set CONFIG_USER_KLAXON_CHARGEN 0
set CONFIG_USER_KLAXON_DISCARD 0
set CONFIG_USER_KLAXON_ECHO 0
set CONFIG_USER_KLAXON_FTP 0
set CONFIG_USER_KLAXON_HTTP 0
set CONFIG_USER_KLAXON_SMTP 0
set CONFIG_USER_KLAXON_SNMP 0
set CONFIG_USER_KLAXON_SSH 0
set CONFIG_USER_KLAXON_TELNET 0
set CONFIG_USER_KLAXON_TFTP 0
set CONFIG_USER_L2TPD_L2TPD 0
set CONFIG_USER_LOATTACH_LOATTACH 0
set CONFIG_USER_SMTP_SMTPCLIENT 0
set CONFIG_USER_MAIL_MAIL_IP 0
set CONFIG_USER_MARADNS_MARADNS 0
set CONFIG_USER_MINI_HTTPD_MINI_HTTPD 0
set CONFIG_USER_MINI_HTTPD_WITH_SSL 0
set CONFIG_USER_MSNTP_MSNTP 0
set CONFIG_USER_NESSUS_NASL 0
set CONFIG_USER_ROUTE_NETSTAT 0
set CONFIG_USER_NETSTAT_NAT_NETSTAT_NAT 0
set CONFIG_USER_MARADNS_ZONESERVER 0
set CONFIG_USER_ROUTE_MIITOOL 0
set CONFIG_USER_NTPD_NTPD 0
set CONFIG_USER_NTPD_NTPDC 0
set CONFIG_USER_NTPD_NTPDATE 0
set CONFIG_USER_NTPD_NTPQ 0
set CONFIG_USER_OPENSSL_APPS 0
set CONFIG_USER_PING_PING 0
set CONFIG_USER_PLUG_PLUG 0
set CONFIG_USER_PORTMAP_PORTMAP 0
set CONFIG_USER_PPPD_PPPD_PPPD 0
set CONFIG_USER_PPPD_WITH_MPPE 0
set CONFIG_USER_PPPD_WITH_TACACS 0
set CONFIG_USER_PPPD_WITH_RADIUS 0
set CONFIG_USER_PPPD_WITH_PPPOE 0
set CONFIG_USER_PPPD_PPPOE_RETRIES 6
set CONFIG_USER_PPPD_NO_AT_REDIRECTION 0
set CONFIG_USER_PPTPD_PPTPCTRL 0
set CONFIG_USER_PPTPD_PPTPD 0
set CONFIG_USER_PPTP_CLIENT_PPTP 0
set CONFIG_USER_PPTP_CLIENT_PPTP_CALLMGR 0
set CONFIG_USER_RDATE_RDATE 0
set CONFIG_USER_ROUTE_ROUTE 0
set CONFIG_USER_ROUTED_ROUTED 0
set CONFIG_USER_RP_PPPOE_PPPOE 0
set CONFIG_USER_RP_PPPOE_PPPOE_SERVER 0
set CONFIG_USER_SETHDLC_SETHDLC 0
set CONFIG_USER_SLATTACH_SLATTACH 0
set CONFIG_USER_SNMPD_SNMPD 0
set CONFIG_USER_SNORT_SNORT 0
set CONFIG_USER_STUNNEL_STUNNEL 0
set CONFIG_USER_SSLWRAP_SSLWRAP 0
set CONFIG_USER_SQUID_SQUID 0
set CONFIG_USER_SSH_SSH 0
set CONFIG_USER_SSH_SSHD 0
set CONFIG_USER_SSH_SSHKEYGEN 0
set CONFIG_USER_STP_STP 0
set CONFIG_USER_TCPWRAP_TCPD 0
set CONFIG_USER_TCPWRAP_MISCD 0
set CONFIG_USER_TCPWRAP_FINGER 0
set CONFIG_USER_TCPWRAP_TCPDMATCH 0
set CONFIG_UEER_TCPWRAP_TRYFROM 0
set CONFIG_USER_TCPWRAP_TCPDCHK 0
set CONFIG_USER_TCPBLAST_TCPBLAST 0
set CONFIG_USER_TCPDUMP_TCPDUMP 0
set CONFIG_USER_TELNETD_TELNETD 0
set CONFIG_USER_TELNET_TELNET 0
set CONFIG_USER_TFTP_TFTP 0
set CONFIG_USER_TFTPD_TFTPD 0
set CONFIG_USER_TFTPD_TFTPD_LOW_SEC 0
set CONFIG_USER_THTTPD_THTTPD 0
set CONFIG_USER_TRACEROUTE_TRACEROUTE 0
set CONFIG_USER_UCDSNMP_SNMPD 0
set CONFIG_USER_VCONFIG_VCONFIG 0
set CONFIG_USER_VPNLED_VPNLED 0
set CONFIG_USER_WGET 0
set CONFIG_USER_ZEBRA_ZEBRA_ZEBRA 0
set CONFIG_USER_ZEBRA_BGPD_BGPD 0
set CONFIG_USER_ZEBRA_OSPFD_OSPFD 0
set CONFIG_USER_ZEBRA_RIPD_RIPD 0
set CONFIG_USER_NET_TOOLS_ARP 0
set CONFIG_USER_NET_TOOLS_HOSTNAME 0
set CONFIG_USER_NET_TOOLS_IFCONFIG 0
set CONFIG_USER_NET_TOOLS_NAMEIF 0
set CONFIG_USER_NET_TOOLS_NETSTAT 0
set CONFIG_USER_NET_TOOLS_PLIPCONFIG 0
set CONFIG_USER_NET_TOOLS_RARP 0
set CONFIG_USER_NET_TOOLS_ROUTE 0
set CONFIG_USER_NET_TOOLS_SLATTACH 0
set CONFIG_USER_NET_TOOLS_MII_TOOL 0
set CONFIG_USER_WIRELESS_TOOLS 0
set CONFIG_USER_WIRELESS_TOOLS_IWCONFIG 0
set CONFIG_USER_WIRELESS_TOOLS_IWGETID 0
set CONFIG_USER_WIRELESS_TOOLS_IWLIST 0
set CONFIG_USER_WIRELESS_TOOLS_IWPRIV 0
set CONFIG_USER_WIRELESS_TOOLS_IWSPY 0
set CONFIG_USER_HOSTAP_HOSTAP 0
set CONFIG_USER_HOSTAP_PCI 0
set CONFIG_USER_HOSTAP_CS 0
set CONFIG_USER_WLAN_NG 0
set CONFIG_USER_WLAN_NG_WLAND 0
set CONFIG_USER_WLAN_NG_WLANCFG 0
set CONFIG_USER_WLAN_NG_WLANCTL 0
set CONFIG_USER_LANG_A60 0
set CONFIG_USER_LANG_A60_EGS 0
set CONFIG_USER_LAND_A60_TEST 0
set CONFIG_USER_CAL_CAL 0
set CONFIG_USER_CHAT_CHAT 0
set CONFIG_USER_CHAT_CHAT_NETWORK 0
set CONFIG_USER_CKSUM_CKSUM 0
set CONFIG_USER_CLOCK_CLOCK 0
set CONFIG_USER_CPU_CPU 0
set CONFIG_USER_CAL_DATE 0
set CONFIG_USER_DHRYSTONE_DHRYSTONE 0
set CONFIG_USER_DE2TSCAL_DE2TSCAL 0
set CONFIG_USER_FROB_LED_FROB_LED 0
set CONFIG_USER_GDBSERVER_GDBREPLAY 0
set CONFIG_USER_GDBSERVER_GDBSERVER 0
set CONFIG_USER_HD_HD 0
set CONFIG_USER_LCD_LCD 0
set CONFIG_USER_LEDCON_LEDCON 0
set CONFIG_USER_LILO_LILO 0
set CONFIG_USER_LISSA_LISSA 0
set CONFIG_USER_USBCBI_USBCBI 0
set CONFIG_USER_USBISO_USBISO 0
set CONFIG_USER_MATH_TEST 0
set CONFIG_USER_MAWK_AWK 0
set CONFIG_USER_MYSQL 0
set CONFIG_USER_MYSQL_CLIB 0
set CONFIG_USER_NULL_NULL 0
set CONFIG_USER_PALMBOT_PALMBOT 0
set CONFIG_USER_PCMCIA_CS 0
set CONFIG_USER_PERL_PERL 0
set CONFIG_USER_PYTHON_PYTHON 0
set CONFIG_USER_READPROFILE_READPROFILE 0
set CONFIG_USER_ROOTLOADER_ROOTLOADER 0
set CONFIG_USER_SETSERIAL_SETSERIAL 0
set CONFIG_USER_TRIPWIRE_SIGGEN 0
set CONFIG_USER_STRACE_STRACE 0
set CONFIG_USER_STTY_STTY 0
set CONFIG_USER_TCSH_TCSH 0
set CONFIG_USER_TINYTCL_TCLSH 0
set CONFIG_USER_THREADDEMOS_THREADDEMOS 0
set CONFIG_USER_TIP_TIP 0
set CONFIG_USER_TRIPWIRE_TRIPWIRE 0
set CONFIG_USER_LRZSZ_LRZSZ 0
set CONFIG_USER_LRZSZ_LRZ 0
set CONFIG_USER_LRZSZ_LSZ 0
set CONFIG_USER_LIRC 0
set CONFIG_USER_LIRC_LIRCD 0
set CONFIG_USER_LIRC_IRRECORD 0
set CONFIG_USER_LIRC_LIRCMD 0
set CONFIG_USER_LIRC_IREXEC 0
set CONFIG_USER_LIRC_IRW 0
set CONFIG_USER_LIRC_MODE2 0
set CONFIG_USER_LEVEE_VI 0
set CONFIG_USER_ELVISTINY_VI 0
set CONFIG_USER_MP3PLAY_MP3PLAY 0
set CONFIG_USER_OGGPLAY_OGG123 0
set CONFIG_USER_OGGPLAY_EXAMPLE 0
set CONFIG_USER_MUSICBOX_MUSICBOX 0
set CONFIG_USER_PLAY_PLAY 0
set CONFIG_USER_PLAY_TONE 0
set CONFIG_USER_VPLAY_VPLAY 0
set CONFIG_USER_VPLAY_VREC 0
set CONFIG_USER_VPLAY_MIXER 0
set CONFIG_USER_PLAYRT_PLAYRT 0
set CONFIG_USER_W3CAM_VIDCAT 0
set CONFIG_USER_W3CAM_W3CAMD 0
set CONFIG_USER_FILEUTILS_CAT 0
set CONFIG_USER_FILEUTILS_CHGRP 0
set CONFIG_USER_FILEUTILS_CHMOD 0
set CONFIG_USER_FILEUTILS_CHOWN 0
set CONFIG_USER_FILEUTILS_CMP 0
set CONFIG_USER_FILEUTILS_CP 0
set CONFIG_USER_FILEUTILS_DD 0
set CONFIG_USER_FILEUTILS_GREP 0
set CONFIG_USER_FILEUTILS_L 0
set CONFIG_USER_FILEUTILS_LN 0
set CONFIG_USER_FILEUTILS_LS 0
set CONFIG_USER_FILEUTILS_MKDIR 0
set CONFIG_USER_FILEUTILS_MKFIFO 0
set CONFIG_USER_FILEUTILS_MKNOD 0
set CONFIG_USER_FILEUTILS_MORE 0
set CONFIG_USER_FILEUTILS_MV 0
set CONFIG_USER_FILEUTILS_RM 0
set CONFIG_USER_FILEUTILS_RMDIR 0
set CONFIG_USER_FILEUTILS_SYNC 0
set CONFIG_USER_FILEUTILS_TOUCH 0
set CONFIG_USER_SHUTILS_BASENAME 0
set CONFIG_USER_SHUTILS_DATE 0
set CONFIG_USER_SHUTILS_DIRNAME 0
set CONFIG_USER_SHUTILS_ECHO 0
set CONFIG_USER_SHUTILS_FALSE 0
set CONFIG_USER_SHUTILS_LOGNAME 0
set CONFIG_USER_SHUTILS_PRINTENV 0
set CONFIG_USER_SHUTILS_PWD 0
set CONFIG_USER_SHUTILS_TRUE 0
set CONFIG_USER_SHUTILS_UNAME 0
set CONFIG_USER_SHUTILS_WHICH 0
set CONFIG_USER_SHUTILS_WHOAMI 0
set CONFIG_USER_SHUTILS_YES 0
set CONFIG_USER_SYSUTILS_REBOOT 0
set CONFIG_USER_SYSUTILS_SHUTDOWN 0
set CONFIG_USER_SYSUTILS_DF 0
set CONFIG_USER_SYSUTILS_FREE 0
set CONFIG_USER_SYSUTILS_HOSTNAME 0
set CONFIG_USER_SYSUTILS_KILL 0
set CONFIG_USER_SYSUTILS_PS 0
set CONFIG_USER_PROCPS_FREE 0
set CONFIG_USER_PROCPS_KILL 0
set CONFIG_USER_PROCPS_PGREP 0
set CONFIG_USER_PROCPS_PKILL 0
set CONFIG_USER_PROCPS_PS 0
set CONFIG_USER_PROCPS_SNICE 0
set CONFIG_USER_PROCPS_SYSCTL 0
set CONFIG_USER_PROCPS_TLOAD 0
set CONFIG_USER_PROCPS_TOP 0
set CONFIG_USER_PROCPS_UPTIME 0
set CONFIG_USER_PROCPS_VMSTAT 0
set CONFIG_USER_PROCPS_W 0
set CONFIG_USER_PROCPS_WATCH 0
set CONFIG_USER_PCIUTILS_LSPCI 0
set CONFIG_USER_PCIUTILS_SETPCI 0
set CONFIG_USER_BUSYBOX_BUSYBOX 0
set CONFIG_USER_BUSYBOX_ADJTIMEX 0
set CONFIG_USER_BUSYBOX_AR 0
set CONFIG_USER_BUSYBOX_BASENAME 0
set CONFIG_USER_BUSYBOX_CAT 0
set CONFIG_USER_BUSYBOX_CHGRP 0
set CONFIG_USER_BUSYBOX_CHMOD 0
set CONFIG_USER_BUSYBOX_CHOWN 0
set CONFIG_USER_BUSYBOX_CHROOT 0
set CONFIG_USER_BUSYBOX_CLEAR 0
set CONFIG_USER_BUSYBOX_CMP 0
set CONFIG_USER_BUSYBOX_CP 0
set CONFIG_USER_BUSYBOX_CUT 0
set CONFIG_USER_BUSYBOX_DATE 0
set CONFIG_USER_BUSYBOX_DC 0
set CONFIG_USER_BUSYBOX_DD 0
set CONFIG_USER_BUSYBOX_DF 0
set CONFIG_USER_BUSYBOX_DIRNAME 0
set CONFIG_USER_BUSYBOX_DMESG 0
set CONFIG_USER_BUSYBOX_DUTMP 0
set CONFIG_USER_BUSYBOX_DU 0
set CONFIG_USER_BUSYBOX_ECHO 0
set CONFIG_USER_BUSYBOX_ENV 0
set CONFIG_USER_BUSYBOX_EXPR 0
set CONFIG_USER_BUSYBOX_FIND 0
set CONFIG_USER_BUSYBOX_FIND_TYPE 0
set CONFIG_USER_BUSYBOX_FIND_PERM 0
set CONFIG_USER_BUSYBOX_FIND_MTIME 0
set CONFIG_USER_BUSYBOX_FREE 0
set CONFIG_USER_BUSYBOX_FREERAMDISK 0
set CONFIG_USER_BUSYBOX_FSCK_MINIX 0
set CONFIG_USER_BUSYBOX_GETOPT 0
set CONFIG_USER_BUSYBOX_GREP 0
set CONFIG_USER_BUSYBOX_GREP_CONTEXT 0
set CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS 0
set CONFIG_USER_BUSYBOX_GUNZIP 0
set CONFIG_USER_BUSYBOX_GZIP 0
set CONFIG_USER_BUSYBOX_HALT 0
set CONFIG_USER_BUSYBOX_HEAD 0
set CONFIG_USER_BUSYBOX_HOSTNAME 0
set CONFIG_USER_BUSYBOX_ID 0
set CONFIG_USER_BUSYBOX_IFCONFIG 0
set CONFIG_USER_BUSYBOX_IFCONFIG_STATUS 0
set CONFIG_USER_BUSYBOX_IFCONFIG_SLIP 0
set CONFIG_USER_BUSYBOX_IFCONFIG_HW 0
set CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ 0
set CONFIG_USER_BUSYBOX_INIT 0
set CONFIG_USER_BUSYBOX_USE_INITTAB 0
set CONFIG_USER_BUSYBOX_LINUXRC 0
set CONFIG_USER_BUSYBOX_INIT_COREDUMPS 0
set CONFIG_USER_BUSYBOX_INSMOD 0
set CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM 0
set CONFIG_USER_BUSYBOX_KILL 0
set CONFIG_USER_BUSYBOX_KILLALL 0
set CONFIG_USER_BUSYBOX_KLOGD 0
set CONFIG_USER_BUSYBOX_LENGTH 0
set CONFIG_USER_BUSYBOX_LN 0
set CONFIG_USER_BUSYBOX_LOGGER 0
set CONFIG_USER_BUSYBOX_LOGNAME 0
set CONFIG_USER_BUSYBOX_LS 0
set CONFIG_USER_BUSYBOX_LS_USERNAME 0
set CONFIG_USER_BUSYBOX_LS_TIMESTAMPS 0
set CONFIG_USER_BUSYBOX_LS_FILETYPES 0
set CONFIG_USER_BUSYBOX_LS_SORTFILES 0
set CONFIG_USER_BUSYBOX_LS_RECURSIVE 0
set CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS 0
set CONFIG_USER_BUSYBOX_LSMOD 0
set CONFIG_USER_BUSYBOX_MAKEDEVS 0
set CONFIG_USER_BUSYBOX_MD5SUM 0
set CONFIG_USER_BUSYBOX_MKDIR 0
set CONFIG_USER_BUSYBOX_MKFS_MINIX 0
set CONFIG_USER_BUSYBOX_MKNOD 0
set CONFIG_USER_BUSYBOX_MKTEMP 0
set CONFIG_USER_BUSYBOX_MODPROBE 0
set CONFIG_USER_BUSYBOX_MORE 0
set CONFIG_USER_BUSYBOX_MOUNT 0
set CONFIG_USER_BUSYBOX_MOUNT_LOOP 0
set CONFIG_USER_BUSYBOX_MTAB_SUPPORT 0
set CONFIG_USER_BUSYBOX_NFSMOUNT 0
set CONFIG_USER_BUSYBOX_MV 0
set CONFIG_USER_BUSYBOX_NC 0
set CONFIG_USER_BUSYBOX_NSLOOKUP 0
set CONFIG_USER_BUSYBOX_PIDOF 0
set CONFIG_USER_BUSYBOX_PING 0
set CONFIG_USER_BUSYBOX_FANCY_PING 0
set CONFIG_USER_BUSYBOX_PIVOT_ROOT 0
set CONFIG_USER_BUSYBOX_POWEROFF 0
set CONFIG_USER_BUSYBOX_PRINTF 0
set CONFIG_USER_BUSYBOX_PS 0
set CONFIG_USER_BUSYBOX_PWD 0
set CONFIG_USER_BUSYBOX_RDATE 0
set CONFIG_USER_BUSYBOX_READLINK 0
set CONFIG_USER_BUSYBOX_REBOOT 0
set CONFIG_USER_BUSYBOX_RENICE 0
set CONFIG_USER_BUSYBOX_RESET 0
set CONFIG_USER_BUSYBOX_RM 0
set CONFIG_USER_BUSYBOX_RMDIR 0
set CONFIG_USER_BUSYBOX_RMMOD 0
set CONFIG_USER_BUSYBOX_ROUTE 0
set CONFIG_USER_BUSYBOX_RPM2CPIO 0
set CONFIG_USER_BUSYBOX_SED 0
set CONFIG_USER_BUSYBOX_SHELL 0
set CONFIG_USER_BUSYBOX_ASH 0
set CONFIG_USER_BUSYBOX_SH_IS_ASH 0
set CONFIG_USER_BUSYBOX_HUSH 0
set CONFIG_USER_BUSYBOX_SH_IS_HUSH 0
set CONFIG_USER_BUSYBOX_LASH 0
set CONFIG_USER_BUSYBOX_SH_IS_LASH 0
set CONFIG_USER_BUSYBOX_MSH 0
set CONFIG_USER_BUSYBOX_SH_IS_MSH 0
set CONFIG_USER_BUSYBOX_COMMAND_EDITING 0
set CONFIG_USER_BUSYBOX_TAB_COMPLETION 0
set CONFIG_USER_BUSYBOX_USERNAME_COMPLETION 0
set CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL 0
set CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN 0
set CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT 0
set CONFIG_USER_BUSYBOX_SLEEP 0
set CONFIG_USER_BUSYBOX_SORT 0
set CONFIG_USER_BUSYBOX_SORT_REVERSE 0
set CONFIG_USER_BUSYBOX_SORT_UNIQUE 0
set CONFIG_USER_BUSYBOX_STTY 0
set CONFIG_USER_BUSYBOX_SYNC 0
set CONFIG_USER_BUSYBOX_SYSLOGD 0
set CONFIG_USER_BUSYBOX_REMOTE_LOG 0
set CONFIG_USER_BUSYBOX_IPC_SYSLOG 0
set CONFIG_USER_BUSYBOX_TAIL 0
set CONFIG_USER_BUSYBOX_FANCY_TAIL 0
set CONFIG_USER_BUSYBOX_TAR 0
set CONFIG_USER_BUSYBOX_TAR_CREATE 0
set CONFIG_USER_BUSYBOX_TAR_EXCLUDE 0
set CONFIG_USER_BUSYBOX_TEE 0
set CONFIG_USER_BUSYBOX_TELNET 0
set CONFIG_USER_BUSYBOX_TELNET_TTYPE 0
set CONFIG_USER_BUSYBOX_TEST 0
set CONFIG_USER_BUSYBOX_TFTP 0
set CONFIG_USER_BUSYBOX_TFTP_PUT 0
set CONFIG_USER_BUSYBOX_TFTP_GET 0
set CONFIG_USER_BUSYBOX_TOUCH 0
set CONFIG_USER_BUSYBOX_TR 0
set CONFIG_USER_BUSYBOX_TRACEROUTE 0
set CONFIG_USER_BUSYBOX_TRUE_FALSE 0
set CONFIG_USER_BUSYBOX_TTY 0
set CONFIG_USER_BUSYBOX_UMOUNT 0
set CONFIG_USER_BUSYBOX_MOUNT_FORCE 0
set CONFIG_USER_BUSYBOX_UNAME 0
set CONFIG_USER_BUSYBOX_UNIQ 0
set CONFIG_USER_BUSYBOX_UNIX2DOS 0
set CONFIG_USER_BUSYBOX_UPTIME 0
set CONFIG_USER_BUSYBOX_USLEEP 0
set CONFIG_USER_BUSYBOX_UUDECODE 0
set CONFIG_USER_BUSYBOX_UUENCODE 0
set CONFIG_USER_BUSYBOX_VI 0
set CONFIG_USER_BUSYBOX_VI_COLON 0
set CONFIG_USER_BUSYBOX_VI_YANKMARK 0
set CONFIG_USER_BUSYBOX_VI_SEARCH 0
set CONFIG_USER_BUSYBOX_VI_USE_SIGNALS 0
set CONFIG_USER_BUSYBOX_VI_DOT_CMD 0
set CONFIG_USER_BUSYBOX_VI_READONLY 0
set CONFIG_USER_BUSYBOX_VI_SETOPTS 0
set CONFIG_USER_BUSYBOX_VI_SET 0
set CONFIG_USER_BUSYBOX_VI_WIN_RESIZE 0
set CONFIG_USER_BUSYBOX_WATCHDOG 0
set CONFIG_USER_BUSYBOX_WC 0
set CONFIG_USER_BUSYBOX_WGET 0
set CONFIG_USER_BUSYBOX_WGET_STATUSBAR 0
set CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION 0
set CONFIG_USER_BUSYBOX_WHICH 0
set CONFIG_USER_BUSYBOX_WHOAMI 0
set CONFIG_USER_BUSYBOX_XARGS 0
set CONFIG_USER_BUSYBOX_YES 0
set CONFIG_USER_BUSYBOX_VERBOSE_USAGE 0
set CONFIG_USER_BUSYBOX_AUTOWIDTH 0
set CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE 0
set CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE 0
set CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING 0
set CONFIG_USER_BUSYBOX_HUMAN_READABLE 0
set CONFIG_USER_TINYLOGIN_TINYLOGIN 0
set CONFIG_USER_TINYLOGIN_ADDUSER 0
set CONFIG_USER_TINYLOGIN_ADDGROUP 0
set CONFIG_USER_TINYLOGIN_DELUSER 0
set CONFIG_USER_TINYLOGIN_DELGROUP 0
set CONFIG_USER_TINYLOGIN_LOGIN 0
set CONFIG_USER_TINYLOGIN_SECURETTY 0
set CONFIG_USER_TINYLOGIN_SU 0
set CONFIG_USER_TINYLOGIN_SULOGIN 0
set CONFIG_USER_TINYLOGIN_PASSWD 0
set CONFIG_USER_TINYLOGIN_GETTY 0
set CONFIG_USER_TINYLOGIN_SHADOWPASSWDS 0
set CONFIG_USER_TINYLOGIN_MD5_PASSWORDS 0
set CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS 0
set CONFIG_USER_TINYLOGIN_TRIVIAL_HELP 0
set CONFIG_USER_MICROWIN 0
set CONFIG_USER_MICROWIN_OPTIMIZE 0
set CONFIG_USER_MICROWIN_DEBUG 0
set CONFIG_USER_MICROWIN_VERBOSE 0
set CONFIG_USER_MICROWIN_MICROWIN 0
set CONFIG_USER_MICROWIN_NANOX 0
set CONFIG_USER_MICROWIN_SHAREDLIBS 0
set CONFIG_USER_MICROWIN_NWIDGET 0
set CONFIG_USER_MICROWIN_OBJFRAMEWORK 0
set CONFIG_USER_MICROWIN_MICROWINDEMO 0
set CONFIG_USER_MICROWIN_NANOXDEMO 0
set CONFIG_USER_MICROWIN_NANOWM 0
set tmpvar_2 "(not set)"
set CONFIG_USER_MICROWIN_MWPF_PALETTE 0
set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 0
set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 0
set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 0
set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 0
set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 0
set CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER 0
set CONFIG_USER_MICROWIN_HAVE_FILEIO 0
set CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT 0
set CONFIG_USER_MICROWIN_HAVEMSFONTS 0
set CONFIG_USER_MICROWIN_NOFONTSORCLIPPING 0
set CONFIG_USER_MICROWIN_ERASEMOVE 0
set CONFIG_USER_MICROWIN_UPDATEREGIONS 0
set CONFIG_USER_MICROWIN_GRAYPALETTE 0
set CONFIG_USER_MICROWIN_X11 0
set CONFIG_USER_MICROWIN_FRAMEBUFFER 0
set CONFIG_USER_MICROWIN_FBVGA 0
set CONFIG_USER_MICROWIN_VTSWITCH 0
set CONFIG_USER_MICROWIN_PORTRAIT_MODE 0
set CONFIG_USER_MICROWIN_FBREVERSE 0
set CONFIG_USER_MICROWIN_VGALIB 0
set CONFIG_USER_MICROWIN_HWVGA 0
set CONFIG_USER_MICROWIN_CLEOVGA 0
set CONFIG_USER_MICROWIN_GPMMOUSE 0
set CONFIG_USER_MICROWIN_SERMOUSE 0
set CONFIG_USER_MICROWIN_TPMOUSE 0
set CONFIG_USER_MICROWIN_TPHELIO 0
set CONFIG_USER_MICROWIN_ADSMOUSE 0
set CONFIG_USER_MICROWIN_IPAQMOUSE 0
set CONFIG_USER_MICROWIN_HARRIERMOUSE 0
set CONFIG_USER_MICROWIN_PSIONMOUSE 0
set CONFIG_USER_MICROWIN_UCTSMOUSE 0
set CONFIG_USER_MICROWIN_DE2TSMOUSE 0
set CONFIG_USER_MICROWIN_CLEOMOUSE 0
set CONFIG_USER_MICROWIN_NOMOUSE 0
set CONFIG_USER_MICROWIN_TTYKBD 0
set CONFIG_USER_MICROWIN_SCANKBD 0
set CONFIG_USER_MICROWIN_PIPEKBD 0
set CONFIG_USER_MICROWIN_CLEOKBD 0
set CONFIG_USER_MICROWIN_NOKBD 0
set CONFIG_USER_MICROWIN_BIN_LANDMINE 0
set CONFIG_USER_MICROWIN_BIN_LAUNCHER 0
set CONFIG_USER_MICROWIN_BIN_MOVE 0
set CONFIG_USER_MICROWIN_BIN_MTERM 0
set CONFIG_USER_MICROWIN_BIN_MTEST 0
set CONFIG_USER_MICROWIN_BIN_MTEST2 0
set CONFIG_USER_MICROWIN_BIN_MUSERFD 0
set CONFIG_USER_MICROWIN_BIN_NANO_X 0
set CONFIG_USER_MICROWIN_BIN_NANOWM 0
set CONFIG_USER_MICROWIN_BIN_NPANEL 0
set CONFIG_USER_MICROWIN_BIN_NTERM 0
set CONFIG_USER_MICROWIN_BIN_NTEST 0
set CONFIG_USER_MICROWIN_BIN_NTETRIS 0
set CONFIG_USER_MICROWIN_BIN_NXCLOCK 0
set CONFIG_USER_MICROWIN_BIN_NXEV 0
set CONFIG_USER_MICROWIN_BIN_NXKBD 0
set CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS 0
set CONFIG_USER_MICROWIN_BIN_NXTERM 0
set CONFIG_USER_MICROWIN_BIN_NXVIEW 0
set CONFIG_USER_MICROWIN_BIN_SLIDER 0
set CONFIG_USER_MICROWIN_BIN_VNC 0
set CONFIG_USER_MICROWIN_BIN_WORLD 0
set CONFIG_USER_GAMES_ADVENT4 0
set CONFIG_USER_GAMES_DUNGEON 0
set CONFIG_USER_GAMES_RUBIK 0
set tmpvar_3 "(not set)"
set CONFIG_USER_RAMIMAGE_NONE 0
set CONFIG_USER_RAMIMAGE_RAMFS64 0
set CONFIG_USER_RAMIMAGE_RAMFS128 0
set CONFIG_USER_RAMIMAGE_RAMFS256 0
set CONFIG_USER_RAMIMAGE_RAMFS512 0
set CONFIG_USER_RAMIMAGE_RAMFS1024 0
set CONFIG_USER_RAMIMAGE_RAMFS2048 0
set CONFIG_USER_RAMIMAGE_RAMFS8192 0
set CONFIG_USER_CGI_GENERIC 0
set CONFIG_USER_CGIHTML 0
set CONFIG_USER_DEMO_BUTTON 0
set CONFIG_USER_DEMO_LATCH 0
set CONFIG_USER_DEMO_MORSE 0
set CONFIG_USER_DEMO_R2100 0
set CONFIG_LIB_DEBUG 0
set CONFIG_USER_DEBUG 0
set CONFIG_USER_TIMEPEG_TPT 0
set CONFIG_LIB_LIBCCMALLOC 0
set CONFIG_LIB_LIBLDAP 4
set CONFIG_LIB_LIBSSL 4
set CONFIG_PROP_LIBSNAPGEAR 4
set CONFIG_USER_MIGRATE_CONFIG 4
set CONFIG_LIB_LIBDES 4
set CONFIG_LIB_LIBAES 4
set CONFIG_PROP_LIBSNAPGEARPP 4
set CONFIG_USER_SGSNMPD_UDP 4
set CONFIG_LIB_ZLIB 4
set CONFIG_LIB_LIBGMP 4
set CONFIG_LIB_LIBPCAP 4
set CONFIG_LIB_LIBG 4
set CONFIG_LIB_LIBPNG 4
set CONFIG_LIB_LIBJPEG 4
set CONFIG_LIB_NCURSES 4
set CONFIG_MODULES 4
proc writeconfig {file1 file2} {
	set cfg [open $file1 w]
	set autocfg [open $file2 w]
	set notmod 1
	set notset 0
	puts $cfg "#"
	puts $cfg "# Automatically generated make config: don't edit"
	puts $cfg "#"
	puts $autocfg "/*"
	puts $autocfg " * Automatically generated C config: don't edit"
	puts $autocfg " */"
	puts $autocfg "#define AUTOCONF_INCLUDED"
	write_comment $cfg $autocfg "SnapGear Apps/Libs"
	global CONFIG_PROP_AUTHD_AUTHD
	global CONFIG_USER_IPTABLES_IPTABLES
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_AUTHD $CONFIG_PROP_AUTHD_AUTHD [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_CERBERIAN
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_CERBERIAN $CONFIG_PROP_AUTHD_CERBERIAN [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_USER
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_USER $CONFIG_PROP_AUTHD_USER [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_USERACL
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_USER == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_USERACL $CONFIG_PROP_AUTHD_USERACL [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_BWLIST
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_BWLIST $CONFIG_PROP_AUTHD_BWLIST [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_LOCALHOST
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_LOCALHOST $CONFIG_PROP_AUTHD_LOCALHOST [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_NASL
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_NASL $CONFIG_PROP_AUTHD_NASL [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_P2P
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_P2P $CONFIG_PROP_AUTHD_P2P [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_WWWLIST
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_WWWLIST $CONFIG_PROP_AUTHD_WWWLIST [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_ZONELABS
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_ZONELABS $CONFIG_PROP_AUTHD_ZONELABS [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_ZLAV
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_ZONELABS == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_ZLAV $CONFIG_PROP_AUTHD_ZLAV [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_DIRECT
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1) && ($CONFIG_PROP_AUTHD_ZONELABS == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_DIRECT $CONFIG_PROP_AUTHD_DIRECT [list $notmod] 2 }
	global CONFIG_PROP_AUTHD_TESTER
	if {($CONFIG_USER_IPTABLES_IPTABLES == 1) && ($CONFIG_PROP_AUTHD_AUTHD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_AUTHD_TESTER $CONFIG_PROP_AUTHD_TESTER [list $notmod] 2 }
	global CONFIG_PROP_AMAZON_BOA_LDAP
	write_tristate $cfg $autocfg CONFIG_PROP_AMAZON_BOA_LDAP $CONFIG_PROP_AMAZON_BOA_LDAP [list $notmod] 2
	global CONFIG_LIB_LIBLDAP
	global CONSTANT_Y
	if {($CONFIG_PROP_AMAZON_BOA_LDAP == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBLDAP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PROP_AMAZON_TIMERD
	write_tristate $cfg $autocfg CONFIG_PROP_AMAZON_TIMERD $CONFIG_PROP_AMAZON_TIMERD [list $notmod] 2
	global CONFIG_PROP_TAMS_CONCENTRATOR
	write_tristate $cfg $autocfg CONFIG_PROP_TAMS_CONCENTRATOR $CONFIG_PROP_TAMS_CONCENTRATOR [list $notmod] 2
	if {($CONFIG_PROP_TAMS_CONCENTRATOR == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBLDAP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PROP_CXEQ
	write_tristate $cfg $autocfg CONFIG_PROP_CXEQ $CONFIG_PROP_CXEQ [list $notmod] 2
	global CONFIG_PROP_FSTHRASH_FSTHRASH
	write_tristate $cfg $autocfg CONFIG_PROP_FSTHRASH_FSTHRASH $CONFIG_PROP_FSTHRASH_FSTHRASH [list $notmod] 2
	global CONFIG_USER_BUSYBOX_MD5SUM
	if {($CONFIG_PROP_FSTHRASH_FSTHRASH == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MD5SUM $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PROP_FLASHPROG
	write_tristate $cfg $autocfg CONFIG_PROP_FLASHPROG $CONFIG_PROP_FLASHPROG [list $notmod] 2
	global CONFIG_PROP_SQUID_MOUNT
	write_tristate $cfg $autocfg CONFIG_PROP_SQUID_MOUNT $CONFIG_PROP_SQUID_MOUNT [list $notmod] 2
	global CONFIG_USER_CGI
	write_tristate $cfg $autocfg CONFIG_USER_CGI $CONFIG_USER_CGI [list $notmod] 2
	global CONFIG_LIB_LIBSSL
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_CGI_ETH1_BRIDGE
	global CONFIG_USER_BR_BR
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_BR_BR == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_ETH1_BRIDGE $CONFIG_USER_CGI_ETH1_BRIDGE [list $notmod] 2 }
	global CONFIG_USER_CGI_NO_SERIAL
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_NO_SERIAL $CONFIG_USER_CGI_NO_SERIAL [list $notmod] 2 }
	global CONFIG_USER_CGI_NO_COM2
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_NO_COM2 $CONFIG_USER_CGI_NO_COM2 [list $notmod] 2 }
	global CONFIG_USER_CGI_COM2_MODEM
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1) && ($CONFIG_USER_CGI_NO_COM2 != 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_COM2_MODEM $CONFIG_USER_CGI_COM2_MODEM [list $notmod] 2 }
	global CONFIG_USER_CGI_NO_DIALIN
	if {($CONFIG_USER_CGI == 1) && ($CONFIG_USER_CGI_NO_SERIAL != 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_NO_DIALIN $CONFIG_USER_CGI_NO_DIALIN [list $notmod] 2 }
	global CONFIG_USER_CGI_DMZ
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_DMZ $CONFIG_USER_CGI_DMZ [list $notmod] 2 }
	global CONFIG_USER_CGI_LOAD_BALANCING
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_LOAD_BALANCING $CONFIG_USER_CGI_LOAD_BALANCING [list $notmod] 2 }
	global CONFIG_USER_CGI_VLAN
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_VLAN $CONFIG_USER_CGI_VLAN [list $notmod] 2 }
	global CONFIG_USER_CGI_BRIDGE
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_BRIDGE $CONFIG_USER_CGI_BRIDGE [list $notmod] 2 }
	global CONFIG_USER_CGI_LOOPBACK
	if {($CONFIG_USER_CGI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CGI_LOOPBACK $CONFIG_USER_CGI_LOOPBACK [list $notmod] 2 }
	global CONFIG_USER_CGI_DISKTEL
	write_tristate $cfg $autocfg CONFIG_USER_CGI_DISKTEL $CONFIG_USER_CGI_DISKTEL [list $notmod] 2
	global CONFIG_USER_FIREWALL_TOOLS
	write_tristate $cfg $autocfg CONFIG_USER_FIREWALL_TOOLS $CONFIG_USER_FIREWALL_TOOLS [list $notmod] 2
	global CONFIG_USER_FIREWALL_SCRIPT_ONLY
	if {($CONFIG_USER_FIREWALL_TOOLS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FIREWALL_SCRIPT_ONLY $CONFIG_USER_FIREWALL_SCRIPT_ONLY [list $notmod] 2 }
	global CONFIG_PROP_LIBSNAPGEAR
	global CONFIG_PROP_IFMOND_IFMOND
	if {($CONFIG_USER_CGI == 1 || $CONFIG_USER_FIREWALL_TOOLS == 1 || $CONFIG_PROP_IFMOND_IFMOND == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_LIBSNAPGEAR $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_MIGRATE_CONFIG
	if {($CONFIG_USER_CGI == 1 || $CONFIG_USER_FIREWALL_TOOLS == 1 || $CONFIG_PROP_IFMOND_IFMOND == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MIGRATE_CONFIG $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_AES_PERF
	write_tristate $cfg $autocfg CONFIG_USER_AES_PERF $CONFIG_USER_AES_PERF [list $notmod] 2
	write_tristate $cfg $autocfg CONFIG_USER_BR_BR $CONFIG_USER_BR_BR [list $notmod] 2
	global CONFIG_USER_CERBERIAN_CERBERIAN
	write_tristate $cfg $autocfg CONFIG_USER_CERBERIAN_CERBERIAN $CONFIG_USER_CERBERIAN_CERBERIAN [list $notmod] 2
	global CONFIG_USER_CERBERIAN_PROXYAUTH
	write_tristate $cfg $autocfg CONFIG_USER_CERBERIAN_PROXYAUTH $CONFIG_USER_CERBERIAN_PROXYAUTH [list $notmod] 2
	global CONFIG_USER_CERBERIAN_AUTHACL
	if {($CONFIG_USER_CERBERIAN_PROXYAUTH == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CERBERIAN_AUTHACL $CONFIG_USER_CERBERIAN_AUTHACL [list $notmod] 2 }
	global CONFIG_USER_CERBERIAN_CERBTEST
	write_tristate $cfg $autocfg CONFIG_USER_CERBERIAN_CERBTEST $CONFIG_USER_CERBERIAN_CERBTEST [list $notmod] 2
	global CONFIG_PROP_CMA_CMA
	write_tristate $cfg $autocfg CONFIG_PROP_CMA_CMA $CONFIG_PROP_CMA_CMA [list $notmod] 2
	global CONFIG_PROP_CRD_CRD
	write_tristate $cfg $autocfg CONFIG_PROP_CRD_CRD $CONFIG_PROP_CRD_CRD [list $notmod] 2
	global CONFIG_USER_DESTEST_DESTEST
	write_tristate $cfg $autocfg CONFIG_USER_DESTEST_DESTEST $CONFIG_USER_DESTEST_DESTEST [list $notmod] 2
	global CONFIG_LIB_LIBDES
	if {($CONFIG_USER_DESTEST_DESTEST == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBDES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_LIB_LIBAES
	if {($CONFIG_USER_DESTEST_DESTEST == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBAES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_DESTEST_DESPERF
	write_tristate $cfg $autocfg CONFIG_USER_DESTEST_DESPERF $CONFIG_USER_DESTEST_DESPERF [list $notmod] 2
	if {($CONFIG_USER_DESTEST_DESPERF == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBDES $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_USER_DESTEST_DESPERF == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBAES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_EMCTEST_EMCTEST
	write_tristate $cfg $autocfg CONFIG_USER_EMCTEST_EMCTEST $CONFIG_USER_EMCTEST_EMCTEST [list $notmod] 2
	global CONFIG_USER_FACTORY_FACTTEST
	write_tristate $cfg $autocfg CONFIG_USER_FACTORY_FACTTEST $CONFIG_USER_FACTORY_FACTTEST [list $notmod] 2
	if {($CONFIG_USER_FACTORY_FACTTEST == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBDES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_FACTORY_ETHER_INTERFACE
	if {($CONFIG_USER_FACTORY_FACTTEST == 1)} then {write_string $cfg $autocfg CONFIG_USER_FACTORY_ETHER_INTERFACE "$CONFIG_USER_FACTORY_ETHER_INTERFACE" $notmod }
	global CONFIG_USER_GDSD_GDSD
	write_tristate $cfg $autocfg CONFIG_USER_GDSD_GDSD $CONFIG_USER_GDSD_GDSD [list $notmod] 2
	global CONFIG_PROP_LIBSNAPGEARPP
	if {($CONFIG_USER_GDSD_GDSD == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_LIBSNAPGEARPP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_GDSD_GDSD_INET
	if {($CONFIG_USER_GDSD_GDSD == 1 || $CONFIG_USER_GDSD_GDSD == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_GDSD_GDSD_INET $CONFIG_USER_GDSD_GDSD_INET [list $CONFIG_USER_GDSD_GDSD] 2 }
	global CONFIG_USER_GRE_GRE
	write_tristate $cfg $autocfg CONFIG_USER_GRE_GRE $CONFIG_USER_GRE_GRE [list $notmod] 2
	global CONFIG_USER_IDB_IDB
	write_tristate $cfg $autocfg CONFIG_USER_IDB_IDB $CONFIG_USER_IDB_IDB [list $notmod] 2
	write_tristate $cfg $autocfg CONFIG_PROP_IFMOND_IFMOND $CONFIG_PROP_IFMOND_IFMOND [list $notmod] 2
	global CONFIG_USER_IPSEC_CONFIGURATOR
	write_tristate $cfg $autocfg CONFIG_USER_IPSEC_CONFIGURATOR $CONFIG_USER_IPSEC_CONFIGURATOR [list $notmod] 2
	global CONFIG_PROP_LOGD_LOGD
	write_tristate $cfg $autocfg CONFIG_PROP_LOGD_LOGD $CONFIG_PROP_LOGD_LOGD [list $notmod] 2
	global CONFIG_USER_REDIALER_REDIALER
	write_tristate $cfg $autocfg CONFIG_USER_REDIALER_REDIALER $CONFIG_USER_REDIALER_REDIALER [list $notmod] 2
	global CONFIG_USER_PKTDELAY_PKTDELAY
	write_tristate $cfg $autocfg CONFIG_USER_PKTDELAY_PKTDELAY $CONFIG_USER_PKTDELAY_PKTDELAY [list $notmod] 2
	if {($CONFIG_USER_PKTDELAY_PKTDELAY == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_LIBSNAPGEARPP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_PROTECT
	write_tristate $cfg $autocfg CONFIG_USER_PROTECT $CONFIG_USER_PROTECT [list $notmod] 2
	global CONFIG_USER_SETKEY_SETKEY
	write_tristate $cfg $autocfg CONFIG_USER_SETKEY_SETKEY $CONFIG_USER_SETKEY_SETKEY [list $notmod] 2
	global CONFIG_USER_IOD
	write_tristate $cfg $autocfg CONFIG_USER_IOD $CONFIG_USER_IOD [list $notmod] 2
	global CONFIG_USER_SWTEST_SWTEST
	write_tristate $cfg $autocfg CONFIG_USER_SWTEST_SWTEST $CONFIG_USER_SWTEST_SWTEST [list $notmod] 2
	global CONFIG_USER_MGMT_MGMT
	write_tristate $cfg $autocfg CONFIG_USER_MGMT_MGMT $CONFIG_USER_MGMT_MGMT [list $notmod] 2
	global CONFIG_USER_SGSNMPD_AGENT
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_AGENT $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_SGSNMPD_SNAPGEAR
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_SNAPGEAR $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PROP_REPORTD_REPORTD
	if {($CONFIG_USER_MGMT_MGMT == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_REPORTD_REPORTD $CONFIG_PROP_REPORTD_REPORTD [list $notmod] 2 }
	write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_AGENT $CONFIG_USER_SGSNMPD_AGENT [list $notmod] 2
	global CONFIG_USER_SGSNMPD_UDP
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_UDP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PROP_SGSNMPD_FULLMIB2
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {write_tristate $cfg $autocfg CONFIG_PROP_SGSNMPD_FULLMIB2 $CONFIG_PROP_SGSNMPD_FULLMIB2 [list $notmod] 2 }
	global CONFIG_USER_SGSNMPD_TCP
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_TCP $CONFIG_USER_SGSNMPD_TCP [list $notmod] 2 }
	global CONFIG_USER_SGSNMPD_TCPSSL
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_TCPSSL $CONFIG_USER_SGSNMPD_TCPSSL [list $notmod] 2 }
	if {($CONFIG_USER_SGSNMPD_AGENT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SGSNMPD_SNAPGEAR $CONFIG_USER_SGSNMPD_SNAPGEAR [list $notmod] 2 }
	if {($CONFIG_USER_SGSNMPD_TCPSSL == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PROP_WCL_WCL
	write_tristate $cfg $autocfg CONFIG_PROP_WCL_WCL $CONFIG_PROP_WCL_WCL [list $notmod] 2
	global CONFIG_USER_TINYTCL_TCLSH
	if {($CONFIG_PROP_WCL_WCL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYTCL_TCLSH $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_TQRECV_TQRECV
	write_tristate $cfg $autocfg CONFIG_USER_TQRECV_TQRECV $CONFIG_USER_TQRECV_TQRECV [list $notmod] 2
	global CONFIG_USER_UPNPD
	write_tristate $cfg $autocfg CONFIG_USER_UPNPD $CONFIG_USER_UPNPD [list $notmod] 2
	global CONFIG_PROP_VLAN_VLAN
	write_tristate $cfg $autocfg CONFIG_PROP_VLAN_VLAN $CONFIG_PROP_VLAN_VLAN [list $notmod] 2
	global CONFIG_USER_WINSD_WS
	write_tristate $cfg $autocfg CONFIG_USER_WINSD_WS $CONFIG_USER_WINSD_WS [list $notmod] 2
	write_comment $cfg $autocfg "Core Applications"
	global CONFIG_USER_INIT_INIT
	write_tristate $cfg $autocfg CONFIG_USER_INIT_INIT $CONFIG_USER_INIT_INIT [list $notmod] 2
	global CONFIG_USER_INIT_CONSOLE_SH
	write_tristate $cfg $autocfg CONFIG_USER_INIT_CONSOLE_SH $CONFIG_USER_INIT_CONSOLE_SH [list $notmod] 2
	global CONFIG_USER_INIT_RUN_FIREWALL
	write_tristate $cfg $autocfg CONFIG_USER_INIT_RUN_FIREWALL $CONFIG_USER_INIT_RUN_FIREWALL [list $notmod] 2
	global tmpvar_0
	
	if { $tmpvar_0 == "Sash" } then { write_tristate $cfg $autocfg CONFIG_USER_SASH_SH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_SASH_SH 0 [list $notmod] 2 }
	if { $tmpvar_0 == "minix-shell" } then { write_tristate $cfg $autocfg CONFIG_USER_SH_SH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_SH_SH 0 [list $notmod] 2 }
	if { $tmpvar_0 == "nwsh" } then { write_tristate $cfg $autocfg CONFIG_USER_NWSH_SH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_NWSH_SH 0 [list $notmod] 2 }
	if { $tmpvar_0 == "bash" } then { write_tristate $cfg $autocfg CONFIG_USER_BASH_BASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_BASH_BASH 0 [list $notmod] 2 }
	if { $tmpvar_0 == "Other" } then { write_tristate $cfg $autocfg CONFIG_USER_OTHER_SH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_OTHER_SH 0 [list $notmod] 2 }
	global CONFIG_USER_SASH_HISTORY
	global CONFIG_USER_SASH_SH
	if {($CONFIG_USER_SASH_SH == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SASH_HISTORY $CONFIG_USER_SASH_HISTORY [list $notmod] 2 }
	global CONFIG_USER_SASH_REBOOT
	write_tristate $cfg $autocfg CONFIG_USER_SASH_REBOOT $CONFIG_USER_SASH_REBOOT [list $notmod] 2
	global CONFIG_USER_SASH_REBOOT_SNAPGEAR
	global CONFIG_USER_BUSYBOX_BUSYBOX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1 && $CONFIG_USER_SASH_REBOOT != 1)} then {write_tristate $cfg $autocfg CONFIG_USER_SASH_REBOOT_SNAPGEAR $CONFIG_USER_SASH_REBOOT_SNAPGEAR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_KILLALL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1 && $CONFIG_USER_SASH_REBOOT != 1) && ($CONFIG_USER_SASH_REBOOT_SNAPGEAR)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_KILLALL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_SASH_SHUTDOWN
	write_tristate $cfg $autocfg CONFIG_USER_SASH_SHUTDOWN $CONFIG_USER_SASH_SHUTDOWN [list $notmod] 2
	global CONFIG_USER_INIT_EXPAND
	write_tristate $cfg $autocfg CONFIG_USER_INIT_EXPAND $CONFIG_USER_INIT_EXPAND [list $notmod] 2
	global CONFIG_USER_INIT_EXPAND_NOZEROES
	if {($CONFIG_USER_INIT_EXPAND == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_INIT_EXPAND_NOZEROES $CONFIG_USER_INIT_EXPAND_NOZEROES [list $notmod] 2 }
	global CONFIG_USER_VERSION_VERSION
	write_tristate $cfg $autocfg CONFIG_USER_VERSION_VERSION $CONFIG_USER_VERSION_VERSION [list $notmod] 2
	global CONFIG_USER_LOGIN_LOGIN
	write_tristate $cfg $autocfg CONFIG_USER_LOGIN_LOGIN $CONFIG_USER_LOGIN_LOGIN [list $notmod] 2
	global CONFIG_USER_OLD_PASSWORDS
	write_tristate $cfg $autocfg CONFIG_USER_OLD_PASSWORDS $CONFIG_USER_OLD_PASSWORDS [list $notmod] 2
	global CONFIG_USER_ONLY_ROOT
	write_tristate $cfg $autocfg CONFIG_USER_ONLY_ROOT $CONFIG_USER_ONLY_ROOT [list $notmod] 2
	global CONFIG_USER_AGETTY_AGETTY
	write_tristate $cfg $autocfg CONFIG_USER_AGETTY_AGETTY $CONFIG_USER_AGETTY_AGETTY [list $notmod] 2
	global CONFIG_USER_GETTYD_GETTYD
	write_tristate $cfg $autocfg CONFIG_USER_GETTYD_GETTYD $CONFIG_USER_GETTYD_GETTYD [list $notmod] 2
	global CONFIG_USER_LOGIN_PASSWD
	write_tristate $cfg $autocfg CONFIG_USER_LOGIN_PASSWD $CONFIG_USER_LOGIN_PASSWD [list $notmod] 2
	global CONFIG_USER_CRON_CRON
	write_tristate $cfg $autocfg CONFIG_USER_CRON_CRON $CONFIG_USER_CRON_CRON [list $notmod] 2
	write_comment $cfg $autocfg "Real Time Clock"
	global CONFIG_USER_HWCLOCK_HWCLOCK
	write_tristate $cfg $autocfg CONFIG_USER_HWCLOCK_HWCLOCK $CONFIG_USER_HWCLOCK_HWCLOCK [list $notmod] 2
	global CONFIG_USER_RTC_M41T11
	write_tristate $cfg $autocfg CONFIG_USER_RTC_M41T11 $CONFIG_USER_RTC_M41T11 [list $notmod] 2
	global CONFIG_USER_RTC_DS1302
	write_tristate $cfg $autocfg CONFIG_USER_RTC_DS1302 $CONFIG_USER_RTC_DS1302 [list $notmod] 2
	write_comment $cfg $autocfg "Vixie-cron"
	global CONFIG_USER_VIXIECRON_CRON
	write_tristate $cfg $autocfg CONFIG_USER_VIXIECRON_CRON $CONFIG_USER_VIXIECRON_CRON [list $notmod] 2
	global CONFIG_USER_VIXIECRON_CRONTAB
	write_tristate $cfg $autocfg CONFIG_USER_VIXIECRON_CRONTAB $CONFIG_USER_VIXIECRON_CRONTAB [list $notmod] 2
	write_comment $cfg $autocfg "at"
	global CONFIG_USER_AT_AT
	write_tristate $cfg $autocfg CONFIG_USER_AT_AT $CONFIG_USER_AT_AT [list $notmod] 2
	global CONFIG_USER_AT_ATD
	write_tristate $cfg $autocfg CONFIG_USER_AT_ATD $CONFIG_USER_AT_ATD [list $notmod] 2
	global CONFIG_USER_AT_ATRUN
	write_tristate $cfg $autocfg CONFIG_USER_AT_ATRUN $CONFIG_USER_AT_ATRUN [list $notmod] 2
	write_comment $cfg $autocfg "Library Configuration"
	write_comment $cfg $autocfg "Force build (Normally built when required)"
	global CONFIG_LIB_LIBAES_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBAES_FORCE $CONFIG_LIB_LIBAES_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBDES_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBDES_FORCE $CONFIG_LIB_LIBDES_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBSSL_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL_FORCE $CONFIG_LIB_LIBSSL_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBGMP_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBGMP_FORCE $CONFIG_LIB_LIBGMP_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBG_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBG_FORCE $CONFIG_LIB_LIBG_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBLDAP_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBLDAP_FORCE $CONFIG_LIB_LIBLDAP_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBPAM_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBPAM_FORCE $CONFIG_LIB_LIBPAM_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBPCAP_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBPCAP_FORCE $CONFIG_LIB_LIBPCAP_FORCE [list $notmod] 2
	global CONFIG_LIB_ZLIB_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_ZLIB_FORCE $CONFIG_LIB_ZLIB_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBATM_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBATM_FORCE $CONFIG_LIB_LIBATM_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBPNG_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBPNG_FORCE $CONFIG_LIB_LIBPNG_FORCE [list $notmod] 2
	global CONFIG_LIB_LIBJPEG_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_LIBJPEG_FORCE $CONFIG_LIB_LIBJPEG_FORCE [list $notmod] 2
	global CONFIG_LIB_NCURSES_FORCE
	write_tristate $cfg $autocfg CONFIG_LIB_NCURSES_FORCE $CONFIG_LIB_NCURSES_FORCE [list $notmod] 2
	write_comment $cfg $autocfg "Library Configuration"
	global CONFIG_LIB_UC_LIBC_TIMEZONE
	write_tristate $cfg $autocfg CONFIG_LIB_UC_LIBC_TIMEZONE $CONFIG_LIB_UC_LIBC_TIMEZONE [list $notmod] 2
	global CONFIG_LIB_UC_LIBC_TZ_FROM_FILE
	if {($CONFIG_LIB_UC_LIBC_TIMEZONE == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_UC_LIBC_TZ_FROM_FILE $CONFIG_LIB_UC_LIBC_TZ_FROM_FILE [list $notmod] 2 }
	write_comment $cfg $autocfg "Flash Tools"
	global CONFIG_USER_FLASHW_FLASHW
	write_tristate $cfg $autocfg CONFIG_USER_FLASHW_FLASHW $CONFIG_USER_FLASHW_FLASHW [list $notmod] 2
	global CONFIG_USER_NETFLASH_NETFLASH
	write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_NETFLASH $CONFIG_USER_NETFLASH_NETFLASH [list $notmod] 2
	global CONFIG_USER_FLASH_FLASH
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 && $CONFIG_USER_FLASHW_FLASHW == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FLASH_FLASH $CONFIG_USER_FLASH_FLASH [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_WITH_FTP
	global CONFIG_USER_RECOVER_RECOVER
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_WITH_FTP $CONFIG_USER_NETFLASH_WITH_FTP [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_VERSION
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_VERSION $CONFIG_USER_NETFLASH_VERSION [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_VERSION == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT $CONFIG_USER_NETFLASH_VERSION_ALLOW_CURRENT [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_VERSION == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER $CONFIG_USER_NETFLASH_VERSION_ALLOW_OLDER [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_DECOMPRESS
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_DECOMPRESS $CONFIG_USER_NETFLASH_DECOMPRESS [list $notmod] 2 }
	global CONFIG_LIB_ZLIB
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_DECOMPRESS == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_ZLIB $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_AUTODECOMPRESS
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_DECOMPRESS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_AUTODECOMPRESS $CONFIG_USER_NETFLASH_AUTODECOMPRESS [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_HMACMD5
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_HMACMD5 $CONFIG_USER_NETFLASH_HMACMD5 [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_HMACMD5_KEY
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_HMACMD5 == 1)} then {write_string $cfg $autocfg CONFIG_USER_NETFLASH_HMACMD5_KEY "$CONFIG_USER_NETFLASH_HMACMD5_KEY" $notmod }
	global CONFIG_USER_RECOVER_BIOS
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_RECOVER_BIOS $CONFIG_USER_RECOVER_BIOS [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_CRYPTO
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_CRYPTO $CONFIG_USER_NETFLASH_CRYPTO [list $notmod] 2 }
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBAES $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL
	if {($CONFIG_USER_NETFLASH_NETFLASH == 1 || $CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_NETFLASH_CRYPTO == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL $CONFIG_USER_NETFLASH_CRYPTO_OPTIONAL [list $notmod] 2 }
	global CONFIG_USER_RECOVER_STATIC_TFTP
	write_tristate $cfg $autocfg CONFIG_USER_RECOVER_STATIC_TFTP $CONFIG_USER_RECOVER_STATIC_TFTP [list $notmod] 2
	write_tristate $cfg $autocfg CONFIG_USER_RECOVER_RECOVER $CONFIG_USER_RECOVER_RECOVER [list $notmod] 2
	global CONFIG_USER_RECOVER_ETHERNET_INTERFACE
	if {($CONFIG_USER_RECOVER_RECOVER == 1)} then {write_string $cfg $autocfg CONFIG_USER_RECOVER_ETHERNET_INTERFACE "$CONFIG_USER_RECOVER_ETHERNET_INTERFACE" $notmod }
	global CONFIG_USER_RECOVER_USE_STATIC_SERVER
	if {($CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_RECOVER_STATIC_TFTP == 0)} then {write_tristate $cfg $autocfg CONFIG_USER_RECOVER_USE_STATIC_SERVER $CONFIG_USER_RECOVER_USE_STATIC_SERVER [list $notmod] 2 }
	global CONFIG_USER_RECOVER_STATIC_SERVER
	if {($CONFIG_USER_RECOVER_RECOVER == 1) && ($CONFIG_USER_RECOVER_STATIC_TFTP == 0) && ($CONFIG_USER_RECOVER_USE_STATIC_SERVER == 1)} then {write_string $cfg $autocfg CONFIG_USER_RECOVER_STATIC_SERVER "$CONFIG_USER_RECOVER_STATIC_SERVER" $notmod }
	global CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS
	if {($CONFIG_USER_RECOVER_RECOVER == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS $CONFIG_USER_RECOVER_PRESERVE_CONFIG_FS [list $notmod] 2 }
	global CONFIG_USER_BOOTTOOLS_FLASHLOADER
	write_tristate $cfg $autocfg CONFIG_USER_BOOTTOOLS_FLASHLOADER $CONFIG_USER_BOOTTOOLS_FLASHLOADER [list $notmod] 2
	global CONFIG_USER_BOOTTOOLS_HIMEMLOADER
	write_tristate $cfg $autocfg CONFIG_USER_BOOTTOOLS_HIMEMLOADER $CONFIG_USER_BOOTTOOLS_HIMEMLOADER [list $notmod] 2
	write_comment $cfg $autocfg "MTD utils"
	global CONFIG_USER_MTDUTILS
	write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS $CONFIG_USER_MTDUTILS [list $notmod] 2
	global CONFIG_USER_MTDUTILS_ERASE
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_ERASE $CONFIG_USER_MTDUTILS_ERASE [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_ERASEALL
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_ERASEALL $CONFIG_USER_MTDUTILS_ERASEALL [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_FTL_CHECK
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_FTL_CHECK $CONFIG_USER_MTDUTILS_FTL_CHECK [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_FTL_FORMAT
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_FTL_FORMAT $CONFIG_USER_MTDUTILS_FTL_FORMAT [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_MKFSJFFS
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_MKFSJFFS $CONFIG_USER_MTDUTILS_MKFSJFFS [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_MKFSJFFS2
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_MKFSJFFS2 $CONFIG_USER_MTDUTILS_MKFSJFFS2 [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_NFTLDUMP
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_NFTLDUMP $CONFIG_USER_MTDUTILS_NFTLDUMP [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_NFTL_FORMAT
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_NFTL_FORMAT $CONFIG_USER_MTDUTILS_NFTL_FORMAT [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_NANDDUMP
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_NANDDUMP $CONFIG_USER_MTDUTILS_NANDDUMP [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_NANDTEST
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_NANDTEST $CONFIG_USER_MTDUTILS_NANDTEST [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_NANDWRITE
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_NANDWRITE $CONFIG_USER_MTDUTILS_NANDWRITE [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_DOC_LOADBIOS
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_DOC_LOADBIOS $CONFIG_USER_MTDUTILS_DOC_LOADBIOS [list $CONFIG_USER_MTDUTILS] 2 }
	global CONFIG_USER_MTDUTILS_DOC_LOADIPL
	if {($CONFIG_USER_MTDUTILS == 1 || $CONFIG_USER_MTDUTILS == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_MTDUTILS_DOC_LOADIPL $CONFIG_USER_MTDUTILS_DOC_LOADIPL [list $CONFIG_USER_MTDUTILS] 2 }
	if {($CONFIG_USER_MTDUTILS == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_ZLIB $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "Filesystem Applications"
	global CONFIG_USER_FLATFSD_FLATFSD
	write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_FLATFSD $CONFIG_USER_FLATFSD_FLATFSD [list $notmod] 2
	global tmpvar_1
	if {($CONFIG_USER_FLATFSD_FLATFSD == 1)} then {
	if { $tmpvar_1 == "Auto" } then { write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_AUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_AUTO 0 [list $notmod] 2 }
	if { $tmpvar_1 == "Filesystem" } then { write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_USE_FLASH_FS 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_USE_FLASH_FS 0 [list $notmod] 2 }
	if { $tmpvar_1 == "Disklike" } then { write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_DISKLIKE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_FLATFSD_DISKLIKE 0 [list $notmod] 2 }}
	global CONFIG_USER_MOUNT_MOUNT
	write_tristate $cfg $autocfg CONFIG_USER_MOUNT_MOUNT $CONFIG_USER_MOUNT_MOUNT [list $notmod] 2
	global CONFIG_USER_MOUNT_UMOUNT
	write_tristate $cfg $autocfg CONFIG_USER_MOUNT_UMOUNT $CONFIG_USER_MOUNT_UMOUNT [list $notmod] 2
	global CONFIG_USER_FDISK_FDISK
	write_tristate $cfg $autocfg CONFIG_USER_FDISK_FDISK $CONFIG_USER_FDISK_FDISK [list $notmod] 2
	global CONFIG_USER_FDISK_SFDISK
	write_tristate $cfg $autocfg CONFIG_USER_FDISK_SFDISK $CONFIG_USER_FDISK_SFDISK [list $notmod] 2
	write_comment $cfg $autocfg "EXT2"
	global CONFIG_USER_E2FSPROGS_E2FSCK_E2FSCK
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_E2FSCK_E2FSCK $CONFIG_USER_E2FSPROGS_E2FSCK_E2FSCK [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_MKE2FS
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_MKE2FS $CONFIG_USER_E2FSPROGS_MISC_MKE2FS [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_BADBLOCKS
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_BADBLOCKS $CONFIG_USER_E2FSPROGS_MISC_BADBLOCKS [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_CHATTR
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_CHATTR $CONFIG_USER_E2FSPROGS_MISC_CHATTR [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_DUMPE2FS
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_DUMPE2FS $CONFIG_USER_E2FSPROGS_MISC_DUMPE2FS [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_E2LABEL
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_E2LABEL $CONFIG_USER_E2FSPROGS_MISC_E2LABEL [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_FSCK
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_FSCK $CONFIG_USER_E2FSPROGS_MISC_FSCK [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_LSATTR
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_LSATTR $CONFIG_USER_E2FSPROGS_MISC_LSATTR [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_MKLOST_FOUND
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_MKLOST_FOUND $CONFIG_USER_E2FSPROGS_MISC_MKLOST_FOUND [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_TUNE2FS
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_TUNE2FS $CONFIG_USER_E2FSPROGS_MISC_TUNE2FS [list $notmod] 2
	global CONFIG_USER_E2FSPROGS_MISC_UUIDGEN
	write_tristate $cfg $autocfg CONFIG_USER_E2FSPROGS_MISC_UUIDGEN $CONFIG_USER_E2FSPROGS_MISC_UUIDGEN [list $notmod] 2
	write_comment $cfg $autocfg "RESIERFS"
	global CONFIG_USER_REISERFSPROGS
	write_tristate $cfg $autocfg CONFIG_USER_REISERFSPROGS $CONFIG_USER_REISERFSPROGS [list $notmod] 2
	global CONFIG_USER_REISERFSPROGS_DEBUGRESIERFS
	write_tristate $cfg $autocfg CONFIG_USER_REISERFSPROGS_DEBUGRESIERFS $CONFIG_USER_REISERFSPROGS_DEBUGRESIERFS [list $notmod] 2
	global CONFIG_USER_REISERFSPROGS_MKREISERFS
	write_tristate $cfg $autocfg CONFIG_USER_REISERFSPROGS_MKREISERFS $CONFIG_USER_REISERFSPROGS_MKREISERFS [list $notmod] 2
	global CONFIG_USER_REISERFSPROGS_REISERFSCK
	write_tristate $cfg $autocfg CONFIG_USER_REISERFSPROGS_REISERFSCK $CONFIG_USER_REISERFSPROGS_REISERFSCK [list $notmod] 2
	global CONFIG_USER_REISERFSPROGS_RESIZE_REISERFS
	write_tristate $cfg $autocfg CONFIG_USER_REISERFSPROGS_RESIZE_REISERFS $CONFIG_USER_REISERFSPROGS_RESIZE_REISERFS [list $notmod] 2
	global CONFIG_USER_REISERFSPROGS_UNPACK
	write_tristate $cfg $autocfg CONFIG_USER_REISERFSPROGS_UNPACK $CONFIG_USER_REISERFSPROGS_UNPACK [list $notmod] 2
	write_comment $cfg $autocfg "SAMBA"
	global CONFIG_USER_SAMBA
	write_tristate $cfg $autocfg CONFIG_USER_SAMBA $CONFIG_USER_SAMBA [list $notmod] 2
	global CONFIG_USER_SAMBA_SMBD
	write_tristate $cfg $autocfg CONFIG_USER_SAMBA_SMBD $CONFIG_USER_SAMBA_SMBD [list $notmod] 2
	global CONFIG_USER_SAMBA_NMBD
	write_tristate $cfg $autocfg CONFIG_USER_SAMBA_NMBD $CONFIG_USER_SAMBA_NMBD [list $notmod] 2
	global CONFIG_USER_SAMBA_SMBMOUNT
	write_tristate $cfg $autocfg CONFIG_USER_SAMBA_SMBMOUNT $CONFIG_USER_SAMBA_SMBMOUNT [list $notmod] 2
	global CONFIG_USER_SAMBA_SMBUMOUNT
	write_tristate $cfg $autocfg CONFIG_USER_SAMBA_SMBUMOUNT $CONFIG_USER_SAMBA_SMBUMOUNT [list $notmod] 2
	write_comment $cfg $autocfg "SMBFS"
	global CONFIG_USER_SMBMOUNT_SMBMOUNT
	write_tristate $cfg $autocfg CONFIG_USER_SMBMOUNT_SMBMOUNT $CONFIG_USER_SMBMOUNT_SMBMOUNT [list $notmod] 2
	global CONFIG_USER_SMBMOUNT_SMBUMOUNT
	write_tristate $cfg $autocfg CONFIG_USER_SMBMOUNT_SMBUMOUNT $CONFIG_USER_SMBMOUNT_SMBUMOUNT [list $notmod] 2
	write_comment $cfg $autocfg "CRAMFS"
	global CONFIG_USER_CRAMFS_CRAMFSCK
	write_tristate $cfg $autocfg CONFIG_USER_CRAMFS_CRAMFSCK $CONFIG_USER_CRAMFS_CRAMFSCK [list $notmod] 2
	global CONFIG_USER_CRAMFS_MKCRAMFS
	write_tristate $cfg $autocfg CONFIG_USER_CRAMFS_MKCRAMFS $CONFIG_USER_CRAMFS_MKCRAMFS [list $notmod] 2
	if {($CONFIG_USER_CRAMFS_CRAMFSCK == 1 || $CONFIG_USER_CRAMFS_CRAMFSCK == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_ZLIB $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "Network Applications"
	global CONFIG_USER_ROUTE_ARP
	write_tristate $cfg $autocfg CONFIG_USER_ROUTE_ARP $CONFIG_USER_ROUTE_ARP [list $notmod] 2
	global CONFIG_USER_FNORD_HTTPD
	write_tristate $cfg $autocfg CONFIG_USER_FNORD_HTTPD $CONFIG_USER_FNORD_HTTPD [list $notmod] 2
	global CONFIG_USER_BOA_SRC_BOA
	if {($CONFIG_USER_FNORD_HTTPD != 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BOA_SRC_BOA $CONFIG_USER_BOA_SRC_BOA [list $notmod] 2 }
	global CONFIG_USER_BOA_WITH_SSL
	if {($CONFIG_USER_FNORD_HTTPD != 1) && ($CONFIG_USER_BOA_SRC_BOA == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BOA_WITH_SSL $CONFIG_USER_BOA_WITH_SSL [list $notmod] 2 }
	if {($CONFIG_USER_FNORD_HTTPD != 1) && ($CONFIG_USER_BOA_SRC_BOA == 1) && ($CONFIG_USER_BOA_WITH_SSL == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_BPALOGIN_BPALOGIN
	write_tristate $cfg $autocfg CONFIG_USER_BPALOGIN_BPALOGIN $CONFIG_USER_BPALOGIN_BPALOGIN [list $notmod] 2
	global CONFIG_USER_BR2684CTL_BR2684CTL
	write_tristate $cfg $autocfg CONFIG_USER_BR2684CTL_BR2684CTL $CONFIG_USER_BR2684CTL_BR2684CTL [list $notmod] 2
	global CONFIG_USER_BRCFG_BRCFG
	write_tristate $cfg $autocfg CONFIG_USER_BRCFG_BRCFG $CONFIG_USER_BRCFG_BRCFG [list $notmod] 2
	global CONFIG_USER_BRCTL_BRCTL
	write_tristate $cfg $autocfg CONFIG_USER_BRCTL_BRCTL $CONFIG_USER_BRCTL_BRCTL [list $notmod] 2
	global CONFIG_USER_DHCPCD_DHCPCD
	write_tristate $cfg $autocfg CONFIG_USER_DHCPCD_DHCPCD $CONFIG_USER_DHCPCD_DHCPCD [list $notmod] 2
	global CONFIG_USER_DHCPCD_LLIP
	if {($CONFIG_USER_DHCPCD_DHCPCD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_DHCPCD_LLIP $CONFIG_USER_DHCPCD_LLIP [list $notmod] 2 }
	global CONFIG_USER_DHCPCD_NEW_DHCPCD
	write_tristate $cfg $autocfg CONFIG_USER_DHCPCD_NEW_DHCPCD $CONFIG_USER_DHCPCD_NEW_DHCPCD [list $notmod] 2
	global CONFIG_USER_DHCPD_DHCPD
	write_tristate $cfg $autocfg CONFIG_USER_DHCPD_DHCPD $CONFIG_USER_DHCPD_DHCPD [list $notmod] 2
	global CONFIG_USER_DHCP_ISC_SERVER_DHCPD
	write_tristate $cfg $autocfg CONFIG_USER_DHCP_ISC_SERVER_DHCPD $CONFIG_USER_DHCP_ISC_SERVER_DHCPD [list $notmod] 2
	global CONFIG_USER_DHCP_ISC_CLIENT_DHCLIENT
	write_tristate $cfg $autocfg CONFIG_USER_DHCP_ISC_CLIENT_DHCLIENT $CONFIG_USER_DHCP_ISC_CLIENT_DHCLIENT [list $notmod] 2
	global CONFIG_USER_DHCP_ISC_RELAY_DHCRELAY
	write_tristate $cfg $autocfg CONFIG_USER_DHCP_ISC_RELAY_DHCRELAY $CONFIG_USER_DHCP_ISC_RELAY_DHCRELAY [list $notmod] 2
	global CONFIG_USER_DIALD_DIALD
	write_tristate $cfg $autocfg CONFIG_USER_DIALD_DIALD $CONFIG_USER_DIALD_DIALD [list $notmod] 2
	global CONFIG_USER_DISCARD_DISCARD
	write_tristate $cfg $autocfg CONFIG_USER_DISCARD_DISCARD $CONFIG_USER_DISCARD_DISCARD [list $notmod] 2
	global CONFIG_USER_DNSMASQ_DNSMASQ
	write_tristate $cfg $autocfg CONFIG_USER_DNSMASQ_DNSMASQ $CONFIG_USER_DNSMASQ_DNSMASQ [list $notmod] 2
	global CONFIG_USER_ETHATTACH_ETHATTACH
	write_tristate $cfg $autocfg CONFIG_USER_ETHATTACH_ETHATTACH $CONFIG_USER_ETHATTACH_ETHATTACH [list $notmod] 2
	global CONFIG_USER_EZIPUPDATE_EZIPUPDATE
	write_tristate $cfg $autocfg CONFIG_USER_EZIPUPDATE_EZIPUPDATE $CONFIG_USER_EZIPUPDATE_EZIPUPDATE [list $notmod] 2
	global CONFIG_USER_FTP_FTP_FTP
	write_tristate $cfg $autocfg CONFIG_USER_FTP_FTP_FTP $CONFIG_USER_FTP_FTP_FTP [list $notmod] 2
	global CONFIG_USER_FTPD_FTPD
	write_tristate $cfg $autocfg CONFIG_USER_FTPD_FTPD $CONFIG_USER_FTPD_FTPD [list $notmod] 2
	global CONFIG_USER_FREESWAN
	write_tristate $cfg $autocfg CONFIG_USER_FREESWAN $CONFIG_USER_FREESWAN [list $notmod] 2
	global CONFIG_USER_IPSEC_KEEPALIVE
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPSEC_KEEPALIVE $CONFIG_USER_IPSEC_KEEPALIVE [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_PLUTO_PLUTO
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_PLUTO_PLUTO $CONFIG_USER_FREESWAN_PLUTO_PLUTO [list $notmod] 2 }
	global CONFIG_LIB_LIBGMP
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FREESWAN_PLUTO_PLUTO == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBGMP $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FREESWAN_PLUTO_PLUTO == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBDES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_PLUTO_WHACK
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_PLUTO_WHACK $CONFIG_USER_FREESWAN_PLUTO_WHACK [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_UTILS_RANBITS
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_UTILS_RANBITS $CONFIG_USER_FREESWAN_UTILS_RANBITS [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_UTILS_RSASIGKEY
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_UTILS_RSASIGKEY $CONFIG_USER_FREESWAN_UTILS_RSASIGKEY [list $notmod] 2 }
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FREESWAN_UTILS_RSASIGKEY == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBGMP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_KLIPS_EROUTE
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_KLIPS_EROUTE $CONFIG_USER_FREESWAN_KLIPS_EROUTE [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG $CONFIG_USER_FREESWAN_KLIPS_KLIPSDEBUG [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_KLIPS_SPI
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_KLIPS_SPI $CONFIG_USER_FREESWAN_KLIPS_SPI [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_KLIPS_SPIGRP
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_KLIPS_SPIGRP $CONFIG_USER_FREESWAN_KLIPS_SPIGRP [list $notmod] 2 }
	global CONFIG_USER_FREESWAN_KLIPS_TNCFG
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FREESWAN_KLIPS_TNCFG $CONFIG_USER_FREESWAN_KLIPS_TNCFG [list $notmod] 2 }
	global CONFIG_USER_FSWCERT_FSWCERT
	if {($CONFIG_USER_FREESWAN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_FSWCERT_FSWCERT $CONFIG_USER_FSWCERT_FSWCERT [list $notmod] 2 }
	if {($CONFIG_USER_FREESWAN == 1) && ($CONFIG_USER_FSWCERT_FSWCERT == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_HTTPD_HTTPD
	write_tristate $cfg $autocfg CONFIG_USER_HTTPD_HTTPD $CONFIG_USER_HTTPD_HTTPD [list $notmod] 2
	global CONFIG_USER_IFATTACH_IFATTACH
	write_tristate $cfg $autocfg CONFIG_USER_IFATTACH_IFATTACH $CONFIG_USER_IFATTACH_IFATTACH [list $notmod] 2
	global CONFIG_USER_ROUTE_IFCONFIG
	write_tristate $cfg $autocfg CONFIG_USER_ROUTE_IFCONFIG $CONFIG_USER_ROUTE_IFCONFIG [list $notmod] 2
	global CONFIG_USER_INETD_INETD
	write_tristate $cfg $autocfg CONFIG_USER_INETD_INETD $CONFIG_USER_INETD_INETD [list $notmod] 2
	global CONFIG_USER_IPCHAINS_IPCHAINS
	write_tristate $cfg $autocfg CONFIG_USER_IPCHAINS_IPCHAINS $CONFIG_USER_IPCHAINS_IPCHAINS [list $notmod] 2
	global CONFIG_USER_IPFWADM_IPFWADM
	write_tristate $cfg $autocfg CONFIG_USER_IPFWADM_IPFWADM $CONFIG_USER_IPFWADM_IPFWADM [list $notmod] 2
	global CONFIG_USER_IPMASQADM_IPMASQADM
	write_tristate $cfg $autocfg CONFIG_USER_IPMASQADM_IPMASQADM $CONFIG_USER_IPMASQADM_IPMASQADM [list $notmod] 2
	global CONFIG_USER_IPPORTFW_IPPORTFW
	write_tristate $cfg $autocfg CONFIG_USER_IPPORTFW_IPPORTFW $CONFIG_USER_IPPORTFW_IPPORTFW [list $notmod] 2
	global CONFIG_USER_IPREDIR_IPREDIR
	write_tristate $cfg $autocfg CONFIG_USER_IPREDIR_IPREDIR $CONFIG_USER_IPREDIR_IPREDIR [list $notmod] 2
	global CONFIG_USER_IPROUTE2
	write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2 $CONFIG_USER_IPROUTE2 [list $notmod] 2
	global CONFIG_USER_IPROUTE2_TC_TC
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_TC_TC $CONFIG_USER_IPROUTE2_TC_TC [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_IFCFG
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_IFCFG $CONFIG_USER_IPROUTE2_IP_IFCFG [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_IP
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_IP $CONFIG_USER_IPROUTE2_IP_IP [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_ROUTEF
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_ROUTEF $CONFIG_USER_IPROUTE2_IP_ROUTEF [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_ROUTEL
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_ROUTEL $CONFIG_USER_IPROUTE2_IP_ROUTEL [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_RTACCT
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_RTACCT $CONFIG_USER_IPROUTE2_IP_RTACCT [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_RTMON
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_RTMON $CONFIG_USER_IPROUTE2_IP_RTMON [list $notmod] 2 }
	global CONFIG_USER_IPROUTE2_IP_RTPR
	if {($CONFIG_USER_IPROUTE2 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_IPROUTE2_IP_RTPR $CONFIG_USER_IPROUTE2_IP_RTPR [list $notmod] 2 }
	write_tristate $cfg $autocfg CONFIG_USER_IPTABLES_IPTABLES $CONFIG_USER_IPTABLES_IPTABLES [list $notmod] 2
	global CONFIG_USER_KENDIN_CONFIG
	write_tristate $cfg $autocfg CONFIG_USER_KENDIN_CONFIG $CONFIG_USER_KENDIN_CONFIG [list $notmod] 2
	global CONFIG_USER_KLAXON_KLAXON
	write_tristate $cfg $autocfg CONFIG_USER_KLAXON_KLAXON $CONFIG_USER_KLAXON_KLAXON [list $notmod] 2
	global CONFIG_USER_KLAXON_RFC931
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_RFC931 $CONFIG_USER_KLAXON_RFC931 [list $notmod] 2 }
	global CONFIG_USER_KLAXON_CHARGEN
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_CHARGEN $CONFIG_USER_KLAXON_CHARGEN [list $notmod] 2 }
	global CONFIG_USER_KLAXON_DISCARD
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_DISCARD $CONFIG_USER_KLAXON_DISCARD [list $notmod] 2 }
	global CONFIG_USER_KLAXON_ECHO
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_ECHO $CONFIG_USER_KLAXON_ECHO [list $notmod] 2 }
	global CONFIG_USER_KLAXON_FTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_FTP $CONFIG_USER_KLAXON_FTP [list $notmod] 2 }
	global CONFIG_USER_KLAXON_HTTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_HTTP $CONFIG_USER_KLAXON_HTTP [list $notmod] 2 }
	global CONFIG_USER_KLAXON_SMTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_SMTP $CONFIG_USER_KLAXON_SMTP [list $notmod] 2 }
	global CONFIG_USER_KLAXON_SNMP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_SNMP $CONFIG_USER_KLAXON_SNMP [list $notmod] 2 }
	global CONFIG_USER_KLAXON_SSH
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_SSH $CONFIG_USER_KLAXON_SSH [list $notmod] 2 }
	global CONFIG_USER_KLAXON_TELNET
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_TELNET $CONFIG_USER_KLAXON_TELNET [list $notmod] 2 }
	global CONFIG_USER_KLAXON_TFTP
	if {($CONFIG_USER_KLAXON_KLAXON == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_KLAXON_TFTP $CONFIG_USER_KLAXON_TFTP [list $notmod] 2 }
	global CONFIG_USER_L2TPD_L2TPD
	write_tristate $cfg $autocfg CONFIG_USER_L2TPD_L2TPD $CONFIG_USER_L2TPD_L2TPD [list $notmod] 2
	global CONFIG_USER_LOATTACH_LOATTACH
	write_tristate $cfg $autocfg CONFIG_USER_LOATTACH_LOATTACH $CONFIG_USER_LOATTACH_LOATTACH [list $notmod] 2
	global CONFIG_USER_SMTP_SMTPCLIENT
	write_tristate $cfg $autocfg CONFIG_USER_SMTP_SMTPCLIENT $CONFIG_USER_SMTP_SMTPCLIENT [list $notmod] 2
	global CONFIG_USER_MAIL_MAIL_IP
	write_tristate $cfg $autocfg CONFIG_USER_MAIL_MAIL_IP $CONFIG_USER_MAIL_MAIL_IP [list $notmod] 2
	global CONFIG_USER_MARADNS_MARADNS
	write_tristate $cfg $autocfg CONFIG_USER_MARADNS_MARADNS $CONFIG_USER_MARADNS_MARADNS [list $notmod] 2
	global CONFIG_USER_MINI_HTTPD_MINI_HTTPD
	write_tristate $cfg $autocfg CONFIG_USER_MINI_HTTPD_MINI_HTTPD $CONFIG_USER_MINI_HTTPD_MINI_HTTPD [list $notmod] 2
	global CONFIG_USER_MINI_HTTPD_WITH_SSL
	if {($CONFIG_USER_MINI_HTTPD_MINI_HTTPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MINI_HTTPD_WITH_SSL $CONFIG_USER_MINI_HTTPD_WITH_SSL [list $notmod] 2 }
	if {($CONFIG_USER_MINI_HTTPD_MINI_HTTPD == 1) && ($CONFIG_USER_MINI_HTTPD_WITH_SSL == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_MSNTP_MSNTP
	write_tristate $cfg $autocfg CONFIG_USER_MSNTP_MSNTP $CONFIG_USER_MSNTP_MSNTP [list $notmod] 2
	global CONFIG_USER_NESSUS_NASL
	write_tristate $cfg $autocfg CONFIG_USER_NESSUS_NASL $CONFIG_USER_NESSUS_NASL [list $notmod] 2
	global CONFIG_USER_ROUTE_NETSTAT
	write_tristate $cfg $autocfg CONFIG_USER_ROUTE_NETSTAT $CONFIG_USER_ROUTE_NETSTAT [list $notmod] 2
	global CONFIG_USER_NETSTAT_NAT_NETSTAT_NAT
	write_tristate $cfg $autocfg CONFIG_USER_NETSTAT_NAT_NETSTAT_NAT $CONFIG_USER_NETSTAT_NAT_NETSTAT_NAT [list $notmod] 2
	global CONFIG_USER_MARADNS_ZONESERVER
	write_tristate $cfg $autocfg CONFIG_USER_MARADNS_ZONESERVER $CONFIG_USER_MARADNS_ZONESERVER [list $notmod] 2
	global CONFIG_USER_ROUTE_MIITOOL
	write_tristate $cfg $autocfg CONFIG_USER_ROUTE_MIITOOL $CONFIG_USER_ROUTE_MIITOOL [list $notmod] 2
	global CONFIG_USER_NTPD_NTPD
	write_tristate $cfg $autocfg CONFIG_USER_NTPD_NTPD $CONFIG_USER_NTPD_NTPD [list $notmod] 2
	global CONFIG_USER_NTPD_NTPDC
	if {($CONFIG_USER_NTPD_NTPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_NTPD_NTPDC $CONFIG_USER_NTPD_NTPDC [list $notmod] 2 }
	global CONFIG_USER_NTPD_NTPDATE
	write_tristate $cfg $autocfg CONFIG_USER_NTPD_NTPDATE $CONFIG_USER_NTPD_NTPDATE [list $notmod] 2
	global CONFIG_USER_NTPD_NTPQ
	write_tristate $cfg $autocfg CONFIG_USER_NTPD_NTPQ $CONFIG_USER_NTPD_NTPQ [list $notmod] 2
	global CONFIG_USER_OPENSSL_APPS
	write_tristate $cfg $autocfg CONFIG_USER_OPENSSL_APPS $CONFIG_USER_OPENSSL_APPS [list $notmod] 2
	if {($CONFIG_USER_OPENSSL_APPS == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_PING_PING
	write_tristate $cfg $autocfg CONFIG_USER_PING_PING $CONFIG_USER_PING_PING [list $notmod] 2
	global CONFIG_USER_PLUG_PLUG
	write_tristate $cfg $autocfg CONFIG_USER_PLUG_PLUG $CONFIG_USER_PLUG_PLUG [list $notmod] 2
	global CONFIG_USER_PORTMAP_PORTMAP
	write_tristate $cfg $autocfg CONFIG_USER_PORTMAP_PORTMAP $CONFIG_USER_PORTMAP_PORTMAP [list $notmod] 2
	global CONFIG_USER_PPPD_PPPD_PPPD
	write_tristate $cfg $autocfg CONFIG_USER_PPPD_PPPD_PPPD $CONFIG_USER_PPPD_PPPD_PPPD [list $notmod] 2
	global CONFIG_USER_PPPD_WITH_MPPE
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_PPPD_WITH_MPPE $CONFIG_USER_PPPD_WITH_MPPE [list $notmod] 2 }
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1) && ($CONFIG_USER_PPPD_WITH_MPPE == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBDES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_PPPD_WITH_TACACS
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_PPPD_WITH_TACACS $CONFIG_USER_PPPD_WITH_TACACS [list $notmod] 2 }
	global CONFIG_USER_PPPD_WITH_RADIUS
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_PPPD_WITH_RADIUS $CONFIG_USER_PPPD_WITH_RADIUS [list $notmod] 2 }
	global CONFIG_USER_PPPD_WITH_PPPOE
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_PPPD_WITH_PPPOE $CONFIG_USER_PPPD_WITH_PPPOE [list $notmod] 2 }
	global CONFIG_USER_PPPD_PPPOE_RETRIES
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1) && ($CONFIG_USER_PPPD_WITH_PPPOE == 1)} then {write_int $cfg $autocfg CONFIG_USER_PPPD_PPPOE_RETRIES $CONFIG_USER_PPPD_PPPOE_RETRIES $notmod }
	global CONFIG_USER_PPPD_NO_AT_REDIRECTION
	if {($CONFIG_USER_PPPD_PPPD_PPPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_PPPD_NO_AT_REDIRECTION $CONFIG_USER_PPPD_NO_AT_REDIRECTION [list $notmod] 2 }
	global CONFIG_USER_PPTPD_PPTPCTRL
	write_tristate $cfg $autocfg CONFIG_USER_PPTPD_PPTPCTRL $CONFIG_USER_PPTPD_PPTPCTRL [list $notmod] 2
	global CONFIG_USER_PPTPD_PPTPD
	write_tristate $cfg $autocfg CONFIG_USER_PPTPD_PPTPD $CONFIG_USER_PPTPD_PPTPD [list $notmod] 2
	global CONFIG_USER_PPTP_CLIENT_PPTP
	write_tristate $cfg $autocfg CONFIG_USER_PPTP_CLIENT_PPTP $CONFIG_USER_PPTP_CLIENT_PPTP [list $notmod] 2
	global CONFIG_USER_PPTP_CLIENT_PPTP_CALLMGR
	write_tristate $cfg $autocfg CONFIG_USER_PPTP_CLIENT_PPTP_CALLMGR $CONFIG_USER_PPTP_CLIENT_PPTP_CALLMGR [list $notmod] 2
	global CONFIG_USER_RDATE_RDATE
	write_tristate $cfg $autocfg CONFIG_USER_RDATE_RDATE $CONFIG_USER_RDATE_RDATE [list $notmod] 2
	global CONFIG_USER_ROUTE_ROUTE
	write_tristate $cfg $autocfg CONFIG_USER_ROUTE_ROUTE $CONFIG_USER_ROUTE_ROUTE [list $notmod] 2
	global CONFIG_USER_ROUTED_ROUTED
	write_tristate $cfg $autocfg CONFIG_USER_ROUTED_ROUTED $CONFIG_USER_ROUTED_ROUTED [list $notmod] 2
	global CONFIG_USER_RP_PPPOE_PPPOE
	write_tristate $cfg $autocfg CONFIG_USER_RP_PPPOE_PPPOE $CONFIG_USER_RP_PPPOE_PPPOE [list $notmod] 2
	global CONFIG_USER_RP_PPPOE_PPPOE_SERVER
	if {($CONFIG_USER_RP_PPPOE_PPPOE == 1 || $CONFIG_USER_RP_PPPOE_PPPOE == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_RP_PPPOE_PPPOE_SERVER $CONFIG_USER_RP_PPPOE_PPPOE_SERVER [list $CONFIG_USER_RP_PPPOE_PPPOE] 2 }
	global CONFIG_USER_SETHDLC_SETHDLC
	write_tristate $cfg $autocfg CONFIG_USER_SETHDLC_SETHDLC $CONFIG_USER_SETHDLC_SETHDLC [list $notmod] 2
	global CONFIG_USER_SLATTACH_SLATTACH
	write_tristate $cfg $autocfg CONFIG_USER_SLATTACH_SLATTACH $CONFIG_USER_SLATTACH_SLATTACH [list $notmod] 2
	global CONFIG_USER_SNMPD_SNMPD
	write_tristate $cfg $autocfg CONFIG_USER_SNMPD_SNMPD $CONFIG_USER_SNMPD_SNMPD [list $notmod] 2
	global CONFIG_USER_SNORT_SNORT
	write_tristate $cfg $autocfg CONFIG_USER_SNORT_SNORT $CONFIG_USER_SNORT_SNORT [list $notmod] 2
	global CONFIG_USER_STUNNEL_STUNNEL
	write_tristate $cfg $autocfg CONFIG_USER_STUNNEL_STUNNEL $CONFIG_USER_STUNNEL_STUNNEL [list $notmod] 2
	global CONFIG_USER_SSLWRAP_SSLWRAP
	write_tristate $cfg $autocfg CONFIG_USER_SSLWRAP_SSLWRAP $CONFIG_USER_SSLWRAP_SSLWRAP [list $notmod] 2
	global CONFIG_USER_SQUID_SQUID
	write_tristate $cfg $autocfg CONFIG_USER_SQUID_SQUID $CONFIG_USER_SQUID_SQUID [list $notmod] 2
	global CONFIG_USER_SSH_SSH
	write_tristate $cfg $autocfg CONFIG_USER_SSH_SSH $CONFIG_USER_SSH_SSH [list $notmod] 2
	global CONFIG_USER_SSH_SSHD
	write_tristate $cfg $autocfg CONFIG_USER_SSH_SSHD $CONFIG_USER_SSH_SSHD [list $notmod] 2
	global CONFIG_USER_SSH_SSHKEYGEN
	write_tristate $cfg $autocfg CONFIG_USER_SSH_SSHKEYGEN $CONFIG_USER_SSH_SSHKEYGEN [list $notmod] 2
	if {($CONFIG_USER_SSH_SSHD == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_USER_SSH_SSHD == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_ZLIB $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_USER_SSH_SSH == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	if {("CONFIG_USER_SSH_SSHKEYGEN" == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBSSL $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_STP_STP
	write_tristate $cfg $autocfg CONFIG_USER_STP_STP $CONFIG_USER_STP_STP [list $notmod] 2
	global CONFIG_USER_TCPWRAP_TCPD
	write_tristate $cfg $autocfg CONFIG_USER_TCPWRAP_TCPD $CONFIG_USER_TCPWRAP_TCPD [list $notmod] 2
	global CONFIG_USER_TCPWRAP_MISCD
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TCPWRAP_MISCD $CONFIG_USER_TCPWRAP_MISCD [list $notmod] 2 }
	global CONFIG_USER_TCPWRAP_FINGER
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TCPWRAP_FINGER $CONFIG_USER_TCPWRAP_FINGER [list $notmod] 2 }
	global CONFIG_USER_TCPWRAP_TCPDMATCH
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TCPWRAP_TCPDMATCH $CONFIG_USER_TCPWRAP_TCPDMATCH [list $notmod] 2 }
	global CONFIG_UEER_TCPWRAP_TRYFROM
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {write_tristate $cfg $autocfg CONFIG_UEER_TCPWRAP_TRYFROM $CONFIG_UEER_TCPWRAP_TRYFROM [list $notmod] 2 }
	global CONFIG_USER_TCPWRAP_TCPDCHK
	if {($CONFIG_USER_TCPWRAP_TCPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TCPWRAP_TCPDCHK $CONFIG_USER_TCPWRAP_TCPDCHK [list $notmod] 2 }
	global CONFIG_USER_TCPBLAST_TCPBLAST
	write_tristate $cfg $autocfg CONFIG_USER_TCPBLAST_TCPBLAST $CONFIG_USER_TCPBLAST_TCPBLAST [list $notmod] 2
	global CONFIG_USER_TCPDUMP_TCPDUMP
	write_tristate $cfg $autocfg CONFIG_USER_TCPDUMP_TCPDUMP $CONFIG_USER_TCPDUMP_TCPDUMP [list $notmod] 2
	global CONFIG_LIB_LIBPCAP
	if {($CONFIG_USER_TCPDUMP_TCPDUMP == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBPCAP $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_TELNETD_TELNETD
	write_tristate $cfg $autocfg CONFIG_USER_TELNETD_TELNETD $CONFIG_USER_TELNETD_TELNETD [list $notmod] 2
	global CONFIG_USER_TELNET_TELNET
	write_tristate $cfg $autocfg CONFIG_USER_TELNET_TELNET $CONFIG_USER_TELNET_TELNET [list $notmod] 2
	global CONFIG_LIB_LIBG
	if {($CONFIG_USER_TELNET_TELNET == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBG $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_USER_TFTP_TFTP
	write_tristate $cfg $autocfg CONFIG_USER_TFTP_TFTP $CONFIG_USER_TFTP_TFTP [list $notmod] 2
	global CONFIG_USER_TFTPD_TFTPD
	write_tristate $cfg $autocfg CONFIG_USER_TFTPD_TFTPD $CONFIG_USER_TFTPD_TFTPD [list $notmod] 2
	global CONFIG_USER_TFTPD_TFTPD_LOW_SEC
	if {($CONFIG_USER_TFTPD_TFTPD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TFTPD_TFTPD_LOW_SEC $CONFIG_USER_TFTPD_TFTPD_LOW_SEC [list $notmod] 2 }
	global CONFIG_USER_THTTPD_THTTPD
	write_tristate $cfg $autocfg CONFIG_USER_THTTPD_THTTPD $CONFIG_USER_THTTPD_THTTPD [list $notmod] 2
	global CONFIG_USER_TRACEROUTE_TRACEROUTE
	write_tristate $cfg $autocfg CONFIG_USER_TRACEROUTE_TRACEROUTE $CONFIG_USER_TRACEROUTE_TRACEROUTE [list $notmod] 2
	global CONFIG_USER_UCDSNMP_SNMPD
	write_tristate $cfg $autocfg CONFIG_USER_UCDSNMP_SNMPD $CONFIG_USER_UCDSNMP_SNMPD [list $notmod] 2
	global CONFIG_USER_VCONFIG_VCONFIG
	write_tristate $cfg $autocfg CONFIG_USER_VCONFIG_VCONFIG $CONFIG_USER_VCONFIG_VCONFIG [list $notmod] 2
	global CONFIG_USER_VPNLED_VPNLED
	write_tristate $cfg $autocfg CONFIG_USER_VPNLED_VPNLED $CONFIG_USER_VPNLED_VPNLED [list $notmod] 2
	global CONFIG_USER_WGET
	write_tristate $cfg $autocfg CONFIG_USER_WGET $CONFIG_USER_WGET [list $notmod] 2
	global CONFIG_USER_ZEBRA_ZEBRA_ZEBRA
	write_tristate $cfg $autocfg CONFIG_USER_ZEBRA_ZEBRA_ZEBRA $CONFIG_USER_ZEBRA_ZEBRA_ZEBRA [list $notmod] 2
	global CONFIG_USER_ZEBRA_BGPD_BGPD
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_ZEBRA_BGPD_BGPD $CONFIG_USER_ZEBRA_BGPD_BGPD [list $notmod] 2 }
	global CONFIG_USER_ZEBRA_OSPFD_OSPFD
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_ZEBRA_OSPFD_OSPFD $CONFIG_USER_ZEBRA_OSPFD_OSPFD [list $notmod] 2 }
	global CONFIG_USER_ZEBRA_RIPD_RIPD
	if {($CONFIG_USER_ZEBRA_ZEBRA_ZEBRA == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_ZEBRA_RIPD_RIPD $CONFIG_USER_ZEBRA_RIPD_RIPD [list $notmod] 2 }
	write_comment $cfg $autocfg "Net-tools"
	global CONFIG_USER_NET_TOOLS_ARP
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_ARP $CONFIG_USER_NET_TOOLS_ARP [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_HOSTNAME
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_HOSTNAME $CONFIG_USER_NET_TOOLS_HOSTNAME [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_IFCONFIG
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_IFCONFIG $CONFIG_USER_NET_TOOLS_IFCONFIG [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_NAMEIF
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_NAMEIF $CONFIG_USER_NET_TOOLS_NAMEIF [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_NETSTAT
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_NETSTAT $CONFIG_USER_NET_TOOLS_NETSTAT [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_PLIPCONFIG
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_PLIPCONFIG $CONFIG_USER_NET_TOOLS_PLIPCONFIG [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_RARP
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_RARP $CONFIG_USER_NET_TOOLS_RARP [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_ROUTE
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_ROUTE $CONFIG_USER_NET_TOOLS_ROUTE [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_SLATTACH
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_SLATTACH $CONFIG_USER_NET_TOOLS_SLATTACH [list $notmod] 2
	global CONFIG_USER_NET_TOOLS_MII_TOOL
	write_tristate $cfg $autocfg CONFIG_USER_NET_TOOLS_MII_TOOL $CONFIG_USER_NET_TOOLS_MII_TOOL [list $notmod] 2
	write_comment $cfg $autocfg "Wireless-tools"
	global CONFIG_USER_WIRELESS_TOOLS
	write_tristate $cfg $autocfg CONFIG_USER_WIRELESS_TOOLS $CONFIG_USER_WIRELESS_TOOLS [list $notmod] 2
	global CONFIG_USER_WIRELESS_TOOLS_IWCONFIG
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WIRELESS_TOOLS_IWCONFIG $CONFIG_USER_WIRELESS_TOOLS_IWCONFIG [list $notmod] 2 }
	global CONFIG_USER_WIRELESS_TOOLS_IWGETID
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WIRELESS_TOOLS_IWGETID $CONFIG_USER_WIRELESS_TOOLS_IWGETID [list $notmod] 2 }
	global CONFIG_USER_WIRELESS_TOOLS_IWLIST
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WIRELESS_TOOLS_IWLIST $CONFIG_USER_WIRELESS_TOOLS_IWLIST [list $notmod] 2 }
	global CONFIG_USER_WIRELESS_TOOLS_IWPRIV
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WIRELESS_TOOLS_IWPRIV $CONFIG_USER_WIRELESS_TOOLS_IWPRIV [list $notmod] 2 }
	global CONFIG_USER_WIRELESS_TOOLS_IWSPY
	if {($CONFIG_USER_WIRELESS_TOOLS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WIRELESS_TOOLS_IWSPY $CONFIG_USER_WIRELESS_TOOLS_IWSPY [list $notmod] 2 }
	global CONFIG_USER_HOSTAP_HOSTAP
	write_tristate $cfg $autocfg CONFIG_USER_HOSTAP_HOSTAP $CONFIG_USER_HOSTAP_HOSTAP [list $notmod] 2
	global CONFIG_USER_HOSTAP_PCI
	if {($CONFIG_USER_HOSTAP_HOSTAP == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_HOSTAP_PCI $CONFIG_USER_HOSTAP_PCI [list $notmod] 2 }
	global CONFIG_USER_HOSTAP_CS
	if {($CONFIG_USER_HOSTAP_HOSTAP == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_HOSTAP_CS $CONFIG_USER_HOSTAP_CS [list $notmod] 2 }
	global CONFIG_USER_WLAN_NG
	write_tristate $cfg $autocfg CONFIG_USER_WLAN_NG $CONFIG_USER_WLAN_NG [list $notmod] 2
	global CONFIG_USER_WLAN_NG_WLAND
	if {($CONFIG_USER_WLAN_NG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WLAN_NG_WLAND $CONFIG_USER_WLAN_NG_WLAND [list $notmod] 2 }
	global CONFIG_USER_WLAN_NG_WLANCFG
	if {($CONFIG_USER_WLAN_NG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WLAN_NG_WLANCFG $CONFIG_USER_WLAN_NG_WLANCFG [list $notmod] 2 }
	global CONFIG_USER_WLAN_NG_WLANCTL
	if {($CONFIG_USER_WLAN_NG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_WLAN_NG_WLANCTL $CONFIG_USER_WLAN_NG_WLANCTL [list $notmod] 2 }
	write_comment $cfg $autocfg "Miscellaneous Applications"
	global CONFIG_USER_LANG_A60
	write_tristate $cfg $autocfg CONFIG_USER_LANG_A60 $CONFIG_USER_LANG_A60 [list $notmod] 2
	global CONFIG_USER_LANG_A60_EGS
	if {($CONFIG_USER_LANG_A60 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_LANG_A60_EGS $CONFIG_USER_LANG_A60_EGS [list $notmod] 2 }
	global CONFIG_USER_LAND_A60_TEST
	if {($CONFIG_USER_LANG_A60 == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_LAND_A60_TEST $CONFIG_USER_LAND_A60_TEST [list $notmod] 2 }
	global CONFIG_USER_CAL_CAL
	write_tristate $cfg $autocfg CONFIG_USER_CAL_CAL $CONFIG_USER_CAL_CAL [list $notmod] 2
	global CONFIG_USER_CHAT_CHAT
	write_tristate $cfg $autocfg CONFIG_USER_CHAT_CHAT $CONFIG_USER_CHAT_CHAT [list $notmod] 2
	global CONFIG_USER_CHAT_CHAT_NETWORK
	if {($CONFIG_USER_CHAT_CHAT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_CHAT_CHAT_NETWORK $CONFIG_USER_CHAT_CHAT_NETWORK [list $notmod] 2 }
	global CONFIG_USER_CKSUM_CKSUM
	write_tristate $cfg $autocfg CONFIG_USER_CKSUM_CKSUM $CONFIG_USER_CKSUM_CKSUM [list $notmod] 2
	global CONFIG_USER_CLOCK_CLOCK
	write_tristate $cfg $autocfg CONFIG_USER_CLOCK_CLOCK $CONFIG_USER_CLOCK_CLOCK [list $notmod] 2
	global CONFIG_USER_CPU_CPU
	write_tristate $cfg $autocfg CONFIG_USER_CPU_CPU $CONFIG_USER_CPU_CPU [list $notmod] 2
	global CONFIG_USER_CAL_DATE
	write_tristate $cfg $autocfg CONFIG_USER_CAL_DATE $CONFIG_USER_CAL_DATE [list $notmod] 2
	global CONFIG_USER_DHRYSTONE_DHRYSTONE
	write_tristate $cfg $autocfg CONFIG_USER_DHRYSTONE_DHRYSTONE $CONFIG_USER_DHRYSTONE_DHRYSTONE [list $notmod] 2
	global CONFIG_USER_DE2TSCAL_DE2TSCAL
	write_tristate $cfg $autocfg CONFIG_USER_DE2TSCAL_DE2TSCAL $CONFIG_USER_DE2TSCAL_DE2TSCAL [list $notmod] 2
	global CONFIG_USER_FROB_LED_FROB_LED
	write_tristate $cfg $autocfg CONFIG_USER_FROB_LED_FROB_LED $CONFIG_USER_FROB_LED_FROB_LED [list $notmod] 2
	global CONFIG_USER_GDBSERVER_GDBREPLAY
	write_tristate $cfg $autocfg CONFIG_USER_GDBSERVER_GDBREPLAY $CONFIG_USER_GDBSERVER_GDBREPLAY [list $notmod] 2
	global CONFIG_USER_GDBSERVER_GDBSERVER
	write_tristate $cfg $autocfg CONFIG_USER_GDBSERVER_GDBSERVER $CONFIG_USER_GDBSERVER_GDBSERVER [list $notmod] 2
	global CONFIG_USER_HD_HD
	write_tristate $cfg $autocfg CONFIG_USER_HD_HD $CONFIG_USER_HD_HD [list $notmod] 2
	global CONFIG_USER_LCD_LCD
	write_tristate $cfg $autocfg CONFIG_USER_LCD_LCD $CONFIG_USER_LCD_LCD [list $notmod] 2
	global CONFIG_USER_LEDCON_LEDCON
	write_tristate $cfg $autocfg CONFIG_USER_LEDCON_LEDCON $CONFIG_USER_LEDCON_LEDCON [list $notmod] 2
	global CONFIG_USER_LILO_LILO
	write_tristate $cfg $autocfg CONFIG_USER_LILO_LILO $CONFIG_USER_LILO_LILO [list $notmod] 2
	global CONFIG_USER_LISSA_LISSA
	write_tristate $cfg $autocfg CONFIG_USER_LISSA_LISSA $CONFIG_USER_LISSA_LISSA [list $notmod] 2
	global CONFIG_USER_USBCBI_USBCBI
	write_tristate $cfg $autocfg CONFIG_USER_USBCBI_USBCBI $CONFIG_USER_USBCBI_USBCBI [list $notmod] 2
	global CONFIG_USER_USBISO_USBISO
	write_tristate $cfg $autocfg CONFIG_USER_USBISO_USBISO $CONFIG_USER_USBISO_USBISO [list $notmod] 2
	global CONFIG_USER_MATH_TEST
	write_tristate $cfg $autocfg CONFIG_USER_MATH_TEST $CONFIG_USER_MATH_TEST [list $notmod] 2
	global CONFIG_USER_MAWK_AWK
	write_tristate $cfg $autocfg CONFIG_USER_MAWK_AWK $CONFIG_USER_MAWK_AWK [list $notmod] 2
	global CONFIG_USER_MYSQL
	write_tristate $cfg $autocfg CONFIG_USER_MYSQL $CONFIG_USER_MYSQL [list $notmod] 2
	global CONFIG_USER_MYSQL_CLIB
	if {($CONFIG_USER_MYSQL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MYSQL_CLIB $CONFIG_USER_MYSQL_CLIB [list $notmod] 2 }
	global CONFIG_USER_NULL_NULL
	write_tristate $cfg $autocfg CONFIG_USER_NULL_NULL $CONFIG_USER_NULL_NULL [list $notmod] 2
	global CONFIG_USER_PALMBOT_PALMBOT
	write_tristate $cfg $autocfg CONFIG_USER_PALMBOT_PALMBOT $CONFIG_USER_PALMBOT_PALMBOT [list $notmod] 2
	global CONFIG_USER_PCMCIA_CS
	write_tristate $cfg $autocfg CONFIG_USER_PCMCIA_CS $CONFIG_USER_PCMCIA_CS [list $notmod] 2
	global CONFIG_USER_PERL_PERL
	write_tristate $cfg $autocfg CONFIG_USER_PERL_PERL $CONFIG_USER_PERL_PERL [list $notmod] 2
	global CONFIG_USER_PYTHON_PYTHON
	write_tristate $cfg $autocfg CONFIG_USER_PYTHON_PYTHON $CONFIG_USER_PYTHON_PYTHON [list $notmod] 2
	global CONFIG_USER_READPROFILE_READPROFILE
	write_tristate $cfg $autocfg CONFIG_USER_READPROFILE_READPROFILE $CONFIG_USER_READPROFILE_READPROFILE [list $notmod] 2
	global CONFIG_USER_ROOTLOADER_ROOTLOADER
	write_tristate $cfg $autocfg CONFIG_USER_ROOTLOADER_ROOTLOADER $CONFIG_USER_ROOTLOADER_ROOTLOADER [list $notmod] 2
	global CONFIG_USER_SETSERIAL_SETSERIAL
	write_tristate $cfg $autocfg CONFIG_USER_SETSERIAL_SETSERIAL $CONFIG_USER_SETSERIAL_SETSERIAL [list $notmod] 2
	global CONFIG_USER_TRIPWIRE_SIGGEN
	write_tristate $cfg $autocfg CONFIG_USER_TRIPWIRE_SIGGEN $CONFIG_USER_TRIPWIRE_SIGGEN [list $notmod] 2
	global CONFIG_USER_STRACE_STRACE
	write_tristate $cfg $autocfg CONFIG_USER_STRACE_STRACE $CONFIG_USER_STRACE_STRACE [list $notmod] 2
	global CONFIG_USER_STTY_STTY
	write_tristate $cfg $autocfg CONFIG_USER_STTY_STTY $CONFIG_USER_STTY_STTY [list $notmod] 2
	global CONFIG_USER_TCSH_TCSH
	write_tristate $cfg $autocfg CONFIG_USER_TCSH_TCSH $CONFIG_USER_TCSH_TCSH [list $notmod] 2
	write_tristate $cfg $autocfg CONFIG_USER_TINYTCL_TCLSH $CONFIG_USER_TINYTCL_TCLSH [list $notmod] 2
	global CONFIG_USER_THREADDEMOS_THREADDEMOS
	write_tristate $cfg $autocfg CONFIG_USER_THREADDEMOS_THREADDEMOS $CONFIG_USER_THREADDEMOS_THREADDEMOS [list $notmod] 2
	global CONFIG_USER_TIP_TIP
	write_tristate $cfg $autocfg CONFIG_USER_TIP_TIP $CONFIG_USER_TIP_TIP [list $notmod] 2
	global CONFIG_USER_TRIPWIRE_TRIPWIRE
	write_tristate $cfg $autocfg CONFIG_USER_TRIPWIRE_TRIPWIRE $CONFIG_USER_TRIPWIRE_TRIPWIRE [list $notmod] 2
	global CONFIG_USER_LRZSZ_LRZSZ
	write_tristate $cfg $autocfg CONFIG_USER_LRZSZ_LRZSZ $CONFIG_USER_LRZSZ_LRZSZ [list $notmod] 2
	global CONFIG_USER_LRZSZ_LRZ
	if {($CONFIG_USER_LRZSZ_LRZSZ == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_LRZSZ_LRZ $CONFIG_USER_LRZSZ_LRZ [list $notmod] 2 }
	global CONFIG_USER_LRZSZ_LSZ
	if {($CONFIG_USER_LRZSZ_LRZSZ == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_LRZSZ_LSZ $CONFIG_USER_LRZSZ_LSZ [list $notmod] 2 }
	write_comment $cfg $autocfg "LIRC"
	global CONFIG_USER_LIRC
	write_tristate $cfg $autocfg CONFIG_USER_LIRC $CONFIG_USER_LIRC [list $notmod] 2
	global CONFIG_USER_LIRC_LIRCD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_LIRC_LIRCD $CONFIG_USER_LIRC_LIRCD [list $CONFIG_USER_LIRC] 2 }
	global CONFIG_USER_LIRC_IRRECORD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_LIRC_IRRECORD $CONFIG_USER_LIRC_IRRECORD [list $CONFIG_USER_LIRC] 2 }
	global CONFIG_USER_LIRC_LIRCMD
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_LIRC_LIRCMD $CONFIG_USER_LIRC_LIRCMD [list $CONFIG_USER_LIRC] 2 }
	global CONFIG_USER_LIRC_IREXEC
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_LIRC_IREXEC $CONFIG_USER_LIRC_IREXEC [list $CONFIG_USER_LIRC] 2 }
	global CONFIG_USER_LIRC_IRW
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_LIRC_IRW $CONFIG_USER_LIRC_IRW [list $CONFIG_USER_LIRC] 2 }
	global CONFIG_USER_LIRC_MODE2
	if {($CONFIG_USER_LIRC == 1 || $CONFIG_USER_LIRC == 4)} then {write_tristate $cfg $autocfg CONFIG_USER_LIRC_MODE2 $CONFIG_USER_LIRC_MODE2 [list $CONFIG_USER_LIRC] 2 }
	write_comment $cfg $autocfg "Editors"
	global CONFIG_USER_LEVEE_VI
	write_tristate $cfg $autocfg CONFIG_USER_LEVEE_VI $CONFIG_USER_LEVEE_VI [list $notmod] 2
	global CONFIG_USER_ELVISTINY_VI
	write_tristate $cfg $autocfg CONFIG_USER_ELVISTINY_VI $CONFIG_USER_ELVISTINY_VI [list $notmod] 2
	write_comment $cfg $autocfg "Audio tools"
	global CONFIG_USER_MP3PLAY_MP3PLAY
	write_tristate $cfg $autocfg CONFIG_USER_MP3PLAY_MP3PLAY $CONFIG_USER_MP3PLAY_MP3PLAY [list $notmod] 2
	global CONFIG_USER_OGGPLAY_OGG123
	write_tristate $cfg $autocfg CONFIG_USER_OGGPLAY_OGG123 $CONFIG_USER_OGGPLAY_OGG123 [list $notmod] 2
	global CONFIG_USER_OGGPLAY_EXAMPLE
	write_tristate $cfg $autocfg CONFIG_USER_OGGPLAY_EXAMPLE $CONFIG_USER_OGGPLAY_EXAMPLE [list $notmod] 2
	global CONFIG_USER_MUSICBOX_MUSICBOX
	write_tristate $cfg $autocfg CONFIG_USER_MUSICBOX_MUSICBOX $CONFIG_USER_MUSICBOX_MUSICBOX [list $notmod] 2
	global CONFIG_USER_PLAY_PLAY
	write_tristate $cfg $autocfg CONFIG_USER_PLAY_PLAY $CONFIG_USER_PLAY_PLAY [list $notmod] 2
	global CONFIG_USER_PLAY_TONE
	write_tristate $cfg $autocfg CONFIG_USER_PLAY_TONE $CONFIG_USER_PLAY_TONE [list $notmod] 2
	global CONFIG_USER_VPLAY_VPLAY
	write_tristate $cfg $autocfg CONFIG_USER_VPLAY_VPLAY $CONFIG_USER_VPLAY_VPLAY [list $notmod] 2
	global CONFIG_USER_VPLAY_VREC
	write_tristate $cfg $autocfg CONFIG_USER_VPLAY_VREC $CONFIG_USER_VPLAY_VREC [list $notmod] 2
	global CONFIG_USER_VPLAY_MIXER
	write_tristate $cfg $autocfg CONFIG_USER_VPLAY_MIXER $CONFIG_USER_VPLAY_MIXER [list $notmod] 2
	global CONFIG_USER_PLAYRT_PLAYRT
	write_tristate $cfg $autocfg CONFIG_USER_PLAYRT_PLAYRT $CONFIG_USER_PLAYRT_PLAYRT [list $notmod] 2
	write_comment $cfg $autocfg "Video tools"
	global CONFIG_USER_W3CAM_VIDCAT
	write_tristate $cfg $autocfg CONFIG_USER_W3CAM_VIDCAT $CONFIG_USER_W3CAM_VIDCAT [list $notmod] 2
	global CONFIG_USER_W3CAM_W3CAMD
	write_tristate $cfg $autocfg CONFIG_USER_W3CAM_W3CAMD $CONFIG_USER_W3CAM_W3CAMD [list $notmod] 2
	global CONFIG_LIB_LIBPNG
	if {($CONFIG_USER_W3CAM_VIDCAT == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBPNG $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_LIB_LIBJPEG
	if {($CONFIG_USER_W3CAM_VIDCAT == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_LIBJPEG $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "Fileutils tools"
	global CONFIG_USER_FILEUTILS_CAT
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_CAT $CONFIG_USER_FILEUTILS_CAT [list $notmod] 2
	global CONFIG_USER_FILEUTILS_CHGRP
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_CHGRP $CONFIG_USER_FILEUTILS_CHGRP [list $notmod] 2
	global CONFIG_USER_FILEUTILS_CHMOD
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_CHMOD $CONFIG_USER_FILEUTILS_CHMOD [list $notmod] 2
	global CONFIG_USER_FILEUTILS_CHOWN
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_CHOWN $CONFIG_USER_FILEUTILS_CHOWN [list $notmod] 2
	global CONFIG_USER_FILEUTILS_CMP
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_CMP $CONFIG_USER_FILEUTILS_CMP [list $notmod] 2
	global CONFIG_USER_FILEUTILS_CP
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_CP $CONFIG_USER_FILEUTILS_CP [list $notmod] 2
	global CONFIG_USER_FILEUTILS_DD
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_DD $CONFIG_USER_FILEUTILS_DD [list $notmod] 2
	global CONFIG_USER_FILEUTILS_GREP
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_GREP $CONFIG_USER_FILEUTILS_GREP [list $notmod] 2
	global CONFIG_USER_FILEUTILS_L
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_L $CONFIG_USER_FILEUTILS_L [list $notmod] 2
	global CONFIG_USER_FILEUTILS_LN
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_LN $CONFIG_USER_FILEUTILS_LN [list $notmod] 2
	global CONFIG_USER_FILEUTILS_LS
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_LS $CONFIG_USER_FILEUTILS_LS [list $notmod] 2
	global CONFIG_USER_FILEUTILS_MKDIR
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_MKDIR $CONFIG_USER_FILEUTILS_MKDIR [list $notmod] 2
	global CONFIG_USER_FILEUTILS_MKFIFO
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_MKFIFO $CONFIG_USER_FILEUTILS_MKFIFO [list $notmod] 2
	global CONFIG_USER_FILEUTILS_MKNOD
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_MKNOD $CONFIG_USER_FILEUTILS_MKNOD [list $notmod] 2
	global CONFIG_USER_FILEUTILS_MORE
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_MORE $CONFIG_USER_FILEUTILS_MORE [list $notmod] 2
	global CONFIG_USER_FILEUTILS_MV
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_MV $CONFIG_USER_FILEUTILS_MV [list $notmod] 2
	global CONFIG_USER_FILEUTILS_RM
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_RM $CONFIG_USER_FILEUTILS_RM [list $notmod] 2
	global CONFIG_USER_FILEUTILS_RMDIR
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_RMDIR $CONFIG_USER_FILEUTILS_RMDIR [list $notmod] 2
	global CONFIG_USER_FILEUTILS_SYNC
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_SYNC $CONFIG_USER_FILEUTILS_SYNC [list $notmod] 2
	global CONFIG_USER_FILEUTILS_TOUCH
	write_tristate $cfg $autocfg CONFIG_USER_FILEUTILS_TOUCH $CONFIG_USER_FILEUTILS_TOUCH [list $notmod] 2
	write_comment $cfg $autocfg "Shutils tools"
	global CONFIG_USER_SHUTILS_BASENAME
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_BASENAME $CONFIG_USER_SHUTILS_BASENAME [list $notmod] 2
	global CONFIG_USER_SHUTILS_DATE
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_DATE $CONFIG_USER_SHUTILS_DATE [list $notmod] 2
	global CONFIG_USER_SHUTILS_DIRNAME
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_DIRNAME $CONFIG_USER_SHUTILS_DIRNAME [list $notmod] 2
	global CONFIG_USER_SHUTILS_ECHO
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_ECHO $CONFIG_USER_SHUTILS_ECHO [list $notmod] 2
	global CONFIG_USER_SHUTILS_FALSE
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_FALSE $CONFIG_USER_SHUTILS_FALSE [list $notmod] 2
	global CONFIG_USER_SHUTILS_LOGNAME
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_LOGNAME $CONFIG_USER_SHUTILS_LOGNAME [list $notmod] 2
	global CONFIG_USER_SHUTILS_PRINTENV
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_PRINTENV $CONFIG_USER_SHUTILS_PRINTENV [list $notmod] 2
	global CONFIG_USER_SHUTILS_PWD
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_PWD $CONFIG_USER_SHUTILS_PWD [list $notmod] 2
	global CONFIG_USER_SHUTILS_TRUE
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_TRUE $CONFIG_USER_SHUTILS_TRUE [list $notmod] 2
	global CONFIG_USER_SHUTILS_UNAME
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_UNAME $CONFIG_USER_SHUTILS_UNAME [list $notmod] 2
	global CONFIG_USER_SHUTILS_WHICH
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_WHICH $CONFIG_USER_SHUTILS_WHICH [list $notmod] 2
	global CONFIG_USER_SHUTILS_WHOAMI
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_WHOAMI $CONFIG_USER_SHUTILS_WHOAMI [list $notmod] 2
	global CONFIG_USER_SHUTILS_YES
	write_tristate $cfg $autocfg CONFIG_USER_SHUTILS_YES $CONFIG_USER_SHUTILS_YES [list $notmod] 2
	write_comment $cfg $autocfg "Sysutils tools"
	global CONFIG_USER_SYSUTILS_REBOOT
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_REBOOT $CONFIG_USER_SYSUTILS_REBOOT [list $notmod] 2
	global CONFIG_USER_SYSUTILS_SHUTDOWN
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_SHUTDOWN $CONFIG_USER_SYSUTILS_SHUTDOWN [list $notmod] 2
	global CONFIG_USER_SYSUTILS_DF
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_DF $CONFIG_USER_SYSUTILS_DF [list $notmod] 2
	global CONFIG_USER_SYSUTILS_FREE
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_FREE $CONFIG_USER_SYSUTILS_FREE [list $notmod] 2
	global CONFIG_USER_SYSUTILS_HOSTNAME
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_HOSTNAME $CONFIG_USER_SYSUTILS_HOSTNAME [list $notmod] 2
	global CONFIG_USER_SYSUTILS_KILL
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_KILL $CONFIG_USER_SYSUTILS_KILL [list $notmod] 2
	global CONFIG_USER_SYSUTILS_PS
	write_tristate $cfg $autocfg CONFIG_USER_SYSUTILS_PS $CONFIG_USER_SYSUTILS_PS [list $notmod] 2
	write_comment $cfg $autocfg "Procps tools"
	global CONFIG_USER_PROCPS_FREE
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_FREE $CONFIG_USER_PROCPS_FREE [list $notmod] 2
	global CONFIG_USER_PROCPS_KILL
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_KILL $CONFIG_USER_PROCPS_KILL [list $notmod] 2
	global CONFIG_USER_PROCPS_PGREP
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_PGREP $CONFIG_USER_PROCPS_PGREP [list $notmod] 2
	global CONFIG_USER_PROCPS_PKILL
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_PKILL $CONFIG_USER_PROCPS_PKILL [list $notmod] 2
	global CONFIG_USER_PROCPS_PS
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_PS $CONFIG_USER_PROCPS_PS [list $notmod] 2
	global CONFIG_USER_PROCPS_SNICE
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_SNICE $CONFIG_USER_PROCPS_SNICE [list $notmod] 2
	global CONFIG_USER_PROCPS_SYSCTL
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_SYSCTL $CONFIG_USER_PROCPS_SYSCTL [list $notmod] 2
	global CONFIG_USER_PROCPS_TLOAD
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_TLOAD $CONFIG_USER_PROCPS_TLOAD [list $notmod] 2
	global CONFIG_USER_PROCPS_TOP
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_TOP $CONFIG_USER_PROCPS_TOP [list $notmod] 2
	global CONFIG_USER_PROCPS_UPTIME
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_UPTIME $CONFIG_USER_PROCPS_UPTIME [list $notmod] 2
	global CONFIG_USER_PROCPS_VMSTAT
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_VMSTAT $CONFIG_USER_PROCPS_VMSTAT [list $notmod] 2
	global CONFIG_USER_PROCPS_W
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_W $CONFIG_USER_PROCPS_W [list $notmod] 2
	global CONFIG_USER_PROCPS_WATCH
	write_tristate $cfg $autocfg CONFIG_USER_PROCPS_WATCH $CONFIG_USER_PROCPS_WATCH [list $notmod] 2
	global CONFIG_LIB_NCURSES
	if {($CONFIG_USER_PROCPS_TOP == 1)} then {write_tristate $cfg $autocfg CONFIG_LIB_NCURSES $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "PCI utilities"
	global CONFIG_USER_PCIUTILS_LSPCI
	write_tristate $cfg $autocfg CONFIG_USER_PCIUTILS_LSPCI $CONFIG_USER_PCIUTILS_LSPCI [list $notmod] 2
	global CONFIG_USER_PCIUTILS_SETPCI
	write_tristate $cfg $autocfg CONFIG_USER_PCIUTILS_SETPCI $CONFIG_USER_PCIUTILS_SETPCI [list $notmod] 2
	write_comment $cfg $autocfg "BusyBox"
	write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_BUSYBOX $CONFIG_USER_BUSYBOX_BUSYBOX [list $notmod] 2
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_comment $cfg $autocfg "Applets"}
	global CONFIG_USER_BUSYBOX_ADJTIMEX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_ADJTIMEX $CONFIG_USER_BUSYBOX_ADJTIMEX [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_AR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_AR $CONFIG_USER_BUSYBOX_AR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_BASENAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_BASENAME $CONFIG_USER_BUSYBOX_BASENAME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CAT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CAT $CONFIG_USER_BUSYBOX_CAT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CHGRP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CHGRP $CONFIG_USER_BUSYBOX_CHGRP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CHMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CHMOD $CONFIG_USER_BUSYBOX_CHMOD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CHOWN
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CHOWN $CONFIG_USER_BUSYBOX_CHOWN [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CHROOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CHROOT $CONFIG_USER_BUSYBOX_CHROOT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CLEAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CLEAR $CONFIG_USER_BUSYBOX_CLEAR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CMP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CMP $CONFIG_USER_BUSYBOX_CMP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CP $CONFIG_USER_BUSYBOX_CP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_CUT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_CUT $CONFIG_USER_BUSYBOX_CUT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DATE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DATE $CONFIG_USER_BUSYBOX_DATE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DC $CONFIG_USER_BUSYBOX_DC [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DD $CONFIG_USER_BUSYBOX_DD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DF $CONFIG_USER_BUSYBOX_DF [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DIRNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DIRNAME $CONFIG_USER_BUSYBOX_DIRNAME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DMESG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DMESG $CONFIG_USER_BUSYBOX_DMESG [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DUTMP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DUTMP $CONFIG_USER_BUSYBOX_DUTMP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_DU
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_DU $CONFIG_USER_BUSYBOX_DU [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_ECHO
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_ECHO $CONFIG_USER_BUSYBOX_ECHO [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_ENV
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_ENV $CONFIG_USER_BUSYBOX_ENV [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_EXPR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_EXPR $CONFIG_USER_BUSYBOX_EXPR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FIND
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FIND $CONFIG_USER_BUSYBOX_FIND [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FIND_TYPE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FIND_TYPE $CONFIG_USER_BUSYBOX_FIND_TYPE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FIND_PERM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FIND_PERM $CONFIG_USER_BUSYBOX_FIND_PERM [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FIND_MTIME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_FIND == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FIND_MTIME $CONFIG_USER_BUSYBOX_FIND_MTIME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FREE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FREE $CONFIG_USER_BUSYBOX_FREE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FREERAMDISK
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FREERAMDISK $CONFIG_USER_BUSYBOX_FREERAMDISK [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FSCK_MINIX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FSCK_MINIX $CONFIG_USER_BUSYBOX_FSCK_MINIX [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_GETOPT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_GETOPT $CONFIG_USER_BUSYBOX_GETOPT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_GREP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_GREP $CONFIG_USER_BUSYBOX_GREP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_GREP_CONTEXT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_GREP == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_GREP_CONTEXT $CONFIG_USER_BUSYBOX_GREP_CONTEXT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_GREP == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS $CONFIG_USER_BUSYBOX_GREP_EGREP_ALIAS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_GUNZIP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_GUNZIP $CONFIG_USER_BUSYBOX_GUNZIP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_GZIP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_GZIP $CONFIG_USER_BUSYBOX_GZIP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_HALT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_HALT $CONFIG_USER_BUSYBOX_HALT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_HEAD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_HEAD $CONFIG_USER_BUSYBOX_HEAD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_HOSTNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_HOSTNAME $CONFIG_USER_BUSYBOX_HOSTNAME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_ID
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_ID $CONFIG_USER_BUSYBOX_ID [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_IFCONFIG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_IFCONFIG $CONFIG_USER_BUSYBOX_IFCONFIG [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_IFCONFIG_STATUS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_IFCONFIG_STATUS $CONFIG_USER_BUSYBOX_IFCONFIG_STATUS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_IFCONFIG_SLIP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_IFCONFIG_SLIP $CONFIG_USER_BUSYBOX_IFCONFIG_SLIP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_IFCONFIG_HW
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_IFCONFIG_HW $CONFIG_USER_BUSYBOX_IFCONFIG_HW [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_IFCONFIG == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ $CONFIG_USER_BUSYBOX_IFCONFIG_MEMSTART_IOADDR_IRQ [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_INIT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_INIT $CONFIG_USER_BUSYBOX_INIT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_USE_INITTAB
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_USE_INITTAB $CONFIG_USER_BUSYBOX_USE_INITTAB [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LINUXRC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LINUXRC $CONFIG_USER_BUSYBOX_LINUXRC [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_INIT_COREDUMPS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INIT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_INIT_COREDUMPS $CONFIG_USER_BUSYBOX_INIT_COREDUMPS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_INSMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_INSMOD $CONFIG_USER_BUSYBOX_INSMOD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_INSMOD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM $CONFIG_USER_BUSYBOX_INSMOD_LOADINKMEM [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_KILL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_KILL $CONFIG_USER_BUSYBOX_KILL [list $notmod] 2 }
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_KILLALL $CONFIG_USER_BUSYBOX_KILLALL [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_KLOGD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_KLOGD $CONFIG_USER_BUSYBOX_KLOGD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LENGTH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LENGTH $CONFIG_USER_BUSYBOX_LENGTH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LN
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LN $CONFIG_USER_BUSYBOX_LN [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LOGGER
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LOGGER $CONFIG_USER_BUSYBOX_LOGGER [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LOGNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LOGNAME $CONFIG_USER_BUSYBOX_LOGNAME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS $CONFIG_USER_BUSYBOX_LS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS_USERNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS_USERNAME $CONFIG_USER_BUSYBOX_LS_USERNAME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS_TIMESTAMPS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS_TIMESTAMPS $CONFIG_USER_BUSYBOX_LS_TIMESTAMPS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS_FILETYPES
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS_FILETYPES $CONFIG_USER_BUSYBOX_LS_FILETYPES [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS_SORTFILES
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS_SORTFILES $CONFIG_USER_BUSYBOX_LS_SORTFILES [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS_RECURSIVE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS_RECURSIVE $CONFIG_USER_BUSYBOX_LS_RECURSIVE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_LS == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS $CONFIG_USER_BUSYBOX_LS_FOLLOWLINKS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LSMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LSMOD $CONFIG_USER_BUSYBOX_LSMOD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MAKEDEVS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MAKEDEVS $CONFIG_USER_BUSYBOX_MAKEDEVS [list $notmod] 2 }
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MD5SUM $CONFIG_USER_BUSYBOX_MD5SUM [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MKDIR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MKDIR $CONFIG_USER_BUSYBOX_MKDIR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MKFS_MINIX
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MKFS_MINIX $CONFIG_USER_BUSYBOX_MKFS_MINIX [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MKNOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MKNOD $CONFIG_USER_BUSYBOX_MKNOD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MKTEMP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MKTEMP $CONFIG_USER_BUSYBOX_MKTEMP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MODPROBE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MODPROBE $CONFIG_USER_BUSYBOX_MODPROBE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MORE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MORE $CONFIG_USER_BUSYBOX_MORE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MOUNT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MOUNT $CONFIG_USER_BUSYBOX_MOUNT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MOUNT_LOOP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MOUNT_LOOP $CONFIG_USER_BUSYBOX_MOUNT_LOOP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MTAB_SUPPORT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MTAB_SUPPORT $CONFIG_USER_BUSYBOX_MTAB_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_NFSMOUNT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_MOUNT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_NFSMOUNT $CONFIG_USER_BUSYBOX_NFSMOUNT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MV
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MV $CONFIG_USER_BUSYBOX_MV [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_NC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_NC $CONFIG_USER_BUSYBOX_NC [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_NSLOOKUP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_NSLOOKUP $CONFIG_USER_BUSYBOX_NSLOOKUP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_PIDOF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_PIDOF $CONFIG_USER_BUSYBOX_PIDOF [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_PING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_PING $CONFIG_USER_BUSYBOX_PING [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FANCY_PING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_PING == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FANCY_PING $CONFIG_USER_BUSYBOX_FANCY_PING [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_PIVOT_ROOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_PIVOT_ROOT $CONFIG_USER_BUSYBOX_PIVOT_ROOT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_POWEROFF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_POWEROFF $CONFIG_USER_BUSYBOX_POWEROFF [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_PRINTF
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_PRINTF $CONFIG_USER_BUSYBOX_PRINTF [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_PS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_PS $CONFIG_USER_BUSYBOX_PS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_PWD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_PWD $CONFIG_USER_BUSYBOX_PWD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RDATE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RDATE $CONFIG_USER_BUSYBOX_RDATE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_READLINK
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_READLINK $CONFIG_USER_BUSYBOX_READLINK [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_REBOOT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_REBOOT $CONFIG_USER_BUSYBOX_REBOOT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RENICE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RENICE $CONFIG_USER_BUSYBOX_RENICE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RESET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RESET $CONFIG_USER_BUSYBOX_RESET [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RM
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RM $CONFIG_USER_BUSYBOX_RM [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RMDIR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RMDIR $CONFIG_USER_BUSYBOX_RMDIR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RMMOD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RMMOD $CONFIG_USER_BUSYBOX_RMMOD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_ROUTE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_ROUTE $CONFIG_USER_BUSYBOX_ROUTE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_RPM2CPIO
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_RPM2CPIO $CONFIG_USER_BUSYBOX_RPM2CPIO [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SED
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SED $CONFIG_USER_BUSYBOX_SED [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SHELL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SHELL $CONFIG_USER_BUSYBOX_SHELL [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_ASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_ASH $CONFIG_USER_BUSYBOX_ASH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_IS_ASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_IS_ASH $CONFIG_USER_BUSYBOX_SH_IS_ASH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_HUSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_HUSH $CONFIG_USER_BUSYBOX_HUSH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_IS_HUSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_IS_HUSH $CONFIG_USER_BUSYBOX_SH_IS_HUSH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_LASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_LASH $CONFIG_USER_BUSYBOX_LASH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_IS_LASH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_IS_LASH $CONFIG_USER_BUSYBOX_SH_IS_LASH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MSH $CONFIG_USER_BUSYBOX_MSH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_IS_MSH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_IS_MSH $CONFIG_USER_BUSYBOX_SH_IS_MSH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_COMMAND_EDITING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_COMMAND_EDITING $CONFIG_USER_BUSYBOX_COMMAND_EDITING [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TAB_COMPLETION
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TAB_COMPLETION $CONFIG_USER_BUSYBOX_TAB_COMPLETION [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_USERNAME_COMPLETION
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_USERNAME_COMPLETION $CONFIG_USER_BUSYBOX_USERNAME_COMPLETION [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL $CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1) && ($CONFIG_USER_BUSYBOX_SH_STANDALONE_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN $CONFIG_USER_BUSYBOX_SH_APPLETS_ALWAYS_WIN [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SHELL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT $CONFIG_USER_BUSYBOX_SH_FANCY_PROMPT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SLEEP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SLEEP $CONFIG_USER_BUSYBOX_SLEEP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SORT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SORT $CONFIG_USER_BUSYBOX_SORT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SORT_REVERSE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SORT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SORT_REVERSE $CONFIG_USER_BUSYBOX_SORT_REVERSE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SORT_UNIQUE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SORT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SORT_UNIQUE $CONFIG_USER_BUSYBOX_SORT_UNIQUE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_STTY
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_STTY $CONFIG_USER_BUSYBOX_STTY [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SYNC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SYNC $CONFIG_USER_BUSYBOX_SYNC [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_SYSLOGD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_SYSLOGD $CONFIG_USER_BUSYBOX_SYSLOGD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_REMOTE_LOG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SYSLOGD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_REMOTE_LOG $CONFIG_USER_BUSYBOX_REMOTE_LOG [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_IPC_SYSLOG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_SYSLOGD == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_IPC_SYSLOG $CONFIG_USER_BUSYBOX_IPC_SYSLOG [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TAIL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TAIL $CONFIG_USER_BUSYBOX_TAIL [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_FANCY_TAIL
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAIL == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_FANCY_TAIL $CONFIG_USER_BUSYBOX_FANCY_TAIL [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TAR $CONFIG_USER_BUSYBOX_TAR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TAR_CREATE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAR == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TAR_CREATE $CONFIG_USER_BUSYBOX_TAR_CREATE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TAR_EXCLUDE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TAR == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TAR_EXCLUDE $CONFIG_USER_BUSYBOX_TAR_EXCLUDE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TEE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TEE $CONFIG_USER_BUSYBOX_TEE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TELNET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TELNET $CONFIG_USER_BUSYBOX_TELNET [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TELNET_TTYPE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TELNET == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TELNET_TTYPE $CONFIG_USER_BUSYBOX_TELNET_TTYPE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TEST
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TEST $CONFIG_USER_BUSYBOX_TEST [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TFTP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TFTP $CONFIG_USER_BUSYBOX_TFTP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TFTP_PUT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TFTP == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TFTP_PUT $CONFIG_USER_BUSYBOX_TFTP_PUT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TFTP_GET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_TFTP == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TFTP_GET $CONFIG_USER_BUSYBOX_TFTP_GET [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TOUCH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TOUCH $CONFIG_USER_BUSYBOX_TOUCH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TR $CONFIG_USER_BUSYBOX_TR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TRACEROUTE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TRACEROUTE $CONFIG_USER_BUSYBOX_TRACEROUTE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TRUE_FALSE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TRUE_FALSE $CONFIG_USER_BUSYBOX_TRUE_FALSE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_TTY
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_TTY $CONFIG_USER_BUSYBOX_TTY [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UMOUNT
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UMOUNT $CONFIG_USER_BUSYBOX_UMOUNT [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_MOUNT_FORCE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_UMOUNT == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_MOUNT_FORCE $CONFIG_USER_BUSYBOX_MOUNT_FORCE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UNAME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UNAME $CONFIG_USER_BUSYBOX_UNAME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UNIQ
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UNIQ $CONFIG_USER_BUSYBOX_UNIQ [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UNIX2DOS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UNIX2DOS $CONFIG_USER_BUSYBOX_UNIX2DOS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UPTIME
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UPTIME $CONFIG_USER_BUSYBOX_UPTIME [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_USLEEP
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_USLEEP $CONFIG_USER_BUSYBOX_USLEEP [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UUDECODE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UUDECODE $CONFIG_USER_BUSYBOX_UUDECODE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_UUENCODE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_UUENCODE $CONFIG_USER_BUSYBOX_UUENCODE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI $CONFIG_USER_BUSYBOX_VI [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_COLON
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_COLON $CONFIG_USER_BUSYBOX_VI_COLON [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_YANKMARK
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_YANKMARK $CONFIG_USER_BUSYBOX_VI_YANKMARK [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_SEARCH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_SEARCH $CONFIG_USER_BUSYBOX_VI_SEARCH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_USE_SIGNALS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_USE_SIGNALS $CONFIG_USER_BUSYBOX_VI_USE_SIGNALS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_DOT_CMD
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_DOT_CMD $CONFIG_USER_BUSYBOX_VI_DOT_CMD [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_READONLY
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_READONLY $CONFIG_USER_BUSYBOX_VI_READONLY [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_SETOPTS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_SETOPTS $CONFIG_USER_BUSYBOX_VI_SETOPTS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_SET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_SET $CONFIG_USER_BUSYBOX_VI_SET [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_VI_WIN_RESIZE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_VI == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VI_WIN_RESIZE $CONFIG_USER_BUSYBOX_VI_WIN_RESIZE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WATCHDOG
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WATCHDOG $CONFIG_USER_BUSYBOX_WATCHDOG [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WC
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WC $CONFIG_USER_BUSYBOX_WC [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WGET
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WGET $CONFIG_USER_BUSYBOX_WGET [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WGET_STATUSBAR
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_WGET == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WGET_STATUSBAR $CONFIG_USER_BUSYBOX_WGET_STATUSBAR [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1) && ($CONFIG_USER_BUSYBOX_WGET == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION $CONFIG_USER_BUSYBOX_WGET_AUTHENTICATION [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WHICH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WHICH $CONFIG_USER_BUSYBOX_WHICH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_WHOAMI
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_WHOAMI $CONFIG_USER_BUSYBOX_WHOAMI [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_XARGS
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_XARGS $CONFIG_USER_BUSYBOX_XARGS [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_YES
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_YES $CONFIG_USER_BUSYBOX_YES [list $notmod] 2 }
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_comment $cfg $autocfg "other features"}
	global CONFIG_USER_BUSYBOX_VERBOSE_USAGE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_VERBOSE_USAGE $CONFIG_USER_BUSYBOX_VERBOSE_USAGE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_AUTOWIDTH
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_AUTOWIDTH $CONFIG_USER_BUSYBOX_AUTOWIDTH [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE $CONFIG_USER_BUSYBOX_NEW_MODULE_INTERFACE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE $CONFIG_USER_BUSYBOX_OLD_MODULE_INTERFACE [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING $CONFIG_USER_BUSYBOX_INSMOD_VERSION_CHECKING [list $notmod] 2 }
	global CONFIG_USER_BUSYBOX_HUMAN_READABLE
	if {($CONFIG_USER_BUSYBOX_BUSYBOX == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_BUSYBOX_HUMAN_READABLE $CONFIG_USER_BUSYBOX_HUMAN_READABLE [list $notmod] 2 }
	write_comment $cfg $autocfg "Tinylogin"
	global CONFIG_USER_TINYLOGIN_TINYLOGIN
	write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_TINYLOGIN $CONFIG_USER_TINYLOGIN_TINYLOGIN [list $notmod] 2
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_comment $cfg $autocfg "Applets"}
	global CONFIG_USER_TINYLOGIN_ADDUSER
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_ADDUSER $CONFIG_USER_TINYLOGIN_ADDUSER [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_ADDGROUP
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_ADDGROUP $CONFIG_USER_TINYLOGIN_ADDGROUP [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_DELUSER
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_DELUSER $CONFIG_USER_TINYLOGIN_DELUSER [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_DELGROUP
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_DELGROUP $CONFIG_USER_TINYLOGIN_DELGROUP [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_LOGIN
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_LOGIN $CONFIG_USER_TINYLOGIN_LOGIN [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_SECURETTY
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1) && ($CONFIG_USER_TINYLOGIN_LOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_SECURETTY $CONFIG_USER_TINYLOGIN_SECURETTY [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_SU
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_SU $CONFIG_USER_TINYLOGIN_SU [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_SULOGIN
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_SULOGIN $CONFIG_USER_TINYLOGIN_SULOGIN [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_PASSWD
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_PASSWD $CONFIG_USER_TINYLOGIN_PASSWD [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_GETTY
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_GETTY $CONFIG_USER_TINYLOGIN_GETTY [list $notmod] 2 }
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_comment $cfg $autocfg "Features"}
	global CONFIG_USER_TINYLOGIN_SHADOWPASSWDS
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_SHADOWPASSWDS $CONFIG_USER_TINYLOGIN_SHADOWPASSWDS [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_MD5_PASSWORDS
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_MD5_PASSWORDS $CONFIG_USER_TINYLOGIN_MD5_PASSWORDS [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS $CONFIG_USER_TINYLOGIN_SHA1_PASSWORDS [list $notmod] 2 }
	global CONFIG_USER_TINYLOGIN_TRIVIAL_HELP
	if {($CONFIG_USER_TINYLOGIN_TINYLOGIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_TINYLOGIN_TRIVIAL_HELP $CONFIG_USER_TINYLOGIN_TRIVIAL_HELP [list $notmod] 2 }
	write_comment $cfg $autocfg "MicroWindows"
	global CONFIG_USER_MICROWIN
	write_tristate $cfg $autocfg CONFIG_USER_MICROWIN $CONFIG_USER_MICROWIN [list $notmod] 2
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Compiling Options"}
	global CONFIG_USER_MICROWIN_OPTIMIZE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_OPTIMIZE $CONFIG_USER_MICROWIN_OPTIMIZE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_DEBUG
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_DEBUG $CONFIG_USER_MICROWIN_DEBUG [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_VERBOSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_VERBOSE $CONFIG_USER_MICROWIN_VERBOSE [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Libraries"}
	global CONFIG_USER_MICROWIN_MICROWIN
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MICROWIN $CONFIG_USER_MICROWIN_MICROWIN [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_NANOX
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NANOX $CONFIG_USER_MICROWIN_NANOX [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_SHAREDLIBS
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_SHAREDLIBS $CONFIG_USER_MICROWIN_SHAREDLIBS [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_NWIDGET
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NWIDGET $CONFIG_USER_MICROWIN_NWIDGET [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_OBJFRAMEWORK
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_OBJFRAMEWORK $CONFIG_USER_MICROWIN_OBJFRAMEWORK [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Demos"}
	global CONFIG_USER_MICROWIN_MICROWINDEMO
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MICROWINDEMO $CONFIG_USER_MICROWIN_MICROWINDEMO [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_NANOXDEMO
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NANOXDEMO $CONFIG_USER_MICROWIN_NANOXDEMO [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Applications"}
	global CONFIG_USER_MICROWIN_NANOWM
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NANOWM $CONFIG_USER_MICROWIN_NANOWM [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Settings"}
	global tmpvar_2
	if {($CONFIG_USER_MICROWIN == 1)} then {
	if { $tmpvar_2 == "Packed-8bit-Palette" } then { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_PALETTE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_PALETTE 0 [list $notmod] 2 }
	if { $tmpvar_2 == "Packed-32bit-8/8/8" } then { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 0 [list $notmod] 2 }
	if { $tmpvar_2 == "Packed-24bit-8/8/8" } then { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 0 [list $notmod] 2 }
	if { $tmpvar_2 == "Packed-16bit-5/6/5" } then { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 0 [list $notmod] 2 }
	if { $tmpvar_2 == "Packed-16bit-5/5/5" } then { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 0 [list $notmod] 2 }
	if { $tmpvar_2 == "Packed-8bit-3/3/2" } then { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 0 [list $notmod] 2 }}
	global CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER $CONFIG_USER_MICROWIN_LINK_APP_INTO_SERVER [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_FILEIO
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_FILEIO $CONFIG_USER_MICROWIN_HAVE_FILEIO [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT $CONFIG_USER_MICROWIN_HAVE_BMP_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT $CONFIG_USER_MICROWIN_HAVE_GIF_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT $CONFIG_USER_MICROWIN_HAVE_PNM_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT $CONFIG_USER_MICROWIN_HAVE_XPM_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT $CONFIG_USER_MICROWIN_HAVE_JPEG_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT $CONFIG_USER_MICROWIN_HAVE_PNG_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT $CONFIG_USER_MICROWIN_HAVE_T1LIB_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT $CONFIG_USER_MICROWIN_HAVE_FREETYPE_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT $CONFIG_USER_MICROWIN_HAVE_SHAREDMEM_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT $CONFIG_USER_MICROWIN_HAVE_HZK_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT $CONFIG_USER_MICROWIN_HAVE_BIG5_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT $CONFIG_USER_MICROWIN_HAVE_GB2312_SUPPORT [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HAVEMSFONTS
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HAVEMSFONTS $CONFIG_USER_MICROWIN_HAVEMSFONTS [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_NOFONTSORCLIPPING
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NOFONTSORCLIPPING $CONFIG_USER_MICROWIN_NOFONTSORCLIPPING [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_ERASEMOVE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_ERASEMOVE $CONFIG_USER_MICROWIN_ERASEMOVE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_UPDATEREGIONS
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_UPDATEREGIONS $CONFIG_USER_MICROWIN_UPDATEREGIONS [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_GRAYPALETTE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_GRAYPALETTE $CONFIG_USER_MICROWIN_GRAYPALETTE [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Display Config"}
	global CONFIG_USER_MICROWIN_X11
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_X11 $CONFIG_USER_MICROWIN_X11 [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_FRAMEBUFFER
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_FRAMEBUFFER $CONFIG_USER_MICROWIN_FRAMEBUFFER [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_FBVGA
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_FBVGA $CONFIG_USER_MICROWIN_FBVGA [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_VTSWITCH
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_VTSWITCH $CONFIG_USER_MICROWIN_VTSWITCH [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_PORTRAIT_MODE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_PORTRAIT_MODE $CONFIG_USER_MICROWIN_PORTRAIT_MODE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_FBREVERSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_FBREVERSE $CONFIG_USER_MICROWIN_FBREVERSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_VGALIB
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_VGALIB $CONFIG_USER_MICROWIN_VGALIB [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HWVGA
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HWVGA $CONFIG_USER_MICROWIN_HWVGA [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_CLEOVGA
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_CLEOVGA $CONFIG_USER_MICROWIN_CLEOVGA [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Mouse/Touch Screen"}
	global CONFIG_USER_MICROWIN_GPMMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_GPMMOUSE $CONFIG_USER_MICROWIN_GPMMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_SERMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_SERMOUSE $CONFIG_USER_MICROWIN_SERMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_TPMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_TPMOUSE $CONFIG_USER_MICROWIN_TPMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_TPHELIO
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_TPHELIO $CONFIG_USER_MICROWIN_TPHELIO [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_ADSMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_ADSMOUSE $CONFIG_USER_MICROWIN_ADSMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_IPAQMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_IPAQMOUSE $CONFIG_USER_MICROWIN_IPAQMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_HARRIERMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_HARRIERMOUSE $CONFIG_USER_MICROWIN_HARRIERMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_PSIONMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_PSIONMOUSE $CONFIG_USER_MICROWIN_PSIONMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_UCTSMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_UCTSMOUSE $CONFIG_USER_MICROWIN_UCTSMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_DE2TSMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_DE2TSMOUSE $CONFIG_USER_MICROWIN_DE2TSMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_CLEOMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_CLEOMOUSE $CONFIG_USER_MICROWIN_CLEOMOUSE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_NOMOUSE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NOMOUSE $CONFIG_USER_MICROWIN_NOMOUSE [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Keyboard"}
	global CONFIG_USER_MICROWIN_TTYKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_TTYKBD $CONFIG_USER_MICROWIN_TTYKBD [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_SCANKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_SCANKBD $CONFIG_USER_MICROWIN_SCANKBD [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_PIPEKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_PIPEKBD $CONFIG_USER_MICROWIN_PIPEKBD [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_CLEOKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_CLEOKBD $CONFIG_USER_MICROWIN_CLEOKBD [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_NOKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_NOKBD $CONFIG_USER_MICROWIN_NOKBD [list $notmod] 2 }
	if {($CONFIG_USER_MICROWIN == 1)} then {write_comment $cfg $autocfg "Install These Applications"}
	global CONFIG_USER_MICROWIN_BIN_LANDMINE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_LANDMINE $CONFIG_USER_MICROWIN_BIN_LANDMINE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_LAUNCHER
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_LAUNCHER $CONFIG_USER_MICROWIN_BIN_LAUNCHER [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_MOVE
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_MOVE $CONFIG_USER_MICROWIN_BIN_MOVE [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_MTERM
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_MTERM $CONFIG_USER_MICROWIN_BIN_MTERM [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_MTEST
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_MTEST $CONFIG_USER_MICROWIN_BIN_MTEST [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_MTEST2
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_MTEST2 $CONFIG_USER_MICROWIN_BIN_MTEST2 [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_MUSERFD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_MUSERFD $CONFIG_USER_MICROWIN_BIN_MUSERFD [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NANO_X
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NANO_X $CONFIG_USER_MICROWIN_BIN_NANO_X [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NANOWM
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NANOWM $CONFIG_USER_MICROWIN_BIN_NANOWM [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NPANEL
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NPANEL $CONFIG_USER_MICROWIN_BIN_NPANEL [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NTERM
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NTERM $CONFIG_USER_MICROWIN_BIN_NTERM [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NTEST
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NTEST $CONFIG_USER_MICROWIN_BIN_NTEST [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NTETRIS
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NTETRIS $CONFIG_USER_MICROWIN_BIN_NTETRIS [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NXCLOCK
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NXCLOCK $CONFIG_USER_MICROWIN_BIN_NXCLOCK [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NXEV
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NXEV $CONFIG_USER_MICROWIN_BIN_NXEV [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NXKBD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NXKBD $CONFIG_USER_MICROWIN_BIN_NXKBD [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS $CONFIG_USER_MICROWIN_BIN_NXLSCLIENTS [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NXTERM
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NXTERM $CONFIG_USER_MICROWIN_BIN_NXTERM [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_NXVIEW
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_NXVIEW $CONFIG_USER_MICROWIN_BIN_NXVIEW [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_SLIDER
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_SLIDER $CONFIG_USER_MICROWIN_BIN_SLIDER [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_VNC
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_VNC $CONFIG_USER_MICROWIN_BIN_VNC [list $notmod] 2 }
	global CONFIG_USER_MICROWIN_BIN_WORLD
	if {($CONFIG_USER_MICROWIN == 1)} then {write_tristate $cfg $autocfg CONFIG_USER_MICROWIN_BIN_WORLD $CONFIG_USER_MICROWIN_BIN_WORLD [list $notmod] 2 }
	write_comment $cfg $autocfg "Games"
	global CONFIG_USER_GAMES_ADVENT4
	write_tristate $cfg $autocfg CONFIG_USER_GAMES_ADVENT4 $CONFIG_USER_GAMES_ADVENT4 [list $notmod] 2
	global CONFIG_USER_GAMES_DUNGEON
	write_tristate $cfg $autocfg CONFIG_USER_GAMES_DUNGEON $CONFIG_USER_GAMES_DUNGEON [list $notmod] 2
	global CONFIG_USER_GAMES_RUBIK
	write_tristate $cfg $autocfg CONFIG_USER_GAMES_RUBIK $CONFIG_USER_GAMES_RUBIK [list $notmod] 2
	write_comment $cfg $autocfg "Miscellaneous Configuration"
	global tmpvar_3
	
	if { $tmpvar_3 == "None" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_NONE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_NONE 0 [list $notmod] 2 }
	if { $tmpvar_3 == "64K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS64 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS64 0 [list $notmod] 2 }
	if { $tmpvar_3 == "128K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS128 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS128 0 [list $notmod] 2 }
	if { $tmpvar_3 == "256K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS256 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS256 0 [list $notmod] 2 }
	if { $tmpvar_3 == "512K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS512 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS512 0 [list $notmod] 2 }
	if { $tmpvar_3 == "1024K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS1024 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS1024 0 [list $notmod] 2 }
	if { $tmpvar_3 == "2048K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS2048 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS2048 0 [list $notmod] 2 }
	if { $tmpvar_3 == "8192K" } then { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS8192 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_USER_RAMIMAGE_RAMFS8192 0 [list $notmod] 2 }
	global CONFIG_USER_CGI_GENERIC
	write_tristate $cfg $autocfg CONFIG_USER_CGI_GENERIC $CONFIG_USER_CGI_GENERIC [list $notmod] 2
	global CONFIG_USER_CGIHTML
	write_tristate $cfg $autocfg CONFIG_USER_CGIHTML $CONFIG_USER_CGIHTML [list $notmod] 2
	global CONFIG_USER_DEMO_BUTTON
	write_tristate $cfg $autocfg CONFIG_USER_DEMO_BUTTON $CONFIG_USER_DEMO_BUTTON [list $notmod] 2
	global CONFIG_USER_DEMO_LATCH
	write_tristate $cfg $autocfg CONFIG_USER_DEMO_LATCH $CONFIG_USER_DEMO_LATCH [list $notmod] 2
	global CONFIG_USER_DEMO_MORSE
	write_tristate $cfg $autocfg CONFIG_USER_DEMO_MORSE $CONFIG_USER_DEMO_MORSE [list $notmod] 2
	global CONFIG_USER_DEMO_R2100
	write_tristate $cfg $autocfg CONFIG_USER_DEMO_R2100 $CONFIG_USER_DEMO_R2100 [list $notmod] 2
	write_comment $cfg $autocfg "Debug Builds"
	global CONFIG_LIB_DEBUG
	write_tristate $cfg $autocfg CONFIG_LIB_DEBUG $CONFIG_LIB_DEBUG [list $notmod] 2
	global CONFIG_USER_DEBUG
	write_tristate $cfg $autocfg CONFIG_USER_DEBUG $CONFIG_USER_DEBUG [list $notmod] 2
	write_comment $cfg $autocfg "Debug tools"
	global CONFIG_USER_TIMEPEG_TPT
	write_tristate $cfg $autocfg CONFIG_USER_TIMEPEG_TPT $CONFIG_USER_TIMEPEG_TPT [list $notmod] 2
	write_comment $cfg $autocfg "Debug libraries"
	global CONFIG_LIB_LIBCCMALLOC
	write_tristate $cfg $autocfg CONFIG_LIB_LIBCCMALLOC $CONFIG_LIB_LIBCCMALLOC [list $notmod] 2
	close $cfg
	close $autocfg
}


proc clear_choices { } {
	global CONFIG_USER_SASH_SH; set CONFIG_USER_SASH_SH 0
	global CONFIG_USER_SH_SH; set CONFIG_USER_SH_SH 0
	global CONFIG_USER_NWSH_SH; set CONFIG_USER_NWSH_SH 0
	global CONFIG_USER_BASH_BASH; set CONFIG_USER_BASH_BASH 0
	global CONFIG_USER_OTHER_SH; set CONFIG_USER_OTHER_SH 0
	global CONFIG_USER_FLATFSD_AUTO; set CONFIG_USER_FLATFSD_AUTO 0
	global CONFIG_USER_FLATFSD_USE_FLASH_FS; set CONFIG_USER_FLATFSD_USE_FLASH_FS 0
	global CONFIG_USER_FLATFSD_DISKLIKE; set CONFIG_USER_FLATFSD_DISKLIKE 0
	global CONFIG_USER_MICROWIN_MWPF_PALETTE; set CONFIG_USER_MICROWIN_MWPF_PALETTE 0
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888; set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 0
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888; set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 0
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565; set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 0
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555; set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 0
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332; set CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 0
	global CONFIG_USER_RAMIMAGE_NONE; set CONFIG_USER_RAMIMAGE_NONE 0
	global CONFIG_USER_RAMIMAGE_RAMFS64; set CONFIG_USER_RAMIMAGE_RAMFS64 0
	global CONFIG_USER_RAMIMAGE_RAMFS128; set CONFIG_USER_RAMIMAGE_RAMFS128 0
	global CONFIG_USER_RAMIMAGE_RAMFS256; set CONFIG_USER_RAMIMAGE_RAMFS256 0
	global CONFIG_USER_RAMIMAGE_RAMFS512; set CONFIG_USER_RAMIMAGE_RAMFS512 0
	global CONFIG_USER_RAMIMAGE_RAMFS1024; set CONFIG_USER_RAMIMAGE_RAMFS1024 0
	global CONFIG_USER_RAMIMAGE_RAMFS2048; set CONFIG_USER_RAMIMAGE_RAMFS2048 0
	global CONFIG_USER_RAMIMAGE_RAMFS8192; set CONFIG_USER_RAMIMAGE_RAMFS8192 0
}


proc update_choices { } {
	global tmpvar_0
	set tmpvar_0 "Sash"
	global CONFIG_USER_SASH_SH
	if { $CONFIG_USER_SASH_SH == 1 } then { set tmpvar_0 "Sash" }
	global CONFIG_USER_SH_SH
	if { $CONFIG_USER_SH_SH == 1 } then { set tmpvar_0 "minix-shell" }
	global CONFIG_USER_NWSH_SH
	if { $CONFIG_USER_NWSH_SH == 1 } then { set tmpvar_0 "nwsh" }
	global CONFIG_USER_BASH_BASH
	if { $CONFIG_USER_BASH_BASH == 1 } then { set tmpvar_0 "bash" }
	global CONFIG_USER_OTHER_SH
	if { $CONFIG_USER_OTHER_SH == 1 } then { set tmpvar_0 "Other" }
	global tmpvar_1
	set tmpvar_1 "Auto"
	global CONFIG_USER_FLATFSD_AUTO
	if { $CONFIG_USER_FLATFSD_AUTO == 1 } then { set tmpvar_1 "Auto" }
	global CONFIG_USER_FLATFSD_USE_FLASH_FS
	if { $CONFIG_USER_FLATFSD_USE_FLASH_FS == 1 } then { set tmpvar_1 "Filesystem" }
	global CONFIG_USER_FLATFSD_DISKLIKE
	if { $CONFIG_USER_FLATFSD_DISKLIKE == 1 } then { set tmpvar_1 "Disklike" }
	global tmpvar_2
	set tmpvar_2 "CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888"
	global CONFIG_USER_MICROWIN_MWPF_PALETTE
	if { $CONFIG_USER_MICROWIN_MWPF_PALETTE == 1 } then { set tmpvar_2 "Packed-8bit-Palette" }
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888
	if { $CONFIG_USER_MICROWIN_MWPF_TRUECOLOR0888 == 1 } then { set tmpvar_2 "Packed-32bit-8/8/8" }
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888
	if { $CONFIG_USER_MICROWIN_MWPF_TRUECOLOR888 == 1 } then { set tmpvar_2 "Packed-24bit-8/8/8" }
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565
	if { $CONFIG_USER_MICROWIN_MWPF_TRUECOLOR565 == 1 } then { set tmpvar_2 "Packed-16bit-5/6/5" }
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555
	if { $CONFIG_USER_MICROWIN_MWPF_TRUECOLOR555 == 1 } then { set tmpvar_2 "Packed-16bit-5/5/5" }
	global CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332
	if { $CONFIG_USER_MICROWIN_MWPF_TRUECOLOR332 == 1 } then { set tmpvar_2 "Packed-8bit-3/3/2" }
	global tmpvar_3
	set tmpvar_3 "64K"
	global CONFIG_USER_RAMIMAGE_NONE
	if { $CONFIG_USER_RAMIMAGE_NONE == 1 } then { set tmpvar_3 "None" }
	global CONFIG_USER_RAMIMAGE_RAMFS64
	if { $CONFIG_USER_RAMIMAGE_RAMFS64 == 1 } then { set tmpvar_3 "64K" }
	global CONFIG_USER_RAMIMAGE_RAMFS128
	if { $CONFIG_USER_RAMIMAGE_RAMFS128 == 1 } then { set tmpvar_3 "128K" }
	global CONFIG_USER_RAMIMAGE_RAMFS256
	if { $CONFIG_USER_RAMIMAGE_RAMFS256 == 1 } then { set tmpvar_3 "256K" }
	global CONFIG_USER_RAMIMAGE_RAMFS512
	if { $CONFIG_USER_RAMIMAGE_RAMFS512 == 1 } then { set tmpvar_3 "512K" }
	global CONFIG_USER_RAMIMAGE_RAMFS1024
	if { $CONFIG_USER_RAMIMAGE_RAMFS1024 == 1 } then { set tmpvar_3 "1024K" }
	global CONFIG_USER_RAMIMAGE_RAMFS2048
	if { $CONFIG_USER_RAMIMAGE_RAMFS2048 == 1 } then { set tmpvar_3 "2048K" }
	global CONFIG_USER_RAMIMAGE_RAMFS8192
	if { $CONFIG_USER_RAMIMAGE_RAMFS8192 == 1 } then { set tmpvar_3 "8192K" }
}


proc update_define_mainmenu {} {
	global CONFIG_MODULES
}


set defaults "defconfig"
set autoconf_file "autoconf.h"
set help_file "Configure.help"
# FILE: tail.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1998, Michael Elizabeth Chastain, <mec@shout.net>
# Arrange buttons in three columns for better screen fitting.
#

#
# Read the user's settings from .config.  These will override whatever is
# in config.in.  Don't do this if the user specified a -D to force
# the defaults.
#
if { [file readable .config] == 1} then {
	if { $argc > 0 } then {
		if { [lindex $argv 0] != "-D" } then {
			read_config .config
		}
		else
		{
			read_config $defaults
		}
	} else {
		read_config .config
	}
} else {
	read_config $defaults
}

update_define 1 $total_menus 0
update_mainmenu

global autoconf_file
if {( $autoconf_file == "")} then {
	set autoconf_file "/dev/null"
}

button .f0.right.save -anchor w -text "Save and Exit" \
    -command {
		catch {exec cp -f .config .config.old}
		writeconfig .config $autoconf_file;
			exit
	}

button .f0.right.quit -anchor w -text "Quit Without Saving" \
    -command { maybe_exit .maybe }

button .f0.right.load -anchor w -text "Load Configuration from File" \
    -command { load_configfile .load "Load Configuration from file" read_config_file
}

button .f0.right.store -anchor w -text "Store Configuration to File" \
    -command { load_configfile .load "Store Configuration to file" write_config_file }

#
# Now pack everything.
#

pack .f0.right.store .f0.right.load .f0.right.quit .f0.right.save \
    -padx 0 -pady 0 -side bottom -fill x
pack .f0.left .f0.middle .f0.right -side left -padx 5 -pady 0 -fill y
pack .f0 -padx 5 -pady 5

update idletasks
set winy [expr 10 + [winfo reqheight .f0]]
set scry [lindex [wm maxsize .] 1]
set winx [expr 10 + [winfo reqwidth .f0]]
set scrx [lindex [wm maxsize .] 0]
if {$winx < $scrx} then {set maxx -1} else {set maxx $winx}
if {$winy < $scry} then {set maxy -1} else {set maxy $winy}
.f0 configure -width $winx -height $winy 
wm maxsize . $maxx $maxy

#
# If we cannot write our config files, disable the write button.
#
if { [file exists .config] == 1 } then {
		if { [file writable .config] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable .] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}

if { [file exists $autoconf_file] == 1 } then {
		if { [file writable $autoconf_file] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}

