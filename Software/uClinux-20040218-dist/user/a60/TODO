

	TODO:

* add identifier lookup restriction to upper-scope, when parsing bounds
  (conforming to RRA60).
 
* add error when unary minus appears inside of an expression like
  (3 * -1) and the -strict option is set.

* complete usage of other channels than stdin / stdout.
  implement a selin () selout () mechanism.

* finish/verify implementation of in/out builtin's. scanning
  chars/tokens. 

* clean up order of binop-evaluation; eval left to right in binop's.
  I'm not sure if this is still OK.

* test illegal parameter passing in all cases (typed, by name, by value).
  here I expect misbehavior (core dumps ...) when parsing (checking)
  illegal code.

* test the power operator.

* finish correct integer <-> real conversion (all the places were
  needed). Correct rounding versus truncating of values.

* test (and finish ?) ``goto'' when jumping out of expressions. 

* cleanup various flags and global variables (nerrors and cerrors; 
  debug flags)

* finish a60.texinfo (the documentation about the interpreter and the
  implementation).

* expand a60.man (the short manual page about usage).

* implement better error checks in mkc.c. the better way would be:

* write a GNU A60 frontend based on the GNU C compiler for a60 at all.

