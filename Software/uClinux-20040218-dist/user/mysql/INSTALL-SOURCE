Installing MySQL
****************

* Menu:

* Quick Standard Installation::  Quick Standard Installation of MySQL
* General Installation Issues::  General Installation Issues
* Installing source::           Installing a MySQL Source Distribution
* Post-installation::           Post-installation Setup and Testing
* Upgrade::                     Upgrading/Downgrading MySQL
* Operating System Specific Notes::  Operating System Specific Notes
* Perl support::                Perl Installation Comments

This chapter describes how to obtain and install MySQL:

   * For a list of sites from which you can obtain MySQL, see *Note
     Getting MySQL: Getting MySQL.

   * To see which platforms are supported, see *Note Which OS::. Please
     note that not all supported systems are equally good for running
     MySQL on them.  On some it is much more robust and efficient than
     others--see *Note Which OS:: for details.

   * Several versions of MySQL are available in both binary and source
     distributions.  We also provide public access to our current
     source tree for those who want to see our most recent developments
     and help us test new code.  To determine which version and type of
     distribution you should use, see *Note Which version::. When in
     doubt, use a binary distribution.

   * Installation instructions for binary and source distributions are
     described in *Note Installing binary::, and *Note Installing
     source::.  Each set of instructions includes a section on
     system-specific problems you may run into.

   * For post-installation procedures, see *Note Post-installation::.
     These procedures apply whether you install MySQL using a binary or
     source distribution.


Quick Standard Installation of MySQL
====================================

This chapter covers the installation of MySQL on platforms where we
offer packages using the native packaging format of the respective
platform. However, binary distributions of MySQL are available for many
other platforms as well, see *Note Installing binary:: for generic
installation instructions for these packages that apply to all
platforms.

See *Note General Installation Issues:: for more information on what
other binary distributions are available on how to obtain them.

* Menu:

* Windows installation::        Installing MySQL on Windows
* Linux-RPM::                   Installing MySQL on Linux
* Mac OS X installation::       Installing MySQL on Mac OS X
* NetWare installation::        Installing MySQL on NetWare


Installing MySQL on Windows
---------------------------

The MySQL server for Windows is available in two distribution formats:

   * The binary distribution contains a setup program that installs
     everything you need so that you can start the server immediately.

   * The source distribution contains all the code and support files
     for building the executables using the VC++ 6.0 compiler.  *Note
     Windows source build::.


Generally speaking, you should use the binary distribution. It's
simpler, and you need no additional tools to get MySQL up and running.

You will need the following:

   * A 32-bit Windows Operating System such as 9x, Me, NT, 2000, or XP.
     The NT family (Windows NT, 2000, and XP) permits you to run the
     MySQL server as a service. *Note NT start::.

     If you need tables with a size larger than 4 GB, install MySQL on
     an NTFS or newer filesystem. Don't forget to use `MAX_ROWS' and
     `AVG_ROW_LENGTH' when you create tables.  *Note `CREATE TABLE':
     CREATE TABLE.

   * TCP/IP protocol support.

   * A copy of the MySQL binary distribution for Windows, which can be
     downloaded from `http://www.mysql.com/downloads/'.

     Note: The distribution files are supplied with a zipped format and
     we recommend the use of an adequate FTP client with resume feature
     to avoid corruption of files during the download process.

   * A `ZIP' program to unpack the distribution file.

   * Enough space on the hard drive to unpack, install, and create the
     databases in accordance with your requirements.

   * If you plan to connect to the MySQL server via ODBC, you will also
     need the `MyODBC' driver. *Note ODBC::.


* Menu:

* Windows binary installation::  Installing the Binaries
* Windows prepare environment::  Preparing the Windows MySQL Environment
* Windows server first start::  Starting the Server for the First Time


Installing the Binaries
.......................

  1. If you are working on an NT/2000/XP server, log on as a user with
     administrator privileges.

  2. If you are doing an upgrade of an earlier MySQL installation, it
     is necessary to stop the current server. If you are running the
     server as a service, stop it using this command:

          C:\> NET STOP MySQL

     Otherwise, stop the server like this:

          C:\mysql\bin> mysqladmin -u root shutdown

  3. On NT/2000/XP machines, if you want to change the server executable
     (for example, `-max' or `-nt'), it is also necessary to remove the
     service:

          C:\mysql\bin> mysqld --remove

  4. Exit the `WinMySQLadmin' program if it is running.

  5. Unzip the distribution file to a temporary directory.

  6. Run the `setup.exe' program to begin the installation process.  If
     you want to install into another directory than the default
     (`C:\mysql'), use the `Browse' button to specify your preferred
     directory.

  7. Finish the install process.



Preparing the Windows MySQL Environment
.......................................

Starting with MySQL 3.23.38, the Windows distribution includes both the
normal and the MySQL-Max server binaries.  Here is a list of the
different MySQL servers from which you can choose:

*Binary*       *Description*
`mysqld'       Compiled with full debugging and automatic memory
               allocation checking, symbolic links, `InnoDB', and `BDB'
               tables.
`mysqld-opt'   Optimised binary with no support for transactional tables
               in version 3.23. For version 4.0, `InnoDB' is enabled.
`mysqld-nt'    Optimised binary for NT/2000/XP with support for named
               pipes.
`mysqld-max'   Optimised binary with support for symbolic links,
               `InnoDB' and `BDB' tables.
`mysqld-max-nt'Like `mysqld-max', but compiled with support for named
               pipes.

All of the preceding binaries are optimised for modern Intel processors
but should work on any Intel processor >= i386.

When run on a version of Windows that supports named pipes (NT, 2000,
XP), the `mysqld-nt' and `mysqld-max-nt' servers support named pipe
connections.  However, starting from 3.23.50, named pipes are enabled
only if you start these servers with the `--enable-named-pipe' option.
(The servers can be run on Windows 98 or Me, but TCP/IP must be
installed, and named pipe connections cannot be used. On Windows 95,
these servers cannot be used.)

You will find it helpful to use an option file to specify your MySQL
configuration under the following circumstances:

   * The installation or data directories are different from the default
     locations (`C:\mysql' and `C:\mysql\data').

   * You need to tune the server settings.  For example, if you want to
     use the `InnoDB' transactional tables in MySQL version 3.23, you
     need to manually create two new directories to hold the `InnoDB'
     data and log files--such as, `C:\ibdata' and `C:\iblogs'.  You
     will also need to add some extra lines to the option file, as
     described in *Note `InnoDB' start: InnoDB start.  (As of MySQL
     4.0, InnoDB will create its datafiles and log files in the data
     directory by default. This means you need not configure InnoDB
     explicitly, though you may still wish to do so.)


On Windows, the MySQL installer places the data directory directly under
the directory where you install MySQL.  If you would like to use a data
directory in a different location, you should copy the entire contents
of the `data' directory to the new location. For example, the default
installation places MySQL in `C:\mysql' and the data directory in
`C:\mysql\data'. If you want to use a data directory of `E:\mydata',
you must copy `C:\mysql\data' there. You will also need to use a
`--datadir' option to specify the location of the new data directory.

Normally you can use the `WinMySQLAdmin' tool to edit the option file
`my.ini'.  In this case you don't have to worry about the following
discussion.

There are two option files with the same function: `C:\my.cnf', and the
`my.ini' file in the Windows directory.  (This directory typically is
named something like `C:\WINDOWS' or `C:\WinNT'.  You can determine its
exact location from the value of the `WINDIR' environment variable.)
MySQL looks first for the `my.ini' file, then for the `my.cnf' file.
However, to avoid confusion, it's best if you use only one of these
files. Both files are plain text.

If your PC uses a boot loader where the `C:' drive isn't the boot drive,
your only option is to use the `my.ini' file.  Also note that if you
use the `WinMySQLAdmin' tool, it uses only the `my.ini' file.  The
`\mysql\bin' directory contains a help file with instructions for using
this tool.

Using the `notepad' program, create the option file and edit the
`[mysqld]' section to specify values for the `basedir' and `datadir'
parameters:

     [mysqld]
     # set basedir to your installation path, for example, C:/mysql
     basedir=the_install_path
     # set datadir to the location of your data directory,
     # for example, C:/mysql/data or D:/mydata/data
     datadir=the_data_path

Note that Windows pathnames should be specified in option files using
forward slashes rather than backslashes.  If you do use backslashes, you
must double them.

Now you are ready to test starting the server.


Starting the Server for the First Time
......................................

Testing is best done from a command prompt in a console window (a "DOS
window"). This way you can have the server display status messages in
the window where they are easy to see.  If something is wrong with your
configuration, these messages will make it easier for you to identify
and fix any problems.

Make sure you are in the directory where the server is located, then
enter this command:

     shell> mysqld --console

For servers that include `InnoDB' support, you should see the following
messages as the server starts up:

     InnoDB: The first specified datafile c:\ibdata\ibdata1 did not exist:
     InnoDB: a new database to be created!
     InnoDB: Setting file c:\ibdata\ibdata1 size to 209715200
     InnoDB: Database physically writes the file full: wait...
     InnoDB: Log file c:\iblogs\ib_logfile0 did not exist: new to be created
     InnoDB: Setting log file c:\iblogs\ib_logfile0 size to 31457280
     InnoDB: Log file c:\iblogs\ib_logfile1 did not exist: new to be created
     InnoDB: Setting log file c:\iblogs\ib_logfile1 size to 31457280
     InnoDB: Log file c:\iblogs\ib_logfile2 did not exist: new to be created
     InnoDB: Setting log file c:\iblogs\ib_logfile2 size to 31457280
     InnoDB: Doublewrite buffer not found: creating new
     InnoDB: Doublewrite buffer created
     InnoDB: creating foreign key constraint system tables
     InnoDB: foreign key constraint system tables created
     011024 10:58:25  InnoDB: Started

When the server finishes its startup sequence, you should see something
like this, which indicates that the server is ready to service client
connections::

     mysqld: ready for connections
     Version: '4.0.14-log'  socket: ''  port: 3306

The server will continue to write to the console any further diagnostic
output it produces.  You can open a new console window in which to run
client programs.

If you omit the `--console' option, the server writes diagnostic output
to the error log in the data directory. The error log is the file with
the `.err' extension.

For further information about running MySQL on Windows, see *Note
Windows::.


Installing MySQL on Linux
-------------------------

The recommended way to install MySQL on Linux is by using the RPM
packages. The MySQL RPMs are currently built on a SuSE Linux 7.3 system
but should work on most versions of Linux that support `rpm' and use
`glibc'.

If you have problems with an RPM file (for example, if you receive the
error "`Sorry, the host 'xxxx' could not be looked up'"), see *Note
Binary notes-Linux::.

In most cases, you only need to install the `MySQL-server' and
`MySQL-client' packages to get a functional MySQL installation. The
other packages are not required for a standard installation.  If you
want to run a MySQL Max server that has additional capabilities, you
should install the `MySQL-Max' RPM after installing the `MySQL-server'
RPM.  *Note `mysqld-max': mysqld-max.

If you get a dependency failure when trying to install the MySQL 4.0
packages (for example, "`error: removing these packages would break
dependencies: libmysqlclient.so.10 is needed by ...'"), you should also
install the package `MySQL-shared-compat', which includes both the
shared libraries for backward compatibility (`libmysqlclient.so.12' for
MySQL 4.0 and `libmysqlclient.so.10' for MySQL 3.23).

Many Linux distributions still ship with MySQL 3.23 and they usually
link applications dynamically to save disk space. If these shared
libraries are in a separate package (for example, `MySQL-shared'), it is
sufficient to simply leave this package installed and just upgrade the
MySQL server and client packages (which are statically linked and do
not depend on the shared libraries). For distributions that include the
shared libraries in the same package as the MySQL server (for example,
Red Hat Linux), you could either install our 3.23 `MySQL-shared' RPM,
or use the `MySQL-shared-compat' package instead.

The following RPM packages are available:

   * `MySQL-server-VERSION.i386.rpm'

     The MySQL server.  You will need this unless you only want to
     connect to a MySQL server running on another machine. Please note
     that this package was called `MySQL-VERSION.i386.rpm' before MySQL
     4.0.10.

   * `MySQL-Max-VERSION.i386.rpm'

     The MySQL Max server. This server has additional capabilities that
     the one in the `MySQL-server' RPM does not.  You must install the
     `MySQL-server' RPM first, because the `MySQL-Max' RPM depends on
     it.

   * `MySQL-client-VERSION.i386.rpm'

     The standard MySQL client programs. You probably always want to
     install this package.

   * `MySQL-bench-VERSION.i386.rpm'

     Tests and benchmarks. Requires Perl and the `DBD-mysql' module.

   * `MySQL-devel-VERSION.i386.rpm'

     The libraries and include files that are needed if you want to
     compile other MySQL clients, such as the Perl modules.

   * `MySQL-shared-VERSION.i386.rpm'

     This package contains the shared libraries (`libmysqlclient.so*')
     that certain languages and applications need to dynamically load
     and use MySQL.

   * `MySQL-shared-compat-VERSION.i386.rpm'

     This package includes the shared libraries for both MySQL 3.23 and
     MySQL 4.0. Install this package instead of `MySQL-shared', if you
     have applications installed that are dynamically linked against
     MySQL 3.23 but you want to upgrade to MySQL 4.0 without breaking
     the library dependencies. This package is available since MySQL
     4.0.13.

   * `MySQL-embedded-VERSION.i386.rpm'

     The embedded MySQL server library (from MySQL 4.0).

   * `MySQL-VERSION.src.rpm'

     This contains the source code for all of the previous packages. It
     can also be used to rebuild the RPMs on other architectures (for
     example, Alpha or SPARC).

To see all files in an RPM package (for example, a `MySQL-server' RPM),
run:

     shell> rpm -qpl MySQL-server-VERSION.i386.rpm

To perform a standard minimal installation, run:

     shell> rpm -i MySQL-server-VERSION.i386.rpm MySQL-client-VERSION.i386.rpm

To install just the client package, run:

     shell> rpm -i MySQL-client-VERSION.i386.rpm

The server RPM places data under the `/var/lib/mysql' directory. The
RPM also creates the appropriate entries in `/etc/init.d/' to start the
server automatically at boot time. (This means that if you have
performed a previous installation and have made changes to its startup
script, you may want to make a copy of the script so you don't lose it
when you install a newer RPM.) See *Note Automatic start:: for more
information on how MySQL can be started automatically on system startup.

If you want to install the MySQL RPM on older Linux distributions that
do not support initialisation scripts in `/etc/init.d' (directly or via
a symlink), you should create a symbolic link that points to the
location where your initialisation scripts actually are installed. For
example, if that location is `/etc/rc.d/init.d', use these commands
before installing the RPM to create `/etc/init.d' as a symbolic link
that points there:

     shell> cd /etc; ln -s rc.d/init.d .

However, all current major Linux distributions should already support
the new directory layout that uses `/etc/init.d', because it is
required for LSB (Linux Standard Base) compliance.

If the RPM files that you install include `MySQL-server', the `mysqld'
daemon should be up and running after installation.  You should now be
able to start using MySQL.  *Note Post-installation::.

If something goes wrong, you can find more information in the binary
installation chapter. *Note Installing binary::.


Installing MySQL on Mac OS X
----------------------------

Beginning with MySQL 4.0.11, you can install MySQL on Mac OS X 10.2
("Jaguar") using a Mac OS X `PKG' binary package instead of the binary
tarball distribution. Please note that older versions of Mac OS X (for
example, 10.1.x) are not supported by this package.

The package is located inside a disk image (`.dmg') file, that you
first need to mount by double-clicking its icon in the Finder. It should
then mount the image and display its contents.

*NOTE*: Before proceeding with the installation, be sure to shut down
all running MySQL server instances by either using the MySQL Manager
Application (on Mac OS X Server) or via `mysqladmin shutdown' on the
command line.

To actually install the MySQL PKG, double click on the package icon.
This launches the Mac OS Package Installer, which will guide you through
the installation of MySQL.

The Mac OS X PKG of MySQL will install itself into
`/usr/local/mysql-<version>' and will also install a symbolic link
`/usr/local/mysql', pointing to the new location. If a directory named
`/usr/local/mysql' already exists, it will be renamed to
`/usr/local/mysql.bak' first. Additionally, it will install the grant
tables in the `mysql' database by executing `mysql_install_db' after
the installation.

The installation layout is similar to the one of the binary
distribution; all MySQL binaries are located in the directory
`/usr/local/mysql/bin'.  The MySQL socket file is created as
`/tmp/mysql.sock' by default.  *Note Installation layouts::.

MySQL installation requires a Mac OS X user account named `mysql' (a
user account with this name should exist by default on Mac OS X 10.2
and up).

If you are running Mac OS X Server, you already have a version of MySQL
installed:

   * Mac OS X Server 10.2-10.2.2 come with MySQL 3.23.51 installed

   * Mac OS X Server 10.2.3-10.2.6 ship with MySQL 3.23.53

This manual section covers the installation of the official MySQL Mac
OS X PKG only.  Make sure to read Apple's help about installing MySQL
(Run the "Help View" application, select "Mac OS X Server" help, and do
a search for "MySQL" and read the item entitled "Installing MySQL").

Especially note that the pre-installed version of MySQL on Mac OS X
Server is started with the command `safe_mysqld' instead of
`mysqld_safe'.

If you previously used Marc Liyanage's MySQL packages for Mac OS X from
`http://www.entropy.ch', you can simply follow the update instructions
for packages using the binary installation layout as given on his pages.

If you are upgrading from Marc's 3.23.xx versions or from the Mac OS X
Server version of MySQL to the official MySQL PKG, you also need to
convert the existing MySQL privilege tables to the current format,
because some new security privileges have been added.  *Note
Upgrading-grant-tables::.

If you would like to automatically start up MySQL during system bootup,
you also need to install the MySQL Startup Item. Starting with MySQL
4.0.15, it is part of the Mac OS X installation disk images as a
separate installation package. Simply double-click the
`MySQLStartupItem.pkg' icon and follow the instructions to install it.

Note that this only has to be done once! There is no need to install the
Startup Item every time you upgrade the MySQL package.

The Startup Item will be installed into `/Library/StartupItems/MySQL'.
It adds a variable `MYSQLCOM=-YES-' to the system configuration file
`/etc/hostconfig'. If you would like to disable the automatic startup
of MySQL, simply change this variable to `MYSQLCOM=-NO-'.

On Mac OS X Server, the Startup Item installation script will
automatically disable the startup of the default MySQL installation by
changing the variable `MYSQL' in `/etc/hostconfig' to `MYSQL=-NO-'. This
is to avoid conflicts on bootup. However, it does not shut down an
already running MySQL server.

After the installation, you can start up MySQL by running the following
commands in a terminal window. Please note that you need to have
administrator privileges to perform this task.

If you have installed the Startup Item:

     shell> sudo /Library/StartupItems/MySQL/MySQL start
     (Enter your password, if necessary)
     (Press Control-D or enter "exit" to exit the shell)

If you don't use the Startup Item, enter the following command sequence:

     shell> cd /usr/local/mysql
     shell> sudo ./bin/mysqld_safe
     (Enter your password, if necessary)
     (Press Control-Z)
     shell> bg
     (Press Control-D or enter "exit" to exit the shell)

You should now be able to connect to the MySQL server, for example, by
running `/usr/local/mysql/bin/mysql'.

If you installed MySQL for the first time, *please remember to set a
password for the MySQL `root' user!*

This is done with the following two commands:

     /usr/local/mysql/bin/mysqladmin -u root password <password>
     /usr/local/mysql/bin/mysqladmin -u root -h `hostname` password <password>

Please make sure that the `hostname' command in the second line is
enclosed by *backticks* (`), so the shell can replace it with the
output of this command (the host name of this system)!

You might want to also add aliases to your shell's resource file to
access `mysql' and `mysqladmin' from the command line:

     alias mysql '/usr/local/mysql/bin/mysql'
     alias mysqladmin '/usr/local/mysql/bin/mysqladmin'

Alternatively, you could simply add `/usr/local/mysql/bin' to your
`PATH' environment variable, for example, by adding the following to
`$HOME/.tcshrc':

     setenv PATH ${PATH}:/usr/local/mysql/bin

Please note that installing a new MySQL PKG does not remove the
directory of an older installation. Unfortunately, the Mac OS X
Installer does not yet offer the functionality required to properly
upgrade previously installed packages.

After you have copied over the MySQL database files from the previous
version and have successfully started the new version, you should
consider removing the old installation files to save disk space.
Additionally, you should also remove older versions of the Package
Receipt directories located in `/Library/Receipts/mysql-<version>.pkg'.


Installing MySQL on NetWare
---------------------------

As of version 4.0.11, the MySQL server is available for Novell NetWare
in binary package form. In order to host MySQL, the NetWare server must
meet these requirements:

   * NetWare version 6.5, or NetWare 6.0 with Support Pack 3 installed
     (You can obtain this at
     `http://support.novell.com/filefinder/13659/index.html').  The
     system must meet Novell's minimum requirements to run the
     respective version of NetWare.

   * MySQL data, as well as the binaries themselves, must be installed
     on an NSS volume; traditional volumes are not supported.

The binary package for NetWare can be obtained at
`http://www.mysql.com/downloads/'.

If you are running MySQL on NetWare 6.0, we strongly suggest that you
use the `--skip-external-locking' option on the command line. It will
also be neccesary to use `CHECK TABLE' and `REPAIR TABLE' instead of
`myisamchk', because `myisamchk' makes use of external locking.
External locking is known to have problems on NetWare 6.0; the problem
has been eliminated in NetWare 6.5.

* Menu:

* NetWare binary installation::  Installing the MySQL for NetWare Binaries


Installing the MySQL for NetWare Binaries
.........................................

  1. If you are upgrading from a prior installation, stop the MySQL
     server.  This is done from the server console, using:

          SERVER:  mysqladmin -u root shutdown

  2. Log on to the target server from a client machine with access to
     the location where you will install MySQL.

  3. Extract the binary package zip file onto the server. Be sure to
     allow the paths in the zip file to be used. It is safe to simply
     extract the file to `SYS:\'.

     If you are upgrading from a prior installation, you may need to
     copy the data directory (for example, `SYS:MYSQL\DATA') now, as
     well as `my.cnf' if you have customised it. You can then delete
     the old copy of MySQL.

  4. You may wish to rename the directory to something more consistent
     and easy to use. We recommend using `SYS:MYSQL'; examples in the
     manual will use this to refer to the installation directory in
     general.

  5. At the server console, add a search path for the directory
     containing the MySQL NLMs. For example:

          SERVER:  SEARCH ADD SYS:MYSQL\BIN

  6. Install the initial database, if needed, by executing
     `mysql_install_db' at the server console.

  7. Start the MySQL server using `mysqld_safe' at the server console.

  8. To finish the installation, you should also add the following
     commands to `autoexec.ncf'. For example, if your MySQL
     installation is in `SYS:MYSQL' and you want MySQL to start
     automatically, you could add these lines:

          #Starts the MySQL 4.0.x database server
          SEARCH ADD SYS:MYSQL\BIN
          MYSQLD_SAFE

     If you are using NetWare 6.0, you should add the
     `--skip-external-locking' flag:

          #Starts the MySQL 4.0.x database server
          SEARCH ADD SYS:MYSQL\BIN
          MYSQLD_SAFE --skip-external-locking


If there was an existing installation of MySQL on the server, be sure
to check for existing MySQL startup commands in `autoexec.ncf', and
edit or delete them as necessary.


General Installation Issues
===========================

* Menu:

* Getting MySQL::               How to Get MySQL
* Verifying Package Integrity::   Verifying Package Integrity Using `MD5 Checksums' or `GnuPG'
* Which OS::                    Operating Systems Supported by MySQL
* Which version::               Which MySQL Version to Use
* Installation layouts::        Installation Layouts
* Many versions::               How and When Updates Are Released
* Release philosophy::          Release Philosophy - No Known Bugs in Releases
* MySQL binaries::              MySQL Binaries Compiled by MySQL AB
* Installing binary::           Installing a MySQL Binary Distribution


How to Get MySQL
----------------

Check the MySQL homepage (`http://www.mysql.com/') for information
about the current version and for downloading instructions.

Our main mirror is located at `http://mirrors.sunsite.dk/mysql/'.

For a complete up-to-date list of MySQL web/download mirrors, see
`http://www.mysql.com/downloads/mirrors.html'.  There you will also
find information about becoming a MySQL mirror site and how to report a
bad or out-of-date mirror.


Verifying Package Integrity Using `MD5 Checksums' or `GnuPG'
------------------------------------------------------------

After you have downloaded the MySQL package that suits your needs and
before you attempt to install it, you should make sure it is intact and
has not been tampered with.

MySQL AB offers two means of integrity checking: `MD5 checksums' and
cryptographic signatures using `GnuPG', the `GNU Privacy Guard'.

Verifying the `MD5 Checksum'
----------------------------

After you have downloaded the package, you should check, if the MD5
checksum matches the one provided on the MySQL download pages. Each
package has an individual checksum, that you can verify with the
following command:

     shell> md5sum <package>

Note, that not all operating systems support the `md5sum' command - on
some it is simply called `md5', others do not ship it at all. On Linux,
it is part of the `GNU Text Utilities' package, which is available for
a wide range of platforms. You can download the source code from
`http://www.gnu.org/software/textutils/' as well. If you have `OpenSSL'
installed, you can also use the command `openssl md5 <package>'
instead. A DOS/Windows implementation of the `md5' command is available
from `http://www.fourmilab.ch/md5/'.

Example:
     shell> md5sum mysql-standard-4.0.10-gamma-pc-linux-i686.tar.gz
     155836a7ed8c93aee6728a827a6aa153
                     mysql-standard-4.0.10-gamma-pc-linux-i686.tar.gz

You should check, if the resulting checksum matches the one printed on
the download page right below the respective package.

Signature Checking Using `GnuPG'
--------------------------------

A more reliable method of verifying the integrity of a package is using
cryptographic signatures. MySQL AB uses the `GNU Privacy Guard'
(`GnuPG'), an `Open Source' alternative to the very well-known `Pretty
Good Privacy' (`PGP') by Phil Zimmermann.  See `http://www.gnupg.org/'
and `http://www.openpgp.org/' for more information about
`OpenPGP'/`GnuPG' and how to obtain and install `GnuPG' on your system.
Most Linux distributions already ship with `GnuPG' installed by default.

Beginning with MySQL 4.0.10 (February 2003), MySQL AB has started
signing their downloadable packages with `GnuPG'. Cryptographic
signatures are a much more reliable method of verifying the integrity
and authenticity of a file.

To verify the signature for a specific package, you first need to
obtain a copy of MySQL AB's public GPG build key <build@mysql.com>. You
can either cut and paste it directly from here, or obtain it from
`http://www.keyserver.net/'.

     Key ID:
     pub  1024D/5072E1F5 2003-02-03
          MySQL Package signing key (www.mysql.com) <build@mysql.com>
     Fingerprint: A4A9 4068 76FC BD3C 4567  70C8 8C71 8D3B 5072 E1F5
     
     Public Key (ASCII-armored):
     
     -----BEGIN PGP PUBLIC KEY BLOCK-----
     Version: GnuPG v1.0.6 (GNU/Linux)
     Comment: For info see http://www.gnupg.org
     
     mQGiBD4+owwRBAC14GIfUfCyEDSIePvEW3SAFUdJBtoQHH/nJKZyQT7h9bPlUWC3
     RODjQReyCITRrdwyrKUGku2FmeVGwn2u2WmDMNABLnpprWPkBdCk96+OmSLN9brZ
     fw2vOUgCmYv2hW0hyDHuvYlQA/BThQoADgj8AW6/0Lo7V1W9/8VuHP0gQwCgvzV3
     BqOxRznNCRCRxAuAuVztHRcEAJooQK1+iSiunZMYD1WufeXfshc57S/+yeJkegNW
     hxwR9pRWVArNYJdDRT+rf2RUe3vpquKNQU/hnEIUHJRQqYHo8gTxvxXNQc7fJYLV
     K2HtkrPbP72vwsEKMYhhr0eKCbtLGfls9krjJ6sBgACyP/Vb7hiPwxh6rDZ7ITnE
     kYpXBACmWpP8NJTkamEnPCia2ZoOHODANwpUkP43I7jsDmgtobZX9qnrAXw+uNDI
     QJEXM6FSbi0LLtZciNlYsafwAPEOMDKpMqAK6IyisNtPvaLd8lH0bPAnWqcyefep
     rv0sxxqUEMcM3o7wwgfN83POkDasDbs3pjwPhxvhz6//62zQJ7Q7TXlTUUwgUGFj
     a2FnZSBzaWduaW5nIGtleSAod3d3Lm15c3FsLmNvbSkgPGJ1aWxkQG15c3FsLmNv
     bT6IXQQTEQIAHQUCPj6jDAUJCWYBgAULBwoDBAMVAwIDFgIBAheAAAoJEIxxjTtQ
     cuH1cY4AnilUwTXn8MatQOiG0a/bPxrvK/gCAJ4oinSNZRYTnblChwFaazt7PF3q
     zIhMBBMRAgAMBQI+PqPRBYMJZgC7AAoJEElQ4SqycpHyJOEAn1mxHijft00bKXvu
     cSo/pECUmppiAJ41M9MRVj5VcdH/KN/KjRtW6tHFPYhMBBMRAgAMBQI+QoIDBYMJ
     YiKJAAoJELb1zU3GuiQ/lpEAoIhpp6BozKI8p6eaabzF5MlJH58pAKCu/ROofK8J
     Eg2aLos+5zEYrB/LsrkCDQQ+PqMdEAgA7+GJfxbMdY4wslPnjH9rF4N2qfWsEN/l
     xaZoJYc3a6M02WCnHl6ahT2/tBK2w1QI4YFteR47gCvtgb6O1JHffOo2HfLmRDRi
     Rjd1DTCHqeyX7CHhcghj/dNRlW2Z0l5QFEcmV9U0Vhp3aFfWC4Ujfs3LU+hkAWzE
     7zaD5cH9J7yv/6xuZVw411x0h4UqsTcWMu0iM1BzELqX1DY7LwoPEb/O9Rkbf4fm
     Le11EzIaCa4PqARXQZc4dhSinMt6K3X4BrRsKTfozBu74F47D8Ilbf5vSYHbuE5p
     /1oIDznkg/p8kW+3FxuWrycciqFTcNz215yyX39LXFnlLzKUb/F5GwADBQf+Lwqq
     a8CGrRfsOAJxim63CHfty5mUc5rUSnTslGYEIOCR1BeQauyPZbPDsDD9MZ1ZaSaf
     anFvwFG6Llx9xkU7tzq+vKLoWkm4u5xf3vn55VjnSd1aQ9eQnUcXiL4cnBGoTbOW
     I39EcyzgslzBdC++MPjcQTcA7p6JUVsP6oAB3FQWg54tuUo0Ec8bsM8b3Ev42Lmu
     QT5NdKHGwHsXTPtl0klk4bQk4OajHsiy1BMahpT27jWjJlMiJc+IWJ0mghkKHt92
     6s/ymfdf5HkdQ1cyvsz5tryVI3Fx78XeSYfQvuuwqp2H139pXGEkg0n6KdUOetdZ
     Whe70YGNPw1yjWJT1IhMBBgRAgAMBQI+PqMdBQkJZgGAAAoJEIxxjTtQcuH17p4A
     n3r1QpVC9yhnW2cSAjq+kr72GX0eAJ4295kl6NxYEuFApmr1+0uUq/SlsQ==
     =YJkx
     -----END PGP PUBLIC KEY BLOCK-----

You can import this key into your public `GPG' keyring by using `gpg
--import'. See the `GPG' documentation for more info on how to work
with public keys.

After you have downloaded and imported the public build key, now
download your desired MySQL package and the corresponding signature,
which is also available from the download page.  The signature has the
file name extension `.asc'. For example, the signature for
`mysql-standard-4.0.10-gamma-pc-linux-i686.tar.gz' would be
`mysql-standard-4.0.10-gamma-pc-linux-i686.tar.gz.asc'.  Make sure that
both files are stored in the same directory and then run the following
command to verify the signature for this file:

     shell> gpg --verify <package>.asc
     
     Example:
     
     shell> gpg --verify mysql-standard-4.0.10-gamma-pc-linux-i686.tar.gz.asc
     gpg: Warning: using insecure memory!
     gpg: Signature made Mon 03 Feb 2003 08:50:39 PM MET using DSA key ID 5072E1F5
     gpg: Good signature from
          "MySQL Package signing key (www.mysql.com) <build@mysql.com>"

The "Good signature" message indicates that everything is all right.

For `RPM' packages, there is no separate signature - `RPM' packages
actually have a built-in `GPG' signature and `MD5 checksum'. You can
verify them by running the following command:

     shell> rpm --checksig <package>.rpm
     
     Example:
     
     shell> rpm --checksig MySQL-server-4.0.10-0.i386.rpm
     MySQL-server-4.0.10-0.i386.rpm: md5 gpg OK

*Note:* If you are using RPM 4.1 and it complains about `(GPG) NOT OK
(MISSING KEYS: GPG#5072e1f5)' (even though you have imported it into
your GPG public keyring), you need to import the key into the RPM
keyring first. RPM 4.1 no longer uses your GPG keyring (and GPG
itself), but rather maintains its own keyring (because it's a system
wide application and the GPG public keyring is user-specific file). To
import the MySQL public key into the RPM keyring, please use the
following command:

     shell> rpm --import <pubkey>
     
     Example:
     
     shell> rpm --import mysql_pubkey.asc

In case you notice that the `MD5 checksum' or `GPG' signatures do not
match, first try to download the respective package one more time,
maybe from another mirror site. If you repeatedly can not successfully
verify the integrity of the package, please notify us about such
incidents including the full package name and the download site you
have been using at <webmaster@mysql.com> or <build@mysql.com>.


Operating Systems Supported by MySQL
------------------------------------

We use GNU Autoconf, so it is possible to port MySQL to all modern
systems with working Posix threads and a C++ compiler.  (To compile
only the client code, a C++ compiler is required but not threads.)  We
use and develop the software ourselves primarily on Linux (SuSE and Red
Hat), FreeBSD and Sun Solaris (Versions 8 and 9).

Note that for many operating systems, the native thread support works
only in the latest versions. MySQL has been reported to compile
successfully on the following operating system/thread package
combinations:

   * AIX 4.x, 5.x with native threads.  *Note IBM-AIX::.

   * Amiga.

   * BSDI 2.x with the MIT-pthreads package.  *Note BSDI::.

   * BSDI 3.0, 3.1 and 4.x with native threads.  *Note BSDI::.

   * SCO OpenServer with a recent port of the FSU Pthreads package.
     *Note SCO::.

   * SCO UnixWare 7.1.x.  *Note SCO UnixWare::.

   * DEC Unix 4.x with native threads.  *Note Alpha-DEC-UNIX::.

   * FreeBSD 2.x with the MIT-pthreads package.  *Note FreeBSD::.

   * FreeBSD 3.x and 4.x with native threads.  *Note FreeBSD::.

   * FreeBSD 4.x with Linuxthreads.  *Note FreeBSD::.

   * HP-UX 10.20 with the DCE threads or the MIT-pthreads package.
     *Note HP-UX 10.20::.

   * HP-UX 11.x with the native threads.  *Note HP-UX 11.x::.

   * Linux 2.0+ with LinuxThreads 0.7.1+ or `glibc' 2.0.7+.  *Note
     Linux::.

   * Mac OS X.  *Note Mac OS X::.

   * NetBSD 1.3/1.4 Intel and NetBSD 1.3 Alpha (Requires GNU make).
     *Note NetBSD::.

   * Novell NetWare 6.0.  *Note Novell NetWare::.

   * OpenBSD > 2.5 with native threads. OpenBSD < 2.5 with the
     MIT-pthreads package.  *Note OpenBSD::.

   * OS/2 Warp 3, FixPack 29 and OS/2 Warp 4, FixPack 4.  *Note OS/2::.

   * SGI Irix 6.x with native threads.  *Note SGI-Irix::.

   * Solaris 2.5 and above with native threads on SPARC and x86.  *Note
     Solaris::.

   * SunOS 4.x with the MIT-pthreads package.  *Note Solaris::.

   * Tru64 Unix

   * Windows 9x, Me, NT, 2000 and XP.  *Note Windows::.

Note that not all platforms are suited equally well for running MySQL.
How well a certain platform is suited for a high-load mission-critical
MySQL server is determined by the following factors:

   * General stability of the thread library. A platform may have
     excellent reputation otherwise, but if the thread library is
     unstable in the code that is called by MySQL, even if everything
     else is perfect, MySQL will be only as stable as the thread
     library.

   * The ability of the kernel and/or thread library to take advantage
     of *SMP* on multi-processor systems. In other words, when a process
     creates a thread, it should be possible for that thread to run on
     a different CPU than the original process.

   * The ability of the kernel and/or the thread library to run many
     threads which acquire/release a mutex over a short critical region
     frequently without excessive context switches. In other words, if
     the implementation of `pthread_mutex_lock()' is too anxious to
     yield CPU time, this will hurt MySQL tremendously. If this issue
     is not taken care of, adding extra CPUs will actually make MySQL
     slower.

   * General filesystem stability/performance.

   * Ability of the filesystem to deal with large files at all and deal
     with them efficiently, if your tables are big.

   * Our level of expertise here at MySQL AB with the platform. If we
     know a platform well, we introduce platform-specific
     optimisations/fixes enabled at compile time. We can also provide
     advice on configuring your system optimally for MySQL.

   * The amount of testing of similar configurations we have done
     internally.

   * The number of users that have successfully run MySQL on that
     platform in similar configurations. If this number is high, the
     chances of hitting some platform-specific surprises are much
     smaller.

Based on the preceding criteria, the best platforms for running MySQL
at this point are x86 with SuSE Linux 8.2, 2.4 kernel, and ReiserFS (or
any similar Linux distribution) and SPARC with Solaris (2.7-9). FreeBSD
comes third, but we really hope it will join the top club once the
thread library is improved. We also hope that at some point we will be
able to include all other platforms on which MySQL compiles, runs okay,
but not quite with the same level of stability and performance, into
the top category. This will require some effort on our part in
cooperation with the developers of the OS/library components MySQL
depends upon. If you are interested in making one of those components
better, are in a position to influence their development, and need more
detailed instructions on what MySQL needs to run better, send an e-mail
to the MySQL internals mailing list.  *Note Mailing-list::.

Please note that the preceding comparison is not to say that one OS is
better or worse than the other in general. We are talking about
choosing a particular OS for a dedicated purpose--running MySQL, and
compare platforms in that regard only. With this in mind, the result of
this comparison would be different if we included more issues into it.
And in some cases, the reason one OS is better than the other could
simply be that we have put forth more effort into testing on and
optimising for that particular platform.  We are just stating our
observations to help you decide on which platform to use MySQL on in
your setup.


Which MySQL Version to Use
--------------------------

The first decision to make is whether you want to use the latest
development release or the last production (stable) release:

   * Normally, if you are beginning to use MySQL for the first time or
     trying to port it to some system for which there is no binary
     distribution, we recommend going with the production release
     (currently version 4.0).  Note that all MySQL releases are checked
     with the MySQL benchmarks and an extensive test suite before each
     release (even the development releases).

   * Otherwise, if you are running an old system and want to upgrade,
     but don't want to take chances with a non-seamless upgrade, you
     should upgrade to the latest in the same branch you are using
     (where only the last version number is newer than yours).  We have
     tried to fix only fatal bugs and make small, relatively safe
     changes to that version.

The second decision to make is whether you want to use a source
distribution or a binary distribution.  In most cases you should
probably use a binary distribution, if one exists for your platform, as
this generally will be easier to install than a source distribution.

In the following cases you probably will be better off with a source
installation:

   * If you want to install MySQL at some explicit location.  (The
     standard binary distributions are "ready to run" at any place, but
     you may want to get even more flexibility).

   * To be able to satisfy different user requirements, we are
     providing two different binary versions: one compiled with the
     non-transactional storage engines (a small, fast binary), and one
     configured with the most important extended options like
     transaction-safe tables.  Both versions are compiled from the same
     source distribution.  All native `MySQL' clients can connect to
     both MySQL versions.

     The extended MySQL binary distribution is marked with the `-max'
     suffix and is configured with the same options as `mysqld-max'.
     *Note `mysqld-max': mysqld-max.

     If you want to use the `MySQL-Max' RPM, you must first install the
     standard `MySQL-server' RPM.

   * If you want to configure `mysqld' with some extra features that are
     not in the standard binary distributions.  Here is a list of the
     most common extra options that you may want to use:

        * `--with-innodb' (default for MySQL 4.0 and onwards)

        * `--with-berkeley-db' (not available on all platforms)

        * `--with-raid'

        * `--with-libwrap'

        * `--with-named-z-libs' (This is done for some of the binaries)

        * `--with-debug[=full]'

   * The default binary distribution is normally compiled with support
     for all character sets and should work on a variety of processors
     from the same processor family.

     If you want a faster MySQL server you may want to recompile it
     with support for only the character sets you need, use a better
     compiler (like `pgcc'), or use compiler options that are better
     optimised for your processor.

   * If you have found a bug and reported it to the MySQL development
     team you will probably receive a patch that you need to apply to
     the source distribution to get the bug fixed.

   * If you want to read (and/or modify) the C and C++ code that makes
     up MySQL, you should get a source distribution.  The source code is
     always the ultimate manual.  Source distributions also contain more
     tests and examples than binary distributions.

The MySQL naming scheme uses release numbers that consist of three
numbers and a suffix.  For example, a release name like
`mysql-4.1.0-alpha' is interpreted like this:

   * The first number (`4') is the major version and also describes the
     file format.  All Version 4 releases have the same file format.

   * The second number (`1') is the release level.

   * The third number (`0') is the version number within the release
     level.  This is incremented for each new distribution.  Usually you
     want the latest version for the release level you have chosen.

   * The suffix (`alpha') indicates the stability level of the release.
     The possible suffixes are:

        - `alpha' indicates that the release contains some large
          section of new code that hasn't been 100% tested.  Known bugs
          (usually there are none) should be documented in the News
          section.  *Note News::.  There are also new commands and
          extensions in most alpha releases.  Active development that
          may involve major code changes can occur on an alpha release,
          but everything will be tested before doing a release.  There
          should be no known bugs in any MySQL release.

        - `beta' means that all new code has been tested.  No major new
          features that could cause corruption on old code are added.
          There should be no known bugs.  A version changes from alpha
          to beta when there haven't been any reported fatal bugs
          within an alpha version for at least a month and we don't
          plan to add any features that could make any old command more
          unreliable.

        - `gamma' is a beta that has been around a while and seems to
          work fine.  Only minor fixes are added.  This is what many
          other companies call a release.

        - If there is no suffix, it means that the version has been run
          for a while at many different sites with no reports of bugs
          other than platform-specific bugs.  Only critical bug fixes
          are applied to the release. This is what we call a production
          (stable) release.

In the MySQL development process, multiple versions co-exist and are at
a different stage. Naturally, relevant bugfixes from an earlier series
also propagate upward.
   * For the old stable/production series `3.23', new versions are only
     released for critical bugs.

   * The current series `4.0') is stable/production quality, with new
     versions released for bugfixes. No new features are added that
     could influence the code stability.

   * In the alpha branch `4.1' major new features are added. Sources
     and binaries are available for use and testing on development
     systems.

   * The development branch `5.0' is only available from the BitKeeper
     tree.

All versions of MySQL are run through our standard tests and benchmarks
to ensure that they are relatively safe to use.  Because the standard
tests are extended over time to check for all previously found bugs,
the test suite keeps getting better.

Note that all releases have been tested at least with:

An internal test suite
     This is part of a production system for a customer.  It has many
     tables with hundreds of megabytes of data.

The MySQL benchmark suite
     This runs a range of common queries.  It is also a test to see
     whether the latest batch of optimisations actually made the code
     faster.  *Note MySQL Benchmarks::.

The `crash-me' test
     This tries to determine what features the database supports and
     what its capabilities and limitations are.  *Note MySQL
     Benchmarks::.

Another test is that we use the newest MySQL version in our internal
production environment, on at least one machine.  We have more than 100
gigabytes of data to work with.


Installation Layouts
--------------------

This section describes the default layout of the directories created by
installing binary and source distributions.

A binary distribution is installed by unpacking it at the installation
location you choose (typically `/usr/local/mysql') and creates the
following directories in that location:

*Directory* *Contents of directory*
`bin'       Client programs and the
            `mysqld' server
`data'      Log files, databases
`docs'      Documentation, ChangeLog
`include'   Include (header) files
`lib'       Libraries
`scripts'   `mysql_install_db'
`share/mysql'Error message files
`sql-bench' Benchmarks

A source distribution is installed after you configure and compile it.
By default, the installation step installs files under `/usr/local', in
the following subdirectories:

*Directory* *Contents of directory*
`bin'       Client programs and scripts
`include/mysql'Include (header) files
`info'      Documentation in Info format
`lib/mysql' Libraries
`libexec'   The `mysqld' server
`share/mysql'Error message files
`sql-bench' Benchmarks and `crash-me' test
`var'       Databases and log files

Within an installation directory, the layout of a source installation
differs from that of a binary installation in the following ways:

   * The `mysqld' server is installed in the `libexec' directory rather
     than in the `bin' directory.

   * The data directory is `var' rather than `data'.

   * `mysql_install_db' is installed in the `/usr/local/bin' directory
     rather than in `/usr/local/mysql/scripts'.

   * The header file and library directories are `include/mysql' and
     `lib/mysql' rather than `include' and `lib'.

You can create your own binary installation from a compiled source
distribution by executing the script `scripts/make_binary_distribution'.


How and When Updates Are Released
---------------------------------

MySQL is evolving quite rapidly here at MySQL AB and we want to share
this with other MySQL users.  We try to make a release when we have
very useful features that others seem to have a need for.

We also try to help out users who request features that are easy to
implement.  We take note of what our licensed users want to have, and
we especially take note of what our extended e-mail supported customers
want and try to help them out.

No one has to download a new release.  The News section will tell you if
the new release has something you really want.  *Note News::.

We use the following policy when updating MySQL:

   * For each minor update, the last number in the version string is
     incremented.  When there are major new features or minor
     incompatibilities with previous versions, the second number in the
     version string is incremented.  When the file format changes, the
     first number is increased.

   * Production (stable-tested) releases are meant to appear about 1-2
     times a year, but if small bugs are found, a release with only bug
     fixes will be released.

   * Working releases/bug fixes to old releases are meant to appear
     about every 1-8 weeks.

   * Binary distributions for some platforms will be made by us for
     major releases.  Other people may make binary distributions for
     other systems but probably less frequently.

   * We usually make patches available as soon as we have located and
     fixed small bugs. They usually are immediately available from our
     public BitKeeper repositories. They will also be included in the
     next release.

   * Non-critical but annoying bugs will be added to the MySQL source
     repository and they will be fixed in the next release.

   * If there is, by any chance, a fatal bug in a release we will make
     a new release as soon as possible.  We would like other companies
     to do this, too.

The current production release is Version 4.0; we have already moved
active development to Version 4.1 and 5.0.  Bugs will still be fixed in
the 4.0 version, and critical bugs also in the 3.23 series.  We don't
believe in a complete freeze, as this also leaves out bug fixes and
things that "must be done."  "Somewhat frozen" means that we may add
small things that "almost surely will not affect anything that's
already working."

MySQL uses a slightly different naming scheme from most other products.
In general it's relatively safe to use any version that has been out for
a couple of weeks without being replaced with a new version.  *Note
Which version::.


Release Philosophy - No Known Bugs in Releases
----------------------------------------------

We put a lot of time and effort into making our releases bug free.  To
our knowledge, we have not released a single MySQL version with any
_known_ 'fatal' repeatable bugs.

A fatal bug is something that crashes MySQL under normal usage, gives
wrong answers for normal queries, or has a security problem.

We have documented all open problems, bugs and things that are
dependent on design decisions.  *Note Bugs::.

Our aim is to fix everything that is fixable, but without risking
making a stable MySQL version less stable. In certain cases, this means
we can fix an issue in the development version(s), but not in the
stable (production) version. Naturally, we document such issues so that
users are aware.

Here is a description of how our build process works:
   * We monitor bugs from our customer support list, the MySQL external
     mailing lists and the bugs database at `http://bugs.mysql.com/'.

   * All reported bugs for live versions are entered into the bugs
     database.

   * When we fix a bug, we always try to make a test case of it and
     include this into our test system to ensure that the bug will never
     come back. (About 90% of all fixed bugs have a test case.)

   * We also create test cases for all new features we add to MySQL.

   * Before we start to build a new MySQL release, we ensure that all
     reported repeatable bugs for the MySQL version (3.23.x, 4.0.x, etc)
     are fixed.  If something is impossible to fix (because some
     internal design decision in MySQL) we document this in the manual.
     *Note Bugs::.

   * We do a build on all platforms for which we support binaries (15+
     platforms) and run our test suite and benchmark suite on all of
     them.

   * We will not publish a binary for a platform for which the test or
     benchmark suite fails.  If it's a general error in the source, we
     fix this and do the build plus tests on all systems again, from
     scratch.

   * If we, during the build and test process (which takes 2-3 days),
     receive a report regarding a fatal bug (for example, one that
     causes a core dump), we fix this and restart the build process.

   * After publishing the binaries on `http://www.mysql.com/', we send
     out an announce email on the `mysql' and `announce' mailing lists.
     *Note Mailing-list::.  The announcement message contains a list of
     all changes to the release and any known problems with the release.
     (The 'known problems' section in the release notes has only been
     needed in a handful of releases.)

   * To quickly give our users access to the latest MySQL features, we
     do a new MySQL release every 4-5 weeks.

   * If we, after the release is done, get any bug reports that there
     was (after all) anything critically wrong with the build on a
     specific platform, we will fix this at once and build a new `'a''
     release for that platform. Thanks to our large user base, problems
     are found quickly.

   * Our track record for making good releases is quite good.  In the
     last 150 releases, we had to do a new build for less than 10
     releases (in 3 of these cases, the bug was a faulty glibc library
     on one of our build machines that took us a long time to track
     down).


MySQL Binaries Compiled by MySQL AB
-----------------------------------

As a service, we at MySQL AB provide a set of binary distributions of
MySQL that are compiled at our site or at sites where customers kindly
have given us access to their machines.

In addition to the binaries provided in platform-specific package
formats (see *Note Quick Standard Installation::), we do offer binary
distributions for a number of platforms by means of compressed tar
archives (`.tar.gz').

These distributions are generated using the script
`Build-tools/Do-compile' which compiles the source code and creates the
binary `tar.gz' archive using `scripts/make_binary_distribution' These
binaries are configured and built with the following compilers and
options.

Binaries built on MySQL AB development systems:

Linux 2.4.xx x86 with `gcc' 2.95.3
     `CFLAGS="-O2 -mcpu=pentiumpro" CXX=gcc CXXFLAGS="-O2
     -mcpu=pentiumpro -felide-constructors" ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --enable-assembler --disable-shared
     --with-client-ldflags=-all-static
     --with-mysqld-ldflags=-all-static'

Linux 2.4.xx Intel Itanium 2 with `ecc' (Intel C++ Itanium Compiler 7.0)
     `CC=ecc CFLAGS="-O2 -tpp2 -ip -nolib_inline" CXX=ecc CXXFLAGS="-O2
     -tpp2 -ip -nolib_inline" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile'

Linux 2.4.xx Intel Itanium with `ecc' (Intel C++ Itanium Compiler 7.0)
     `CC=ecc CFLAGS=-tpp1 CXX=ecc CXXFLAGS=-tpp1 ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile'

Linux 2.4.xx alpha with `ccc' (Compaq C V6.2-505 / Compaq C++ V6.3-006)
     `CC=ccc CFLAGS="-fast -arch generic" CXX=cxx CXXFLAGS="-fast -arch
     generic -noexceptions -nortti" ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --with-mysqld-ldflags=-non_shared
     --with-client-ldflags=-non_shared --disable-shared'

Linux 2.4.xx s390 with `gcc' 2.95.3
     `CFLAGS="-O2" CXX=gcc CXXFLAGS="-O2 -felide-constructors"
     ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --disable-shared
     --with-client-ldflags=-all-static
     --with-mysqld-ldflags=-all-static'

Linux 2.4.xx x86_64 (AMD64) with `gcc' 3.2.1
     `CXX=gcc ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile  --disable-shared'

Sun Solaris 8 x86 with `gcc' 3.2.3
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --localstatedir=/usr/local/mysql/data
     --libexecdir=/usr/local/mysql/bin --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --disable-shared --with-innodb'

Sun Solaris 8 sparc with `gcc' 3.2
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --enable-assembler --with-named-z-libs=no
     --with-named-curses-libs=-lcurses --disable-shared'

Sun Solaris 8 sparc 64bit with `gcc' 3.2
     `CC=gcc CFLAGS="-O3 -m64 -fno-omit-frame-pointer" CXX=gcc
     CXXFLAGS="-O3 -m64 -fno-omit-frame-pointer -felide-constructors
     -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --enable-assembler --with-named-z-libs=no
     --with-named-curses-libs=-lcurses --disable-shared'

Sun Solaris 9 sparc with `gcc' 2.95.3
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --enable-assembler
     --with-named-curses-libs=-lcurses --disable-shared'

Sun Solaris 9 sparc with `cc-5.0' (Sun Forte 5.0)
     `CC=cc-5.0 CXX=CC ASFLAGS="-xarch=v9" CFLAGS="-Xa -xstrconst -mt
     -D_FORTEC_ -xarch=v9" CXXFLAGS="-noex -mt -D_FORTEC_ -xarch=v9"
     ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --enable-assembler --with-named-z-libs=no
     --enable-thread-safe-client --disable-shared'

IBM AIX 4.3.2 ppc with `gcc' 3.2.3
     `CFLAGS="-O2 -mcpu=powerpc -Wa,-many " CXX=gcc CXXFLAGS="-O2
     -mcpu=powerpc -Wa,-many  -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --with-named-z-libs=no --disable-shared'

IBM AIX 4.3.3 ppc with `xlC_r' (IBM Visual Age C/C++ 6.0)
     `CC=xlc_r CFLAGS="-ma -O2 -qstrict -qoptimize=2 -qmaxmem=8192"
     CXX=xlC_r CXXFLAGS ="-ma -O2 -qstrict -qoptimize=2 -qmaxmem=8192"
     ./configure --prefix=/usr/local/mysql
     --localstatedir=/usr/local/mysql/data
     --libexecdir=/usr/local/mysql/bin --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --with-named-z-libs=no --disable-shared --with-innodb'

IBM AIX 5.1.0 ppc with `gcc' 3.3
     `CFLAGS="-O2 -mcpu=powerpc -Wa,-many" CXX=gcc CXXFLAGS="-O2
     -mcpu=powerpc -Wa,-many  -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --with-server-suffix="-pro"
     --enable-thread-safe-client --enable-local-infile
     --with-named-z-libs=no --disable-shared'

HP-UX 10.20 pa-risc1.1 with `gcc' 3.1
     `CFLAGS="-DHPUX -I/opt/dce/include -O3 -fPIC" CXX=gcc
     CXXFLAGS="-DHPUX -I/opt/dce /include -felide-constructors
     -fno-exceptions -fno-rtti -O3 -fPIC" ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile  --with-pthread
     --with-named-thread-libs=-ldce --with-lib-ccflags=-fPIC
     --disable-shared'

HP-UX 11.11 pa-risc2.0 64bit with `aCC' (HP ANSI C++ B3910B A.03.33)
     `CC=cc CXX=aCC CFLAGS=+DD64 CXXFLAGS=+DD64 ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile --disable-shared'

HP-UX 11.11 pa-risc2.0 32bit with `aCC' (HP ANSI C++ B3910B A.03.33)
     `CC=cc CXX=aCC CFLAGS="+DAportable" CXXFLAGS="+DAportable"
     ./configure --prefix=/usr/local/mysql
     --localstatedir=/usr/local/mysql/data
     --libexecdir=/usr/local/mysql/bin --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --disable-shared --with-innodb'

Apple Mac OS X 10.2 powerpc with `gcc' 3.1
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile  --disable-shared'

FreeBSD 4.7 i386 with `gcc' 2.95.4
     `CFLAGS=-DHAVE_BROKEN_REALPATH ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --enable-assembler --with-named-z-libs=not-used --disable-shared'

QNX Neutrino 6.2.1 i386 with `gcc' 2.95.3qnx-nto 20010315
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile  --disable-shared'

The following binaries are built on third-party systems kindly provided
to MySQL AB by other users. Please note that these are only provided as
a courtesy. Since MySQL AB does not have full control over these
systems, we can only provide limited support for the binaries built on
these systems.

SCO Unix 3.2v5.0.6 i386 with `gcc' 2.95.3
     `CFLAGS="-O3 -mpentium" LDFLAGS=-static CXX=gcc CXXFLAGS="-O3
     -mpentium -felide-constructors" ./configure
     --prefix=/usr/local/mysql --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile
     --with-named-z-libs=no --enable-thread-safe-client
     --disable-shared'

SCO OpenUnix 8.0.0 i386 with `CC' 3.2
     `CC=cc CFLAGS="-O" CXX=CC ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --with-named-z-libs=no
     --enable-thread-safe-client --disable-shared'

Compaq Tru64 OSF/1 V5.1 732 alpha with `cc/cxx' (Compaq C V6.3-029i / DIGITAL C++ V6.1-027)
     `CC="cc -pthread" CFLAGS="-O4 -ansi_alias -ansi_args -fast -inline
     speed -speculate all" CXX="cxx -pthread" CXXFLAGS="-O4 -ansi_alias
     -fast -inline speed -speculate all -noexceptions -nortti"
     ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --with-prefix=/usr/local/mysql
     --with-named-thread-libs="-lpthread -lmach -lexc -lc"
     --disable-shared --with-mysqld-ldflags=-all-static'

SGI Irix 6.5 IP32 with `gcc' 3.0.1
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile  --disable-shared'

FreeBSD 5.0 sparc64 with `gcc' 3.2.1
     `CFLAGS=-DHAVE_BROKEN_REALPATH ./configure
     --prefix=/usr/local/mysql --localstatedir=/usr/local/mysql/data
     --libexecdir=/usr/local/mysql/bin --with-extra-charsets=complex
     --enable-thread-safe-client --enable-local-infile --disable-shared
     --with-innodb'

The following compile options have been used for binary packages MySQL
AB used to provide in the past. These binaries are no longer being
updated, but the compile options are kept here for reference purposes.

Linux 2.2.xx sparc with `egcs' 1.1.2
     `CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc CXXFLAGS="-O3
     -fno-omit-frame-pointer -felide-constructors -fno-exceptions
     -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex --enable-thread-safe-client
     --enable-local-infile --enable-assembler --disable-shared'

Linux 2.2.x with x686 with `gcc' 2.95.2
     `CFLAGS="-O3 -mpentiumpro" CXX=gcc CXXFLAGS="-O3 -mpentiumpro
     -felide-constructors -fno-exceptions -fno-rtti" ./configure
     --prefix=/usr/local/mysql --enable-assembler
     --with-mysqld-ldflags=-all-static --disable-shared
     --with-extra-charsets=complex'

SunOS 4.1.4 2 sun4c with `gcc' 2.7.2.1
     `CC=gcc CXX=gcc CXXFLAGS="-O3 -felide-constructors" ./configure
     --prefix=/usr/local/mysql --disable-shared
     --with-extra-charsets=complex --enable-assembler'

SunOS 5.5.1 (and above) sun4u with `egcs' 1.0.3a or 2.90.27 or gcc 2.95.2 and newer
     `CC=gcc CFLAGS="-O3" CXX=gcc CXXFLAGS="-O3 -felide-constructors
     -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql
     --with-low-memory --with-extra-charsets=complex --enable-assembler'

SunOS 5.6 i86pc with `gcc' 2.8.1
     `CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure --prefix=/usr/local/mysql
     --with-low-memory --with-extra-charsets=complex'

BSDI BSD/OS 3.1 i386 with `gcc' 2.7.2.1
     `CC=gcc CXX=gcc CXXFLAGS=-O ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex'

BSDI BSD/OS 2.1 i386 with `gcc' 2.7.2
     `CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex'

AIX 2 4 with `gcc' 2.7.2.2
     `CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure --prefix=/usr/local/mysql
     --with-extra-charsets=complex'

Anyone who has more optimal options for any of the preceding
configurations listed can always mail them to the MySQL internals s
mailing list.  *Note Mailing-list::.

RPM distributions prior to MySQL Version 3.22 are user-contributed.
Beginning with Version 3.22, the RPMs are generated by us at MySQL AB.

If you want to compile a debug version of MySQL, you should add
`--with-debug' or `--with-debug=full' to the preceding configure lines
and remove any `-fomit-frame-pointer' options.

For the Windows distribution, please see *Note Windows installation::.


Installing a MySQL Binary Distribution
--------------------------------------

This chapter covers the installation of MySQL binary distributions
(`.tar.gz' Archives) for various platforms (see *Note MySQL binaries::
for a detailed list).

In addition to these generic packages, we also offer binaries in
platform-specific package formats for selected platforms.  See *Note
Quick Standard Installation:: for more information on how to install
these.

The generic MySQL binary distributions are packaged as gzip-compressed
GNU tar archives (`.tar.gz'). You need the following tools to install a
MySQL binary distribution:

   * GNU `gunzip' to uncompress the distribution.

   * A reasonable `tar' to unpack the distribution. GNU `tar' is known
     to work. Some `tar' implementations that come pre-installed with
     the operating system (e.g. Sun `tar') are known to have problems
     (with long file names, for example). In that case, you should
     install GNU `tar' first.

If you run into problems, *please always use `mysqlbug'* when posting
questions to a MySQL mailing list.  Even if the problem isn't a bug,
`mysqlbug' gathers system information that will help others solve your
problem.  By not using `mysqlbug', you lessen the likelihood of getting
a solution to your problem.  You will find `mysqlbug' in the `bin'
directory after you unpack the distribution.  *Note Bug reports::.

The basic commands you must execute to install and use a MySQL binary
distribution are:

     shell> groupadd mysql
     shell> useradd -g mysql mysql
     shell> cd /usr/local
     shell> gunzip < /path/to/mysql-VERSION-OS.tar.gz | tar xvf -
     shell> ln -s full-path-to-mysql-VERSION-OS mysql
     shell> cd mysql
     shell> scripts/mysql_install_db
     shell> chown -R root  .
     shell> chown -R mysql data
     shell> chgrp -R mysql .
     shell> bin/mysqld_safe --user=mysql &

If your version of MySQL is older than 4.0, substitute `bin/safe_mysqld'
for `bin/mysqld_safe' in the final command.

You can add new users using the `bin/mysql_setpermission' script if you
install the `DBI' and `DBD-mysql' Perl modules.

A more detailed description follows.

To install a binary distribution, follow these steps, then proceed to
*Note Post-installation::, for post-installation setup and testing:

  1. Pick the directory under which you want to unpack the
     distribution, and move into it. In the following example, we
     unpack the distribution under `/usr/local' (The following
     instructions, therefore, assume you have permission to create
     files and directories in `/usr/local'.  If that directory is
     protected, you will need to perform the installation as `root'.)

  2. Obtain a distribution file from one of the sites listed in *Note
     Getting MySQL: Getting MySQL.

     MySQL binary distributions are provided as compressed `tar'
     archives and have names like `mysql-VERSION-OS.tar.gz', where
     `VERSION' is a number (for example, `3.21.15'), and `OS' indicates
     the type of operating system for which the distribution is intended
     (for example, `pc-linux-gnu-i586').  Note that all binaries are
     built from the same MySQL source distribution.

  3. Add a user and group for `mysqld' to run as:

          shell> groupadd mysql
          shell> useradd -g mysql mysql

     These commands add the `mysql' group and the `mysql' user.  The
     syntax for `useradd' and `groupadd' may differ slightly on
     different versions of Unix.  They may also be called `adduser' and
     `addgroup'.  You may wish to call the user and group something
     else instead of `mysql'.

  4. Change into the intended installation directory:

          shell> cd /usr/local

  5. Unpack the distribution, which will create the installation
     directory.  Then create a symbolic link to that directory:

          shell> gunzip < /path/to/mysql-VERSION-OS.tar.gz | tar xvf -
          shell> ln -s full-path-to-mysql-VERSION-OS mysql

     Using GNU tar, you can also replace the first line with the
     following alternative command to decompress and extract the
     distribution in one go:

          shell> tar zxvf /path/to/mysql-VERSION-OS.tar.gz

     The first command creates a directory named `mysql-VERSION-OS'.
     The second command makes a symbolic link to that directory.  This
     lets you refer more easily to the installation directory as
     `/usr/local/mysql'.

  6. Change into the installation directory:

          shell> cd mysql

     You will find several files and subdirectories in the `mysql'
     directory.  The most important for installation purposes are the
     `bin' and `scripts' subdirectories.

    `bin'
          This directory contains client programs and the server You
          should add the full pathname of this directory to your `PATH'
          environment variable so that your shell finds the MySQL
          programs properly. *Note Environment variables::.

    `scripts'
          This directory contains the `mysql_install_db' script used to
          initialise the `mysql' database containing the grant tables
          that store the server access permissions.

  7. If you would like to use `mysqlaccess' and have the MySQL
     distribution in some non-standard place, you must change the
     location where `mysqlaccess' expects to find the `mysql' client.
     Edit the `bin/mysqlaccess' script at approximately line 18.
     Search for a line that looks like this:

          $MYSQL     = '/usr/local/bin/mysql';    # path to mysql executable

     Change the path to reflect the location where `mysql' actually is
     stored on your system.  If you do not do this, you will get a
     `Broken pipe' error when you run `mysqlaccess'.

  8. Create the MySQL grant tables (necessary only if you haven't
     installed MySQL before):
          shell> scripts/mysql_install_db

     Note that MySQL versions older than Version 3.22.10 started the
     MySQL server when you run `mysql_install_db'.  This is no longer
     true.

  9. Change ownership of binaries to `root' and ownership of the data
     directory to the user that you will run `mysqld' as:

          shell> chown -R root  /usr/local/mysql/.
          shell> chown -R mysql /usr/local/mysql/data
          shell> chgrp -R mysql /usr/local/mysql/.

     The first command changes the `owner' attribute of the files to the
     `root' user, the second one changes the `owner' attribute of the
     data directory to the `mysql' user, and the third one changes the
     `group' attribute to the `mysql' group.

 10. If you want to install support for the Perl `DBI'/`DBD' interface,
     see *Note Perl support::.

 11. If you would like MySQL to start automatically when you boot your
     machine, you can copy `support-files/mysql.server' to the location
     where your system has its startup files.  More information can be
     found in the `support-files/mysql.server' script itself and in
     *Note Automatic start::.


After everything has been unpacked and installed, you should initialise
and test your distribution.

You can start the MySQL server with the following command:

     shell> bin/mysqld_safe --user=mysql &

Now proceed to *Note `mysqld_safe': mysqld_safe, and *Note
Post-installation::.


Installing a MySQL Source Distribution
======================================

Before you proceed with the source installation, check first to see if
our binary is available for your platform and if it will work for you.
We put a lot of effort into making sure that our binaries are built
with the best possible options.

You need the following tools to build and install MySQL from source:

   * GNU `gunzip' to uncompress the distribution.

   * A reasonable `tar' to unpack the distribution. GNU `tar' is known
     to work. Some `tar' implementations that come pre-installed with
     the operating system (e.g. Sun `tar') are known to have problems
     (with long file names, for example). In that case, you should
     install GNU `tar' first.

   * A working ANSI C++ compiler.  `gcc' >= 2.95.2, `egcs' >= 1.0.2 or
     `egcs 2.91.66', SGI C++, and SunPro C++ are some of the compilers
     that are known to work.  `libg++' is not needed when using `gcc'.
     `gcc' 2.7.x has a bug that makes it impossible to compile some
     perfectly legal C++ files, such as `sql/sql_base.cc'.  If you only
     have `gcc' 2.7.x, you must upgrade your `gcc' to be able to
     compile MySQL. `gcc' 2.8.1 is also known to have problems on some
     platforms, so it should be avoided if a new compiler exists for
     the platform.

     `gcc' >= 2.95.2 is recommended when compiling MySQL Version 3.23.x.

   * A good `make' program.  GNU `make' is always recommended and is
     sometimes required.  If you have problems, we recommend trying GNU
     `make' 3.75 or newer.

If you are using a recent version of `gcc', recent enough to understand
the `-fno-exceptions' option, it is *very important* that you use it.
Otherwise, you may compile a binary that crashes randomly. We also
recommend that you use `-felide-constructors' and `-fno-rtti' along
with `-fno-exceptions'. When in doubt, do the following:


     CFLAGS="-O3" CXX=gcc CXXFLAGS="-O3 -felide-constructors -fno-exceptions \
            -fno-rtti" ./configure --prefix=/usr/local/mysql --enable-assembler \
            --with-mysqld-ldflags=-all-static

On most systems this will give you a fast and stable binary.

If you run into problems, *please always use `mysqlbug'* when posting
questions to a MySQL mailing list.  Even if the problem isn't a bug,
`mysqlbug' gathers system information that will help others solve your
problem.  By not using `mysqlbug', you lessen the likelihood of getting
a solution to your problem.  You will find `mysqlbug' in the `scripts'
directory after you unpack the distribution.  *Note Bug reports::.

* Menu:

* Quick install::               Quick Installation Overview
* Applying patches::            Applying Patches
* configure options::           Typical `configure' Options
* Installing source tree::      Installing from the Development Source Tree
* Compilation problems::        Problems Compiling MySQL?
* MIT-pthreads::                MIT-pthreads Notes
* Windows source build::        Windows Source Distribution


Quick Installation Overview
---------------------------

The basic commands you must execute to install a MySQL source
distribution are:

     shell> groupadd mysql
     shell> useradd -g mysql mysql
     shell> gunzip < mysql-VERSION.tar.gz | tar -xvf -
     shell> cd mysql-VERSION
     shell> ./configure --prefix=/usr/local/mysql
     shell> make
     shell> make install
     shell> scripts/mysql_install_db
     shell> chown -R root  /usr/local/mysql
     shell> chown -R mysql /usr/local/mysql/var
     shell> chgrp -R mysql /usr/local/mysql
     shell> cp support-files/my-medium.cnf /etc/my.cnf
     shell> /usr/local/mysql/bin/mysqld_safe --user=mysql &

If your version of MySQL is older than 4.0, substitute `bin/safe_mysqld'
for `bin/mysqld_safe' in the final command.

If you want to have support for InnoDB tables, you should edit the
`/etc/my.cnf' file and remove the `#' character before the parameter
that starts with `innodb_...'.  *Note Option files::, and *Note InnoDB
start::.

If you start from a source RPM, do the following:

     shell> rpm --rebuild --clean MySQL-VERSION.src.rpm

This will make a binary RPM that you can install.

You can add new users using the `bin/mysql_setpermission' script if you
install the `DBI' and `DBD-mysql' Perl modules.

A more detailed description follows.

To install a source distribution, follow these steps, then proceed to
*Note Post-installation::, for post-installation initialisation and
testing:

  1. Pick the directory under which you want to unpack the
     distribution, and move into it.

  2. Obtain a distribution file from one of the sites listed in *Note
     Getting MySQL: Getting MySQL.

  3. If you are interested in using Berkeley DB tables with MySQL, you
     will need to obtain a patched version of the Berkeley DB source
     code.  Please read the chapter on Berkeley DB tables before
     proceeding.  *Note BDB::.

     MySQL source distributions are provided as compressed `tar'
     archives and have names like `mysql-VERSION.tar.gz', where
     `VERSION' is a number like 4.0.16.

  4. Add a user and group for `mysqld' to run as:

          shell> groupadd mysql
          shell> useradd -g mysql mysql

     These commands add the `mysql' group and the `mysql' user.  The
     syntax for `useradd' and `groupadd' may differ slightly on
     different versions of Unix.  They may also be called `adduser' and
     `addgroup'.  You may wish to call the user and group something
     else instead of `mysql'.

  5. Unpack the distribution into the current directory:
          shell> gunzip < /path/to/mysql-VERSION.tar.gz | tar xvf -

     This command creates a directory named `mysql-VERSION'.

  6. Change into the top-level directory of the unpacked distribution:

          shell> cd mysql-VERSION

     Note that currently you must configure and build MySQL from this
     top-level directory.  You cannot build it in a different directory.

  7. Configure the release and compile everything:

          shell> ./configure --prefix=/usr/local/mysql
          shell> make

     When you run `configure', you might want to specify some options.
     Run `./configure --help' for a list of options.  *Note `configure'
     options: configure options, discusses some of the more useful
     options.

     If `configure' fails, and you are going to send mail to a MySQL
     mailing list to ask for assistance, please include any lines from
     `config.log' that you think can help solve the problem.  Also
     include the last couple of lines of output from `configure' if
     `configure' aborts.  Post the bug report using the `mysqlbug'
     script.  *Note Bug reports::.

     If the compile fails, see *Note Compilation problems::, for help
     with a number of common problems.

  8. Install everything:

          shell> make install

     You might need to run this command as `root'.

  9. Create the MySQL grant tables (necessary only if you haven't
     installed MySQL before):

          shell> scripts/mysql_install_db

     Note that MySQL versions older than Version 3.22.10 started the
     MySQL server when you run `mysql_install_db'.  This is no longer
     true.

 10. Change ownership of binaries to `root' and ownership of the data
     directory to the user that you will run `mysqld' as:

          shell> chown -R root  /usr/local/mysql
          shell> chown -R mysql /usr/local/mysql/var
          shell> chgrp -R mysql /usr/local/mysql

     The first command changes the `owner' attribute of the files to the
     `root' user, the second one changes the `owner' attribute of the
     data directory to the `mysql' user, and the third one changes the
     `group' attribute to the `mysql' group.

 11. If you want to install support for the Perl `DBI'/`DBD' interface,
     see *Note Perl support::.

 12. If you would like MySQL to start automatically when you boot your
     machine, you can copy `support-files/mysql.server' to the location
     where your system has its startup files.  More information can be
     found in the `support-files/mysql.server' script itself and in
     *Note Automatic start::.

After everything has been installed, you should initialise and test your
distribution:

     shell> /usr/local/mysql/bin/mysqld_safe --user=mysql &

If that command fails immediately with `mysqld daemon ended', you can
find some information in the file `mysql-data-directory/'hostname'.err'.
The likely reason is that you already have another `mysqld' server
running.  *Note Multiple servers::.

Now proceed to *Note Post-installation::.


Applying Patches
----------------

Sometimes patches appear on the mailing list or are placed in the
patches area of the MySQL web site
(`http://www.mysql.com/downloads/patches.html').

To apply a patch from the mailing list, save the message in which the
patch appears in a file, change into the top-level directory of your
MySQL source tree, and run these commands:

     shell> patch -p1 < patch-file-name
     shell> rm config.cache
     shell> make clean

Patches from the FTP site are distributed as plain text files or as
files compressed with `gzip'.  Apply a plain patch as shown previously
for mailing list patches.  To apply a compressed patch, change into the
top-level directory of your MySQL source tree and run these commands:

     shell> gunzip < patch-file-name.gz | patch -p1
     shell> rm config.cache
     shell> make clean

After applying a patch, follow the instructions for a normal source
install, beginning with the `./configure' step.  After running the `make
install' step, restart your MySQL server.

You may need to bring down any currently running server before you run
`make install'.  (Use `mysqladmin shutdown' to do this.)  Some systems
do not allow you to install a new version of a program if it replaces
the version that is currently executing.


Typical `configure' Options
---------------------------

The `configure' script gives you a great deal of control over how you
configure your MySQL distribution.  Typically you do this using options
on the `configure' command-line.  You can also affect `configure' using
certain environment variables.  *Note Environment variables::.  For a
list of options supported by `configure', run this command:

     shell> ./configure --help

Some of the more commonly-used `configure' options are described here:

   * To compile just the MySQL client libraries and client programs and
     not the server, use the `--without-server' option:

          shell> ./configure --without-server

     If you don't have a C++ compiler, `mysql' will not compile (it is
     the one client program that requires C++).  In this case, you can
     remove the code in `configure' that tests for the C++ compiler and
     then run `./configure' with the `--without-server' option. The
     compile step will still try to build `mysql', but you can ignore
     any warnings about `mysql.cc'.  (If `make' stops, try `make -k' to
     tell it to continue with the rest of the build even if errors
     occur.)

   * If you want to get an embedded MySQL library (`libmysqld.a') you
     should use the `--with-embedded-server' option.

   * If you don't want your log files and database directories located
     under `/usr/local/var', use a `configure' command, something like
     one of these:

          shell> ./configure --prefix=/usr/local/mysql
          shell> ./configure --prefix=/usr/local \
                     --localstatedir=/usr/local/mysql/data

     The first command changes the installation prefix so that
     everything is installed under `/usr/local/mysql' rather than the
     default of `/usr/local'.  The second command preserves the default
     installation prefix, but overrides the default location for
     database directories (normally `/usr/local/var') and changes it to
     `/usr/local/mysql/data'.  After you have compiled MySQL, you can
     change these options with option files. *Note Option files::.

   * If you are using Unix and you want the MySQL socket located
     somewhere other than the default location (normally in the
     directory `/tmp' or `/var/run') use a `configure' command like
     this:

          shell> ./configure --with-unix-socket-path=/usr/local/mysql/tmp/mysql.sock

     Note that the given file must be an absolute pathname.  You can
     also later change the location `mysql.sock' by using the MySQL
     option files. *Note Problems with mysql.sock::.

   * If you want to compile statically linked programs (for example, to
     make a binary distribution, to get more speed, or to work around
     problems with some Red Hat Linux distributions), run `configure'
     like this:

          shell> ./configure --with-client-ldflags=-all-static \
                     --with-mysqld-ldflags=-all-static

   * If you are using `gcc' and don't have `libg++' or `libstdc++'
     installed, you can tell `configure' to use `gcc' as your C++
     compiler:

          shell> CC=gcc CXX=gcc ./configure

     When you use `gcc' as your C++ compiler, it will not attempt to
     link in `libg++' or `libstdc++'.  This may be a good idea to do
     even if you have the above libraries installed, as some versions
     of these libraries have caused strange problems for MySQL users in
     the past.

     Here are some common environment variables to set depending on the
     compiler you are using:

     *Compiler*    *Recommended options*
     gcc 2.7.2.1    CC=gcc CXX=gcc CXXFLAGS="-O3 -felide-constructors"
     egcs 1.0.3a    CC=gcc CXX=gcc CXXFLAGS="-O3 -felide-constructors
                   -fno-exceptions -fno-rtti"
     gcc 2.95.2     CFLAGS="-O3 -mpentiumpro" CXX=gcc CXXFLAGS="-O3
                   -mpentiumpro \ -felide-constructors -fno-exceptions
                   -fno-rtti"
     pgcc 2.90.29   CFLAGS="-O3 -mpentiumpro -mstack-align-double"
     or newer      CXX=gcc \ CXXFLAGS="-O3 -mpentiumpro
                   -mstack-align-double -felide-constructors \
                   -fno-exceptions -fno-rtti"

     In most cases you can get a reasonably optimal MySQL binary by
     using the options from the preceding table and adding the
     following options to the configure line:

          --prefix=/usr/local/mysql --enable-assembler \
          --with-mysqld-ldflags=-all-static

     The full configure line would, in other words, be something like
     the following for all recent gcc versions:

          CFLAGS="-O3 -mpentiumpro" CXX=gcc CXXFLAGS="-O3 -mpentiumpro \
          -felide-constructors -fno-exceptions -fno-rtti" ./configure \
          --prefix=/usr/local/mysql --enable-assembler \
          --with-mysqld-ldflags=-all-static

     The binaries we provide on the MySQL web site at
     `http://www.mysql.com/' are all compiled with full optimisation and
     should be perfect for most users.  *Note MySQL binaries::.  There
     are some things you can tweak to make an even faster binary, but
     this is only for advanced users.  *Note Compile and link options::.

     If the build fails and produces errors about your compiler or
     linker not being able to create the shared library
     `libmysqlclient.so.#' (`#' is a version number), you can work
     around this problem by giving the `--disable-shared' option to
     `configure'.  In this case, `configure' will not build a shared
     `libmysqlclient.so.#' library.

   * You can configure MySQL not to use `DEFAULT' column values for
     non-`NULL' columns (that is, columns that are not allowed to be
     `NULL'). *Note constraint NOT NULL::.

          shell> CXXFLAGS=-DDONT_USE_DEFAULT_FIELDS ./configure

   * By default, MySQL uses the ISO-8859-1 (Latin1) character set. To
     change the default set, use the `--with-charset' option:
          shell> ./configure --with-charset=CHARSET
     `CHARSET' may be one of `big5', `cp1251', `cp1257', `czech',
     `danish', `dec8', `dos', `euc_kr', `gb2312', `gbk', `german1',
     `hebrew', `hp8', `hungarian', `koi8_ru', `koi8_ukr', `latin1',
     `latin2', `sjis', `swe7', `tis620', `ujis', `usa7', or
     `win1251ukr'.  *Note Character sets::.

     If you want to convert characters between the server and the
     client, you should take a look at the `SET CHARACTER SET' command.
     *Note `SET': SET OPTION.

     *Warning*: If you change character sets after having created any
     tables, you will have to run `myisamchk -r -q
     --set-character-set=charset' on every table. Your indexes may be
     sorted incorrectly otherwise.  (This can happen if you install
     MySQL, create some tables, then reconfigure MySQL to use a
     different character set and reinstall it.)

     With the option `--with-extra-charsets=LIST' you can define which
     additional character sets should be compiled into the server.

     Here `LIST' is either a list of character sets separated with
     spaces, `complex' to include all characters that can't be
     dynamically loaded, or `all' to include all character sets into
     the binaries.

   * To configure MySQL with debugging code, use the `--with-debug'
     option:
          shell> ./configure --with-debug
     This causes a safe memory allocator to be included that can find
     some errors and that provides output about what is happening.
     *Note Debugging server::.

   * If your client programs are using threads, you need to also
     compile a thread-safe version of the MySQL client library with the
     `--enable-thread-safe-client' configure options. This will create a
     `libmysqlclient_r' library with which you should link your threaded
     applications.  *Note Threaded clients::.

   * Options that pertain to particular systems can be found in the
     system-specific section of this manual.  *Note Operating System
     Specific Notes::.


Installing from the Development Source Tree
-------------------------------------------

*Caution*: You should read this section only if you are interested in
helping us test our new code. If you just want to get MySQL up and
running on your system, you should use a standard release distribution
(either a source or binary distribution will do).

To obtain our most recent development source tree, use these
instructions:

  1. Download `BitKeeper' from
     `http://www.bitmover.com/cgi-bin/download.cgi'.  You will need
     `Bitkeeper' 3.0 or newer to access our repository.

  2. Follow the instructions to install it.

  3. After `BitKeeper' is installed, first go to the directory you want
     to work from, and then use one of the following commands to clone
     the MySQL version branch of your choice:

     To clone the 3.23 (old) branch, use this command:

          shell> bk clone bk://mysql.bkbits.net/mysql-3.23 mysql-3.23

     To clone the 4.0 (stable/production) branch, use this command:

          shell> bk clone bk://mysql.bkbits.net/mysql-4.0 mysql-4.0

     To clone the 4.1 alpha branch, use this command:

          shell> bk clone bk://mysql.bkbits.net/mysql-4.1 mysql-4.1

     To clone the 5.0 development branch, use this command:

          shell> bk clone bk://mysql.bkbits.net/mysql-5.0 mysql-5.0

     In the preceding examples the source tree will be set up in the
     `mysql-3.23/', `mysql-4.0/', `mysql-4.1/', or `mysql-5.0/'
     subdirectory of your current directory.

     If you are behind a firewall and can only initiate HTTP
     connections, you can also use `BitKeeper' via HTTP.

     If you are required to use a proxy server, simply set the
     environment variable `http_proxy' to point to your proxy:

          shell> export http_proxy="http://your.proxy.server:8080/"

     Now, simply replace the `bk://' with `http://' when doing a clone.
     Example:

          shell> bk clone http://mysql.bkbits.net/mysql-4.1 mysql-4.1

     The initial download of the source tree may take a while,
     depending on the speed of your connection - please be patient.

  4. You will need *GNU* `make', `autoconf 2.53 (or newer)', `automake
     1.5', `libtool 1.4', and `m4' to run the next set of commands.
     Even though many operating system already come with their own
     implementation of `make', chances are high that the compilation
     fails with strange error messages. Therefore it is highly
     recommended to use GNU `make' (sometimes also named `gmake') by
     all means.

     Fortunately, a large number of operating systems already ship with
     the GNU toolchain preinstalled or supply installable packages of
     these. In any case, they can also be downloaded from the following
     locations:

        * <http://www.gnu.org/software/autoconf/>

        * <http://www.gnu.org/software/automake/>

        * <http://www.gnu.org/software/libtool/>

        * <http://www.gnu.org/software/make/>

     If you are trying to configure MySQL 4.1, you will also need GNU
     `bison 1.75'.  Older versions of `bison' may report this error:
     `sql_yacc.yy:#####: fatal error: maximum table size (32767)
     exceeded'. Note: the maximum table size is not actually exceeded,
     the error is caused by bugs in these earlier `bison' versions.

     Versions of MySQL before version 4.1 may also compile with other
     `yacc' implementations (e.g. BSD `yacc' 91.7.30). For later
     versions, GNU `bison' is a requirement.

     The typical command to do in a shell is:

          cd mysql-4.0
          bk -r edit
          aclocal; autoheader; autoconf; automake
          (cd innobase; aclocal; autoheader; autoconf; automake) # for InnoDB
          (cd bdb/dist; sh s_all ) # for Berkeley DB
          ./configure  # Add your favorite options here
          make

     If you get some strange error during this stage, check that you
     really have `libtool' installed.

     A collection of our standard configure scripts is located in the
     `BUILD/' subdirectory.  If you are lazy, you can use
     `BUILD/compile-pentium-debug'. To compile on a different
     architecture, modify the script by removing flags that are
     Pentium-specific.

  5. When the build is done, run `make install'.  Be careful with this
     on a production machine; the command may overwrite your live
     release installation.  If you have another installation of MySQL,
     we recommend that you run `./configure' with different values for
     the `prefix', `with-tcp-port', and `unix-socket-path' options than
     those used for your production server.

  6. Play hard with your new installation and try to make the new
     features crash.  Start by running `make test'.  *Note MySQL test
     suite::.

  7. If you have gotten to the `make' stage and the distribution does
     not compile, please report it in our bugs database at
     `http://bugs.mysql.com/'.  If you have installed the latest
     versions of the required GNU tools, and they crash trying to
     process our configuration files, please report that also.
     However, if you execute `aclocal' and get a `command not found'
     error or a similar problem, do not report it.  Instead, make sure
     all the necessary tools are installed and that your `PATH'
     variable is set correctly so that your shell can find them.

  8. After the initial `bk clone' operation to get the source tree, you
     should run `bk pull' periodically to get the updates.

  9. You can examine the change history for the tree with all the diffs
     by using `bk sccstool'.  If you see some funny diffs or code that
     you have a question about, do not hesitate to send e-mail to the
     MySQL internals mailing list.  *Note Mailing-list::.  Also, if you
     think you have a better idea on how to do something, send an
     e-mail to the same address with a patch.  `bk diffs' will produce
     a patch for you after you have made changes to the source. If you
     do not have the time to code your idea, just send a description.

 10. `BitKeeper' has a nice help utility that you can access via `bk
     helptool'.

 11. Please note that any commits (`bk ci' or `bk citool') will trigger
     the posting of a message with the changeset to our internals
     mailing list, as well as the usual openlogging.org submission with
     just the changeset comments.  Generally, you wouldn't need to use
     commit (since the public tree will not allow `bk push'), but
     rather use the `bk diffs' method described previously.


You can also browse changesets, comments and sourcecode online by
browsing to for example, `http://mysql.bkbits.net:8080/mysql-4.1' For
MySQL 4.1.

The manual is in a separate tree which can be cloned with:

     shell> bk clone bk://mysql.bkbits.net/mysqldoc mysqldoc

There are also public BitKeeper trees for MySQL Control Center and
Connector/ODBC. They can be cloned respectively as follows.

To clone MySQL Control center, use this command:

     shell> bk clone http://mysql.bkbits.net/mysqlcc mysqlcc

To clone Connector/ODBC, use this command:

     shell> bk clone http://mysql.bkbits.net/myodbc3 myodbc3


Problems Compiling MySQL?
-------------------------

All MySQL programs compile cleanly for us with no warnings on Solaris
or Linux using `gcc'.  On other systems, warnings may occur due to
differences in system include files.  See *Note MIT-pthreads:: for
warnings that may occur when using MIT-pthreads.  For other problems,
check the following list.

The solution to many problems involves reconfiguring.  If you do need to
reconfigure, take note of the following:

   * If `configure' is run after it already has been run, it may use
     information that was gathered during its previous invocation.  This
     information is stored in `config.cache'.  When `configure' starts
     up, it looks for that file and reads its contents if it exists, on
     the assumption that the information is still correct.  That
     assumption is invalid when you reconfigure.

   * Each time you run `configure', you must run `make' again to
     recompile.  However, you may want to remove old object files from
     previous builds first because they were compiled using different
     configuration options.

To prevent old configuration information or object files from being
used, run these commands before rerunning `configure':

     shell> rm config.cache
     shell> make clean

Alternatively, you can run `make distclean'.

The following list describes some of the problems when compiling MySQL
that have been found to occur most often:

   * If you get errors when compiling `sql_yacc.cc', such as the ones
     shown here, you have probably run out of memory or swap space:

          Internal compiler error: program cc1plus got fatal signal 11
            or
          Out of virtual memory
            or
          Virtual memory exhausted

     The problem is that `gcc' requires huge amounts of memory to
     compile `sql_yacc.cc' with inline functions.  Try running
     `configure' with the `--with-low-memory' option:

          shell> ./configure --with-low-memory

     This option causes `-fno-inline' to be added to the compile line
     if you are using `gcc' and `-O0' if you are using something else.
     You should try the `--with-low-memory' option even if you have so
     much memory and swap space that you think you can't possibly have
     run out.  This problem has been observed to occur even on systems
     with generous hardware configurations, and the `--with-low-memory'
     option usually fixes it.

   * By default, `configure' picks `c++' as the compiler name and GNU
     `c++' links with `-lg++'.  If you are using `gcc', that behaviour
     can cause problems during configuration such as this:

          configure: error: installation or configuration problem:
          C++ compiler cannot create executables.

     You might also observe problems during compilation related to
     `g++', `libg++', or `libstdc++'.

     One cause of these problems is that you may not have `g++', or you
     may have `g++' but not `libg++', or `libstdc++'.  Take a look at
     the `config.log' file.  It should contain the exact reason why
     your C++ compiler didn't work.  To work around these problems, you
     can use `gcc' as your C++ compiler.  Try setting the environment
     variable `CXX' to `"gcc -O3"'.  For example:

          shell> CXX="gcc -O3" ./configure

     This works because `gcc' compiles C++ sources as well as `g++'
     does, but does not link in `libg++' or `libstdc++' by default.

     Another way to fix these problems, of course, is to install `g++',
     `libg++', and `libstdc++'.  We would however like to recommend you
     to not use `libg++' or `libstdc++' with MySQL as this will only
     increase the binary size of mysqld without giving you any benefits.
     Some versions of these libraries have also caused strange problems
     for MySQL users in the past.

     Using `gcc' as the C++ compiler is also required, if you want to
     compile MySQL with RAID functionality (see *Note CREATE TABLE::
     for more info on RAID table type) and you are using GNU `gcc'
     version 3 and above. If you get errors like the ones below during
     the linking stage when you configure MySQL to compile with the
     option `--with-raid', try to use `gcc' as your C++ compiler by
     defining the above mentioned environment variable `CXX':

          gcc -O3 -DDBUG_OFF -rdynamic -o isamchk isamchk.o sort.o  libnisam.a
          ../mysys/libmysys.a ../dbug/libdbug.a ../strings/libmystrings.a -lpthread
          -lz -lcrypt -lnsl -lm -lpthread
          ../mysys/libmysys.a(raid.o)(.text+0x79): In function `my_raid_create':
          : undefined reference to `operator new(unsigned)'
          ../mysys/libmysys.a(raid.o)(.text+0xdd): In function `my_raid_create':
          : undefined reference to `operator delete(void*)'
          ../mysys/libmysys.a(raid.o)(.text+0x129): In function `my_raid_open':
          : undefined reference to `operator new(unsigned)'
          ../mysys/libmysys.a(raid.o)(.text+0x189): In function `my_raid_open':
          : undefined reference to `operator delete(void*)'
          ../mysys/libmysys.a(raid.o)(.text+0x64b): In function `my_raid_close':
          : undefined reference to `operator delete(void*)'
          collect2: ld returned 1 exit status

   * If your compile fails with errors, such as any of the following,
     you must upgrade your version of `make' to GNU `make':

          making all in mit-pthreads
          make: Fatal error in reader: Makefile, line 18:
          Badly formed macro assignment
            or
          make: file `Makefile' line 18: Must be a separator (:
            or
          pthread.h: No such file or directory

     Solaris and FreeBSD are known to have troublesome `make' programs.

     GNU `make' Version 3.75 is known to work.

   * If you want to define flags to be used by your C or C++ compilers,
     do so by adding the flags to the `CFLAGS' and `CXXFLAGS'
     environment variables.  You can also specify the compiler names
     this way using `CC' and `CXX'.  For example:

          shell> CC=gcc
          shell> CFLAGS=-O3
          shell> CXX=gcc
          shell> CXXFLAGS=-O3
          shell> export CC CFLAGS CXX CXXFLAGS

     See *Note MySQL binaries::, for a list of flag definitions that
     have been found to be useful on various systems.

   * If you get an error message like this, you need to upgrade your
     `gcc' compiler:

          client/libmysql.c:273: parse error before `__attribute__'

     `gcc' 2.8.1 is known to work, but we recommend using `gcc' 2.95.2
     or `egcs' 1.0.3a instead.

   * If you get errors such as those shown here when compiling `mysqld',
     `configure' didn't correctly detect the type of the last argument
     to `accept()', `getsockname()', or `getpeername()':

          cxx: Error: mysqld.cc, line 645: In this statement, the referenced
               type of the pointer value ''length'' is ''unsigned long'', which
               is not compatible with ''int''.
          new_sock = accept(sock, (struct sockaddr *)&cAddr, &length);

     To fix this, edit the `config.h' file (which is generated by
     `configure').  Look for these lines:

          /* Define as the base type of the last arg to accept */
          #define SOCKET_SIZE_TYPE XXX

     Change `XXX' to `size_t' or `int', depending on your operating
     system.  (Note that you will have to do this each time you run
     `configure' because `configure' regenerates `config.h'.)

   * The `sql_yacc.cc' file is generated from `sql_yacc.yy'.  Normally
     the build process doesn't need to create `sql_yacc.cc', because
     MySQL comes with an already generated copy.  However, if you do
     need to re-create it, you might encounter this error:

          "sql_yacc.yy", line xxx fatal: default action causes potential...

     This is a sign that your version of `yacc' is deficient.  You
     probably need to install `bison' (the GNU version of `yacc') and
     use that instead.

   * If you need to debug `mysqld' or a MySQL client, run `configure'
     with the `--with-debug' option, then recompile and link your
     clients with the new client library.  *Note Debugging client::.

   * If you get a compilation error on Linux (e.g. SuSE Linux 8.1 or
     Red Hat Linux 7.3) similar to the following one:

          libmysql.c:1329: warning: passing arg 5 of `gethostbyname_r' from incompatible pointer type
          libmysql.c:1329: too few arguments to function `gethostbyname_r'
          libmysql.c:1329: warning: assignment makes pointer from integer without a cast
          make[2]: *** [libmysql.lo] Error 1

     By default, the `configure' script attempts to determine the
     correct number of arguments by using `g++' the GNU C++ compiler.
     This test yields wrong results, if `g++' is not installed. There
     are two ways to work around this problem:

        * Make sure that the GNU C++ `g++' is installed. On some Linux
          distributions, the required package is called `gpp', on
          others it is named `gcc-c++'.

        * Use `gcc' as your C++ compiler by setting the `CXX'
          environment variable to `gcc':
               export CXX="gcc"

     Please note that you need to run `configure' again afterwards.



MIT-pthreads Notes
------------------

This section describes some of the issues involved in using
MIT-pthreads.

Note that on Linux you should *not* use MIT-pthreads but use the
installed LinuxThreads implementation instead.  *Note Linux::.

If your system does not provide native thread support, you will need to
build MySQL using the MIT-pthreads package.  This includes older
FreeBSD systems, SunOS 4.x, Solaris 2.4 and earlier, and some others.
*Note Which OS::.

Note, that beginning with MySQL 4.0.2 MIT-pthreads are no longer part of
the source distribution. If you require this package, you need to
download it separately from
<http://www.mysql.com/Downloads/Contrib/pthreads-1_60_beta6-mysql.tar.gz>

After downloading, extract this source archive into the top level of the
MySQL source directory. It will create a new subdirectory
`mit-pthreads'.

   * On most systems, you can force MIT-pthreads to be used by running
     `configure' with the `--with-mit-threads' option:

          shell> ./configure --with-mit-threads

     Building in a non-source directory is not supported when using
     MIT-pthreads because we want to minimise our changes to this code.

   * The checks that determine whether to use MIT-pthreads occur only
     during the part of the configuration process that deals with the
     server code.  If you have configured the distribution using
     `--without-server' to build only the client code, clients will not
     know whether MIT-pthreads is being used and will use Unix socket
     connections by default.  Because Unix sockets do not work under
     MIT-pthreads on some platforms, this means you will need to use
     `-h' or `--host' when you run client programs.

   * When MySQL is compiled using MIT-pthreads, system locking is
     disabled by default for performance reasons.  You can tell the
     server to use system locking with the `--external-locking' option.
     This is only needed if you want to be able to run two MySQL
     servers against the same datafiles (not recommended).

   * Sometimes the pthread `bind()' command fails to bind to a socket
     without any error message (at least on Solaris).  The result is
     that all connections to the server fail.  For example:

          shell> mysqladmin version
          mysqladmin: connect to server at '' failed;
          error: 'Can't connect to mysql server on localhost (146)'

     The solution to this is to kill the `mysqld' server and restart it.
     This has only happened to us when we have forced down the server
     and done a restart immediately.

   * With MIT-pthreads, the `sleep()' system call isn't interruptible
     with `SIGINT' (break).  This is only noticeable when you run
     `mysqladmin --sleep'.  You must wait for the `sleep()' call to
     terminate before the interrupt is served and the process stops.

   * When linking, you may receive warning messages like these (at
     least on Solaris); they can be ignored:

          ld: warning: symbol `_iob' has differing sizes:
              (file /my/local/pthreads/lib/libpthread.a(findfp.o) value=0x4;
          file /usr/lib/libc.so value=0x140);
              /my/local/pthreads/lib/libpthread.a(findfp.o) definition taken
          ld: warning: symbol `__iob' has differing sizes:
              (file /my/local/pthreads/lib/libpthread.a(findfp.o) value=0x4;
          file /usr/lib/libc.so value=0x140);
              /my/local/pthreads/lib/libpthread.a(findfp.o) definition taken

   * Some other warnings also can be ignored:

          implicit declaration of function `int strtoll(...)'
          implicit declaration of function `int strtoul(...)'

   * We haven't gotten `readline' to work with MIT-pthreads.  (This
     isn't needed, but may be interesting for someone.)


Windows Source Distribution
---------------------------

You will need the following:

   * VC++ 6.0 compiler (updated with 4 or 5 SP and Pre-processor
     package) The Pre-processor package is necessary for the macro
     assembler.  More details at:
     `http://msdn.microsoft.com/vstudio/downloads/updates/sp/vs6/sp5/faq.aspx'.

   * The MySQL source distribution for Windows, which can be downloaded
     from `http://www.mysql.com/downloads/'.

Building MySQL:

  1. Create a work directory (for example, `workdir').

  2. Unpack the source distribution in the aforementioned directory.

  3. Start the VC++ 6.0 compiler.

  4. In the `File' menu, select `Open Workspace'.

  5. Open the `mysql.dsw' workspace you find on the work directory.

  6. From the `Build' menu, select the `Set Active Configuration' menu.

  7. Click over the screen selecting `mysqld - Win32 Debug' and click
     OK.

  8. Press `F7' to begin the build of the debug server, libraries, and
     some client applications.

  9. When the compilation finishes, copy the libraries and the
     executables to a separate directory.

 10. Compile the release versions that you want, in the same way.

 11. Create the directory into which to install the MySQL stuff (for
     example, `c:\mysql').

 12. From the `workdir' directory copy into the `c:\mysql' directory the
     following directories:

        * `Data'

        * `Docs'

        * `Share'

 13. Create the directory `c:\mysql\bin' and copy into it all the
     servers and clients that you just compiled.

 14. If you want, also create the `c:\mysql\lib' directory and copy the
     libraries that you just compiled.

 15. Do a clean using Visual Studio.

Set up and start the server in the same way as for the binary Windows
distribution. *Note Windows prepare environment::.


Post-installation Setup and Testing
===================================

* Menu:

* mysql_install_db::            Problems Running `mysql_install_db'
* Starting server::             Problems Starting the MySQL Server
* Automatic start::             Starting and Stopping MySQL Automatically

Once you've installed MySQL (from either a binary or source
distribution), you need to initialise the grant tables, start the
server, and make sure that the server works okay.  You may also wish to
arrange for the server to be started and stopped automatically when
your system starts up and shuts down.

Normally you install the grant tables and start the server like this
for installation from a source distribution:

     shell> ./scripts/mysql_install_db
     shell> cd mysql_installation_directory
     shell> ./bin/mysqld_safe --user=mysql &

For a binary distribution (not RPM or pkg packages), do this:

     shell> cd mysql_installation_directory
     shell> ./scripts/mysql_install_db
     shell> ./bin/mysqld_safe --user=mysql &

The `mysql_install_db' script creates the `mysql' database which will
hold all database privileges, the `test' database which you can use to
test MySQL, and also privilege entries for the user that runs
`mysql_install_db' and a `root' user.  The entries are created without
passwords.  The `mysqld_safe' script starts the `mysqld' server.  (If
your version of MySQL is older than 4.0, use `safe_mysqld' rather than
`mysqld_safe'.)

`mysql_install_db' will not overwrite any old privilege tables, so it
should be safe to run in any circumstances.  If you don't want to have
the `test' database you can remove it with `mysqladmin -u root drop
test' after starting the server.

Testing is most easily done from the top-level directory of the MySQL
distribution.  For a binary distribution, this is your installation
directory (typically something like `/usr/local/mysql').  For a source
distribution, this is the main directory of your MySQL source tree.

In the commands shown in this section and in the following subsections,
`BINDIR' is the path to the location in which programs like
`mysqladmin' and `mysqld_safe' are installed.  For a binary
distribution, this is the `bin' directory within the distribution.  For
a source distribution, `BINDIR' is probably `/usr/local/bin', unless
you specified an installation directory other than `/usr/local' when
you ran `configure'.  `EXECDIR' is the location in which the `mysqld'
server is installed.  For a binary distribution, this is the same as
`BINDIR'.  For a source distribution, `EXECDIR' is probably
`/usr/local/libexec'.

Testing is described in detail:

  1. If necessary, start the `mysqld' server and set up the initial
     MySQL grant tables containing the privileges that determine how
     users are allowed to connect to the server.  This is normally done
     with the `mysql_install_db' script:

          shell> scripts/mysql_install_db

     Typically, `mysql_install_db' needs to be run only the first time
     you install MySQL.  Therefore, if you are upgrading an existing
     installation, you can skip this step.  (However,
     `mysql_install_db' is quite safe to use and will not update any
     tables that already exist, so if you are unsure of what to do, you
     can always run `mysql_install_db'.)

     `mysql_install_db' creates six tables (`user', `db', `host',
     `tables_priv', `columns_priv', and `func') in the `mysql'
     database.  A description of the initial privileges is given in
     *Note Default privileges::.  Briefly, these privileges allow the
     MySQL `root' user to do anything, and allow anybody to create or
     use databases with a name of `test' or starting with `test_'.

     If you don't set up the grant tables, the following error will
     appear in the log file when you start the server:

          mysqld: Can't find file: 'host.frm'

     This may also happen with a binary MySQL distribution if you don't
     start MySQL by executing exactly `./bin/mysqld_safe'.  *Note
     `mysqld_safe': mysqld_safe.

     You might need to run `mysql_install_db' as `root'.  However, if
     you prefer, you can run the MySQL server as an unprivileged
     (non-`root') user, provided that the user can read and write files
     in the database directory.  Instructions for running MySQL as an
     unprivileged user are given in *Note Changing MySQL user: Changing
     MySQL user.

     If you have problems with `mysql_install_db', see *Note
     `mysql_install_db': mysql_install_db.

     There are some alternatives to running the `mysql_install_db'
     script as it is provided in the MySQL distribution:

        * You may want to edit `mysql_install_db' before running it, to
          change the initial privileges that are installed into the
          grant tables.  This is useful if you want to install MySQL on
          a lot of machines with the same privileges.  In this case you
          probably should need only to add a few extra `INSERT'
          statements to the `mysql.user' and `mysql.db' tables.

        * If you want to change things in the grant tables after
          installing them, you can run `mysql_install_db', then use
          `mysql -u root mysql' to connect to the grant tables as the
          MySQL `root' user and issue SQL statements to modify the
          grant tables directly.

        * It is possible to re-create the grant tables completely after
          they have already been created.  You might want to do this if
          you've already installed the tables but then want to
          re-create them after editing `mysql_install_db'.

     For more information about these alternatives, see *Note Default
     privileges::.

  2. Start the MySQL server like this:

          shell> cd mysql_installation_directory
          shell> bin/mysqld_safe &

     If you have problems starting the server, see *Note Starting
     server::.

  3. Use `mysqladmin' to verify that the server is running.  The
     following commands provide a simple test to check that the server
     is up and responding to connections:

          shell> BINDIR/mysqladmin version
          shell> BINDIR/mysqladmin variables

     The output from `mysqladmin version' varies slightly depending on
     your platform and version of MySQL, but should be similar to that
     shown here:

          shell> BINDIR/mysqladmin version
          mysqladmin  Ver 8.14 Distrib 3.23.32, for linux on i586
          Copyright (C) 2000 MySQL AB & MySQL Finland AB & TCX DataKonsult AB
          This software comes with ABSOLUTELY NO WARRANTY. This is free software,
          and you are welcome to modify and redistribute it under the GPL license.
          
          Server version          3.23.32-debug
          Protocol version        10
          Connection              Localhost via Unix socket
          TCP port                3306
          UNIX socket             /tmp/mysql.sock
          Uptime:                 16 sec
          
          Threads: 1  Questions: 9  Slow queries: 0
          Opens: 7  Flush tables: 2  Open tables: 0
          Queries per second avg: 0.000
          Memory in use: 132K  Max memory used: 16773K

     To get a feeling for what else you can do with `BINDIR/mysqladmin',
     invoke it with the `--help' option.

  4. Verify that you can shut down the server:

          shell> BINDIR/mysqladmin -u root shutdown

  5. Verify that you can restart the server.  Do this using
     `mysqld_safe' or by invoking `mysqld' directly.  For example:

          shell> BINDIR/mysqld_safe --log &

     If `mysqld_safe' fails, try running it from the MySQL installation
     directory (if you are not already there).  If that doesn't work,
     see *Note Starting server::.

  6. Run some simple tests to verify that the server is working.  The
     output should be similar to what is shown here:

          shell> BINDIR/mysqlshow
          +-----------+
          | Databases |
          +-----------+
          | mysql     |
          +-----------+
          
          shell> BINDIR/mysqlshow mysql
          Database: mysql
          +--------------+
          |    Tables    |
          +--------------+
          | columns_priv |
          | db           |
          | func         |
          | host         |
          | tables_priv  |
          | user         |
          +--------------+
          
          shell> BINDIR/mysql -e "SELECT host,db,user FROM db" mysql
          +------+--------+------+
          | host | db     | user |
          +------+--------+------+
          | %    | test   |      |
          | %    | test_% |      |
          +------+--------+------+

     There is also a benchmark suite in the `sql-bench' directory
     (under the MySQL installation directory) that you can use to
     compare how MySQL performs on different platforms. The benchmark
     suite is written in Perl, using the Perl DBI module to provide a
     database-independent interface to the various databases. The
     following additional Perl modules are required to run the
     benchmark suite:

          DBI
          DBD-mysql
          Data-Dumper
          Data-ShowTable

     These modules can be obtained from CPAN `http://www.cpan.org/'.
     *Note Perl installation::.

     The `sql-bench/Results' directory contains the results from many
     runs against different databases and platforms.  To run all tests,
     execute these commands:

          shell> cd sql-bench
          shell> run-all-tests

     If you don't have the `sql-bench' directory, you are probably
     using an RPM for a binary distribution.  (Source distribution RPMs
     include the benchmark directory.)  In this case, you must first
     install the benchmark suite before you can use it.  Beginning with
     MySQL Version 3.22, there are benchmark RPM files named
     `mysql-bench-VERSION-i386.rpm' that contain benchmark code and
     data.

     If you have a source distribution, you can also run the tests in
     the `tests' subdirectory. For example, to run
     `auto_increment.tst', do this:

          shell> BINDIR/mysql -vvf test < ./tests/auto_increment.tst

     The expected results are shown in the `./tests/auto_increment.res'
     file.


Problems Running `mysql_install_db'
-----------------------------------

The purpose of the `mysql_install_db' script is to generate new MySQL
privilege tables.  It will not affect any other data.  It will also not
do anything if you already have MySQL privilege tables installed.

If you want to re-create your privilege tables, you should take down
the `mysqld' server, if it's running, and then do something like:

     mv mysql-data-directory/mysql mysql-data-directory/mysql-old
     mysql_install_db

This section lists problems you might encounter when you run
`mysql_install_db':

*`mysql_install_db' doesn't install the grant tables*
     You may find that `mysql_install_db' fails to install the grant
     tables and terminates after displaying the following messages:

          starting mysqld daemon with databases from XXXXXX
          mysql daemon ended

     In this case, you should examine the log file very carefully.  The
     log should be located in the directory `XXXXXX' named by the error
     message, and should indicate why `mysqld' didn't start.  If you
     don't understand what happened, include the log when you post a
     bug report using `mysqlbug'.  *Note Bug reports::.

*There is already a `mysqld' daemon running*
     In this case, you probably don't have to run `mysql_install_db' at
     all.  You have to run `mysql_install_db' only once, when you
     install MySQL the first time.

*Installing a second `mysqld' daemon doesn't work when one daemon is running*
     This can happen when you already have an existing MySQL
     installation, but want to put a new installation in a different
     place (for example, for testing, or perhaps you simply want to run
     two installations at the same time).  Generally the problem that
     occurs when you try to run the second server is that it tries to
     use the same socket and port as the old one.  In this case you
     will get the error message: `Can't start server: Bind on TCP/IP
     port: Address already in use' or `Can't start server: Bind on unix
     socket...'. *Note Multiple servers::.

*You don't have write access to `/tmp'*
     If you don't have write access to create a socket file at the
     default place (in `/tmp') or permission to create temporary files
     in `/tmp,' you will get an error when running `mysql_install_db'
     or when starting or using `mysqld'.

     You can specify a different socket and temporary directory as
     follows:

          shell> TMPDIR=/some_tmp_dir/
          shell> MYSQL_UNIX_PORT=/some_tmp_dir/mysqld.sock
          shell> export TMPDIR MYSQL_UNIX_PORT

     See *Note Problems with mysql.sock::.

     `some_tmp_dir' should be the path to some directory for which you
     have write permission. *Note Environment variables::.

     After this you should be able to run `mysql_install_db' and start
     the server with these commands:

          shell> scripts/mysql_install_db
          shell> BINDIR/mysqld_safe &

*`mysqld' crashes immediately*
     If you are running Red Hat Version 5.0 with a version of `glibc'
     older than 2.0.7-5, you should make sure you have installed all
     `glibc' patches.  There is a lot of information about this in the
     MySQL mail archives.  Links to the mail archives are available
     online at `http://lists.mysql.com/'.  Also, see *Note Linux::.

     You can also start `mysqld' manually using the
     `--skip-grant-tables' option and add the privilege information
     yourself using `mysql':

          shell> BINDIR/mysqld_safe --skip-grant-tables &
          shell> BINDIR/mysql -u root mysql

     From `mysql', manually execute the SQL commands in
     `mysql_install_db'.  Make sure you run `mysqladmin
     flush-privileges' or `mysqladmin reload' afterward to tell the
     server to reload the grant tables.


Problems Starting the MySQL Server
----------------------------------

If you are going to use tables that support transactions (InnoDB, BDB),
you should first create a `my.cnf' file and set startup options for the
table types you plan to use. *Note Table types::.

Generally, you start the `mysqld' server in one of these ways:

   * By invoking `mysql.server'.  This script is used primarily at
     system startup and shutdown, and is described more fully in *Note
     Automatic start::.

   * By invoking `mysqld_safe', which tries to determine the proper
     options for `mysqld' and then runs it with those options. *Note
     `mysqld_safe': mysqld_safe.

   * For Windows NT/2000/XP, please see *Note NT start::.

   * By invoking `mysqld' directly.

When the `mysqld' daemon starts up, it changes the directory to the
data directory.  This is where it expects to write log files and the pid
(process ID) file, and where it expects to find databases.

The data directory location is hardwired in when the distribution is
compiled.  However, if `mysqld' expects to find the data directory
somewhere other than where it really is on your system, it will not work
properly.  If you have problems with incorrect paths, you can find out
what options `mysqld' allows and what the default path settings are by
invoking `mysqld' with the `--help' option.  You can override the
defaults by specifying the correct pathnames as command-line arguments
to `mysqld'.  (These options can be used with `mysqld_safe' as well.)

Normally you should need to tell `mysqld' only the base directory under
which MySQL is installed.  You can do this with the `--basedir' option.
You can also use `--help' to check the effect of changing path options
(note that `--help' *must* be the final option of the `mysqld'
command).  For example:

     shell> EXECDIR/mysqld --basedir=/usr/local --help

Once you determine the path settings you want, start the server without
the `--help' option.

Whichever method you use to start the server, if it fails to start up
correctly, check the log file to see if you can find out why.  Log files
are located in the data directory (typically `/usr/local/mysql/data'
for a binary distribution, `/usr/local/var' for a source distribution,
and `\mysql\data\mysql.err' on Windows).  Look in the data directory for
files with names of the form `host_name.err' and `host_name.log' where
`host_name' is the name of your server host.  Then check the last few
lines of these files:

     shell> tail host_name.err
     shell> tail host_name.log

Look for something like the following in the log file:
     000729 14:50:10  bdb:  Recovery function for LSN 1 27595 failed
     000729 14:50:10  bdb:  warning: ./test/t1.db: No such file or directory
     000729 14:50:10  Can't init databases

This means that you didn't start `mysqld' with `--bdb-no-recover' and
Berkeley DB found something wrong with its log files when it tried to
recover your databases.  To be able to continue, you should move away
the old Berkeley DB log file from the database directory to some other
place, where you can later examine it.  The log files are named
`log.0000000001', where the number will increase over time.

If you are running `mysqld' with BDB table support and `mysqld' core
dumps at start this could be because of some problems with the BDB
recover log.  In this case you can try starting `mysqld' with
`--bdb-no-recover'.  If this helps, then you should remove all `log.*'
files from the data directory and try starting `mysqld' again.

If you get the following error, it means that some other program (or
another `mysqld' server) is already using the TCP/IP port or socket
`mysqld' is trying to use:

     Can't start server: Bind on TCP/IP port: Address already in use
       or
     Can't start server: Bind on unix socket...

Use `ps' to make sure that you don't have another `mysqld' server
running.  If you can't find another server running, you can try to
execute the command `telnet your-host-name tcp-ip-port-number' and press
Enter a couple of times.  If you don't get an error message like
`telnet: Unable to connect to remote host: Connection refused',
something is using the TCP/IP port `mysqld' is trying to use.  See
*Note mysql_install_db:: and *Note Multiple servers::.

If `mysqld' is currently running, you can find out what path settings
it is using by executing this command:

     shell> mysqladmin variables

or

     shell> mysqladmin -h 'your-host-name' variables

If you get `Errcode 13', which means `Permission denied', when starting
`mysqld' this means that you didn't have the right to read/create files
in the MySQL database or log directory. In this case you should either
start `mysqld' as the `root' user or change the permissions for the
involved files and directories so that you have the right to use them.

If `mysqld_safe' starts the server but you can't connect to it, you
should make sure you have an entry in `/etc/hosts' that looks like this:

     127.0.0.1       localhost

This problem occurs only on systems that don't have a working thread
library and for which MySQL must be configured to use MIT-pthreads.

If you can't get `mysqld' to start you can try to make a trace file to
find the problem. *Note Making trace files::.

If you are using InnoDB tables, refer to the InnoDB-specific startup
options.  *Note InnoDB start::.

If you are using BDB (Berkeley DB) tables, you should familiarise
yourself with the different BDB-specific startup options.  *Note BDB
start::.


Starting and Stopping MySQL Automatically
-----------------------------------------

The `mysql.server' and `mysqld_safe' scripts can be used to start the
server automatically at system startup time. `mysql.server' can also be
used to stop the server.

The `mysql.server' script can be used to start or stop the server by
invoking it with `start' or `stop' arguments:

     shell> mysql.server start
     shell> mysql.server stop

`mysql.server' can be found in the `share/mysql' directory under the
MySQL installation directory or in the `support-files' directory of the
MySQL source tree.

Note that if you use the Linux RPM package
(`MySQL-server-VERSION.rpm'), the `mysql.server' script has already
been installed as `/etc/init.d/mysql' - you don't have to install it
manually. See *Note Linux-RPM:: for more information on the Linux RPM
packages.

On Mac OS X, you can install a separate MySQL Startup Item package to
enable the automatic startup of MySQL on system bootup.  See *Note Mac
OS X installation:: for details.

Before `mysql.server' starts the server, it changes the directory to
the MySQL installation directory, then invokes `mysqld_safe'.  You
might need to edit `mysql.server' if you have a binary distribution
that you've installed in a non-standard location.  Modify it to `cd'
into the proper directory before it runs `mysqld_safe'. If you want the
server to run as some specific user, add an appropriate `user' line to
the `/etc/my.cnf' file, as shown later in this section.

`mysql.server stop' brings down the server by sending a signal to it.
You can also take down the server manually by executing `mysqladmin
shutdown'.

You need to add these start and stop commands to the appropriate places
in your `/etc/rc*' files when you want to start up MySQL automatically
on your server.

On most current Linux distributions, it is sufficient to copy the file
`mysql.server' into the `/etc/init.d' directory (or `/etc/rc.d/init.d'
on older Red Hat systems). Afterwards, run the following command to
enable the startup of MySQL on system bootup:

     shell> chkconfig --add mysql.server

On FreeBSD startup scripts generally should go in
`/usr/local/etc/rc.d/'. The `rc(8)' manual page also states that
scripts in this directory are only executed, if their basename matches
the shell globbing pattern `*.sh'. Any other files or directories
present within the directory are silently ignored. In other words, on
FreeBSD you should install the file `mysql.server' as
`/usr/local/etc/rc.d/mysql.server.sh' to enable automatic startup.

As an alternative to the above, some operating systems also use
`/etc/rc.local' or `/etc/init.d/boot.local' to start additional
services on bootup. To start up MySQL using this method, you could
append something like the following to it:

     /bin/sh -c 'cd /usr/local/mysql; ./bin/mysqld_safe --user=mysql &'

You can also add options for `mysql.server' in a global `/etc/my.cnf'
file.  A typical `/etc/my.cnf' file might look like this:

     [mysqld]
     datadir=/usr/local/mysql/var
     socket=/var/tmp/mysql.sock
     port=3306
     user=mysql
     
     [mysql.server]
     basedir=/usr/local/mysql

The `mysql.server' script understands the following options: `datadir',
`basedir', and `pid-file'.

The following table shows which option groups each startup script reads
from option files:

*Script*    *Option groups*
`mysqld'    `[mysqld]' and `[server]'
`mysql.server'`[mysql.server]', `[mysqld]', and `[server]'
`mysqld_safe'`[mysqld]', `[server]', and `[mysqld_safe]'

For backward compatibility, `mysql.server' also reads the
`[mysql_server]' group and `mysqld_safe' also reads the `[safe_mysqld]'
group. However, you should update your option files to use the
`[mysql.server]' and `[mysqld_safe]' groups instead.

*Note Option files::.


Upgrading/Downgrading MySQL
===========================

Before you do an upgrade, you should back up your old databases.

You can always move the MySQL format files and datafiles between
different versions on the same architecture as long as you have the
same base version of MySQL. The current base version is 4. If you
change the character set when running MySQL, you must run `myisamchk -r
-q --set-character-set=charset' on all tables.  Otherwise, your indexes
may not be ordered correctly, because changing the character set may
also change the sort order.

If you are afraid of new versions, you can always rename your old
`mysqld' to something like `mysqld-old-version-number'.  If your new
`mysqld' then does something unexpected, you can simply shut it down
and restart with your old `mysqld'.

If, after an upgrade, you experience problems with recompiled client
programs, such as `Commands out of sync' or unexpected core dumps, you
probably have used an old header or library file when compiling your
programs.  In this case you should check the date for your `mysql.h'
file and `libmysqlclient.a' library to verify that they are from the new
MySQL distribution.  If not, please recompile your programs.

If problems occur, such as that the new `mysqld' server doesn't want to
start or that you can't connect without a password, check that you don't
have some old `my.cnf' file from your old installation.  You can check
this with: `program-name --print-defaults'.  If this outputs anything
other than the program name, you have an active `my.cnf' file that will
affect things.

It is a good idea to rebuild and reinstall the Perl `DBD-mysql' module
whenever you install a new release of MySQL. The same applies to other
MySQL interfaces as well, such as the Python `MySQLdb' module.

* Menu:

* Upgrading-from-4.0::          Upgrading From Version 4.0 to 4.1
* Upgrading-from-3.23::         Upgrading From Version 3.23 to 4.0
* Upgrading-from-3.22::         Upgrading From Version 3.22 to 3.23
* Upgrading-from-3.21::         Upgrading from Version 3.21 to 3.22
* Upgrading-from-3.20::         Upgrading from Version 3.20 to 3.21
* Upgrading-grant-tables::      Upgrading the Grant Tables
* Upgrading-to-arch::           Upgrading to Another Architecture
* Windows upgrading::           Upgrading MySQL under Windows


Upgrading From Version 4.0 to 4.1
---------------------------------

Several visible things have changed between MySQL 4.0 and MySQL 4.1 to
fix some critical bugs and make MySQL more compatible with the ANSI SQL
standard. These changes may affect your applications.

Some of the 4.1 behaviours can be tested in 4.0 before performing a
full upgrade to 4.1. We have added to later MySQL 4.0 releases (from
4.0.12 on) a `--new' startup option for `mysqld'.  This option gives
you the 4.1 behaviour for the most critical changes.  You can also
enable these behaviours for a given client connection with the `SET
@@new=1' command, or turn them off if they are on with `SET @@new=0'.

If you believe that some of the 4.1 changes will affect you, we
recommend that before upgrading to 4.1, you download the latest MySQL
4.0 version and run it with the `--new' option.  That way you can test
the new behaviors in 4.0 to make sure that your applications work with
them. This will help you have a smooth painless transition when you
perform a full upgrade to 4.1 later.

The following list describes changes that may affect applications and
that you should watch out for when upgrading to version 4.1:

   * `TIMESTAMP' is now returned as a string in `'YYYY-MM-DD HH:MM:SS''
     format.  (The `--new' option can be used from 4.0.12 on to make a
     4.0 server behave as 4.1 in this respect.)  If you want to have
     the value returned as a number (like Version 4.0 does) you should
     add +0 to `TIMESTAMP' columns when you retrieve them:

          mysql> SELECT ts_col + 0 FROM tbl_name;

     Display widths for `TIMESTAMP' columns are no longer supported.
     For example, if you declare a column as `TIMESTAMP(10)', the `(10)'
     is ignored.

     These changes were necessary for SQL standards compliance. In a
     future version, a further change will be made (backward compatible
     with this change), allowing the timestamp length to indicate the
     desired number of digits for fractions of a second.

   * Binary values such as `0xFFDF' now are assumed to be strings
     instead of numbers.  This fixes some problems with character sets
     where it's convenient to input a string as a binary value.  With
     this change, you should use `CAST()' if you want to compare binary
     values numerically as integers:

          mysql> SELECT CAST(0xFEFF AS UNSIGNED INTEGER) < CAST(0xFF AS UNSIGNED INTEGER);
                  -> 0

     If you don't use `CAST()', a lexical string comparison will be
     done:

          mysql> SELECT 0xFEFF < 0xFF;
                  -> 1

     Using binary items in a numeric context or comparing them using the
     `=' operator should work as before.  (The `--new' option can be
     used from 4.0.13 on to make a 4.0 server behave as 4.1 in this
     respect.)

   * For functions that produce a `DATE', `DATETIME', or `TIME' value,
     the result returned to the client now is fixed up to have a
     temporal type. For example, in MySQL 4.1, you get this result:

          mysql> SELECT CAST("2001-1-1" as DATETIME);
              -> '2001-01-01 00:00:00'

     In MySQL 4.0, the result is different:

          mysql> SELECT CAST("2001-1-1" as DATETIME);
              -> '2001-01-01'

   * `DEFAULT' values no longer can be specified for `AUTO_INCREMENT'
     columns. (In 4.0, a `DEFAULT' value is silently ignored; in 4.1,
     an error occurs).

   * `SERIALIZE' is no longer a valid option value for the `sql_mode'
     variable.  You should use `SET TRANSACTION ISOLATION LEVEL
     SERIALIZABLE' instead. `SERIALIZE' is no longer valid for the
     `--sql-mode' option for `mysqld', either. Use
     `--transaction-isolation=SERIALIZABLE' instead.

   * All tables and string columns now have a character set.  *Note
     Charset::.  Character set information is displayed by `SHOW CREATE
     TABLE' and `mysqldump'.  (MySQL versions 4.0.6 and above can read
     the new dump files; older versions cannot.)

   * The table definition format used in `.frm' files has changed
     slightly in 4.1.  MySQL 4.0 versions from 4.0.11 on can read the
     new `.frm' format directly, but older versions cannot.  If you
     need to move tables from 4.1 to a version earlier than 4.0.11, you
     should use `mysqldump'.  *Note `mysqldump': mysqldump.

   * If you are running multiple servers on the same Windows machine,
     you should use a different `--shared_memory_base_name' option on
     all machines.

   * The interface to aggregated UDF functions has changed a bit. You
     must now declare a `clear()' function for each aggregate function.


In general, upgrading to 4.1 from an earlier MySQL version involves the
following steps:

   * Check the changes listed earlier in this section to see if there
     are any that may affect your applications.

   * Read the 4.1 news items to see what significant new features you
     can use in 4.1.  *Note News-4.1.x::.

   * If you are running MySQL Server on Windows, please also see *Note
     Windows upgrading::.

   * After upgrading, update the grant tables to generate the new
     longer `Password' column that is needed for secure handling of
     passwords.  The procedure uses `mysql_fix_privilege_tables' and is
     described in *Note Upgrading-grant-tables::.


The password hashing mechanism has changed in 4.1 to provide better
security, but this may cause compatibility problems if you still have
clients that use the client library from 4.0 or earlier.  (It is very
likely that you will have 4.0 clients in situations where clients
connect from remote hosts that have not yet upgraded to 4.1).  The
following list indicates some possible upgrade strategies.  They
represent various tradeoffs between the goal of compatibility with old
clients and the goal of security.

   * Don't upgrade to 4.1. No behaviour will change, but of course you
     cannot use any of the new features provided by the 4.1
     client/server protocol, either.  (MySQL 4.1 has an extended
     client/server protocol that offers such features as prepared
     statements and multiple result sets.)  *Note C API Prepared
     statements::.

   * Upgrade to 4.1 and run the `mysql_fix_privilege_tables' script to
     widen the `Password' column in the `user' table so that it can
     hold long password hashes.  But run the server with the
     `--old-passwords' option to provide backward compatibility that
     allows pre-4.1 clients to continue to connect to their short-hash
     accounts.  Eventually, when all your clients are upgraded to 4.1,
     you can stop using the `--old-passwords' server option. You can
     also change the passwords for your MySQL accounts to use the new
     more secure format.

   * Upgrade to 4.1 and run the `mysql_fix_privilege_tables' script to
     widen the `Password' column in the `user' table.  If you know that
     all clients also have been upgraded to 4.1, don't run the server
     with the `--old-passwords' option.  Instead, change the passwords
     on all existing accounts so that they have the new format.  A
     pure-4.1 installation is the most secure.


Further background on password hashing with respect to client
authentication and password-changing operations may be found in *Note
Password hashing::.


Upgrading From Version 3.23 to 4.0
----------------------------------

In general, you should do the following when upgrading to 4.0 from an
earlier MySQL version:

   * After upgrading, update the grant tables to add new privileges and
     features.  The procedure uses the `mysql_fix_privilege_tables'
     script and is described in *Note Upgrading-grant-tables::.

   * Edit any MySQL startup scripts or configure files to not use any
     of the deprecated options described later in this section.

   * Convert your old `ISAM' files to `MyISAM' files with the
     `mysql_convert_table_format database' script. (This is a Perl
     script; it requires that DBI be installed.) To convert the tables
     in a given database, use this command:

          shell> mysql_convert_table_format database db_name

     Note that this should only be used if all tables in the given
     database are `ISAM' or `MyISAM' tables. To avoid converting tables
     of other types to `MyISAM', you can explicitly list the names of
     your `ISAM' tables after the database name on the command line.
     You can also issue a `ALTER TABLE table_name TYPE=MyISAM'
     statement for each `ISAM' table to convert it to `MyISAM'.

     To find out the table type for a given table, use this statement:

          mysql> SHOW TABLE STATUS LIKE 'tbl_name';

   * Ensure that you don't have any MySQL clients that use shared
     libraries (like the Perl `DBD-mysql' mode). If you do, you should
     recompile them, because the data structures used in
     `libmysqlclient.so' have changed.  The same applies to other MySQL
     interfaces as well, such as the Python `MySQLdb' module.


MySQL 4.0 will work even if you don't do the above, but you will not be
able to use the new security privileges that MySQL 4.0 and you may run
into problems when upgrading later to MySQL 4.1 or newer.  The `ISAM'
file format still works in MySQL 4.0 but it's deprecated and will be
disabled (not compiled in by default) in MySQL 4.1. `MyISAM' tables
should be used instead.

Old clients should work with a Version 4.0 server without any problems.

Even if you do the above, you can still downgrade to MySQL 3.23.52 or
newer if you run into problems with the MySQL 4.0 series.  In this
case, you must use `mysqldump' to dump any tables that use full-text
indexes and reload the dump file into the 3.23 server.  This is
necessary because 4.0 uses a new format for full-text indexing.

The following is a more complete list that tells what you must watch out
for when upgrading to version 4.0:

   * MySQL 4.0 has a lot of new privileges in the `mysql.user' table.
     *Note `GRANT': GRANT.

     To get these new privileges to work, you must update the grant
     tables.  The procedure is described in *Note
     Upgrading-grant-tables::.  Until you do this, all users have the
     `SHOW DATABASES', `CREATE TEMPORARY TABLES', and `LOCK TABLES'
     privileges. `SUPER' and `EXECUTE' privileges take their value from
     `PROCESS'.  `REPLICATION SLAVE' and `REPLICATION CLIENT' take their
     values from `FILE'.

     If you have any scripts that create new users, you may want to
     change them to use the new privileges.  If you are not using
     `GRANT' commands in the scripts, this is a good time to change
     your scripts to use `GRANT' instead of modifying the grant tables
     directly..

     From version 4.0.2 on, the option `--safe-show-database' is
     deprecated (and no longer does anything). *Note Privileges
     options::.

     If you get `Access denied' errors for new users in version 4.0.2
     and up, you should check if you need some of the new grants that
     you didn't need before.  In particular, you will need `REPLICATION
     SLAVE' (instead of `FILE') for new slaves.

   * `safe_mysqld' is renamed to `mysqld_safe'.  For backward
     compatibility, binary distributions will for some time include
     `safe_mysqld' as a symlink to `mysqld_safe'.

   * InnoDB support is now included by default in binary distributions.
     If you build MySQL from source, InnoDB is configured in by default.
     If you do not use InnoDB and want to save memory when running a
     server that has InnoDB support enabled, use the `--skip-innodb'
     server startop option. To compile MySQL without InnoDB support,
     run `configure' with the `--without-innodb' option.

   * The startup parameters `myisam_max_extra_sort_file_size' and
     `myisam_max_extra_sort_file_size' are now given in bytes (they
     were given in megabytes before 4.0.3).

   * External system locking of `MyISAM'/`ISAM' files is now turned off
     by default.  Your can turn this on by doing `--external-locking'.
     (However, this is never needed for most users.)

   * The following startup variables/options have been renamed:

     *Old Name*                         *New Name*
     `myisam_bulk_insert_tree_size'     `bulk_insert_buffer_size'
     `query_cache_startup_type'         `query_cache_type'
     `record_buffer'                    `read_buffer_size'
     `record_rnd_buffer'                `read_rnd_buffer_size'
     `sort_buffer'                      `sort_buffer_size'
     `warnings'                         `log-warnings'
     `--err-log'                        `--log-error' (for `mysqld_safe')

     The startup options `record_buffer', `sort_buffer' and `warnings'
     will still work in MySQL 4.0 but are deprecated.

   * The following SQL variables have changed name.

     *Old Name*                         *New Name*
     `SQL_BIG_TABLES'                   `BIG_TABLES'
     `SQL_LOW_PRIORITY_UPDATES'         `LOW_PRIORITY_UPDATES'
     `SQL_MAX_JOIN_SIZE'                `MAX_JOIN_SIZE'
     `SQL_QUERY_CACHE_TYPE'             `QUERY_CACHE_TYPE'
     The old names still work in MySQL 4.0 but are deprecated.

   * You have to use `SET GLOBAL SQL_SLAVE_SKIP_COUNTER=#' instead of
     `SET SQL_SLAVE_SKIP_COUNTER=#'.

   * The `mysqld' startup options `--skip-locking' and
     `--enable-locking' were renamed to `--skip-external-locking' and
     `--external-locking'.

   * `SHOW MASTER STATUS' now returns an empty set if binary logging is
     not enabled.

   * `SHOW SLAVE STATUS' now returns an empty set if slave is not
     initialised.

   * `mysqld' now has the option `--temp-pool' enabled by default as
     this gives better performance with some operating systems (most
     notably Linux).

   * `DOUBLE' and `FLOAT' columns now honour the `UNSIGNED' flag on
     storage (before, `UNSIGNED' was ignored for these columns).

   * `ORDER BY col_name DESC' sorts `NULL' values last, as of MySQL
     4.0.11. In 3.23 and in earlier 4.0 versions, this was not always
     consistent.

   * `SHOW INDEX' has two more columns (`Null' and `Index_type') than
     it had in 3.23.

   * `CHECK', `SIGNED', `LOCALTIME' and `LOCALTIMESTAMP' are now
     reserved words.

   * The result of all bitwise operators (`|', `&', `<<', `>>', and
     `~')) is now unsigned.  This may cause problems if you are using
     them in a context where you want a signed result.  *Note Cast
     Functions::.

   * *Note*: when you use subtraction between integer values where one
     is of type `UNSIGNED', the result will be unsigned.  In other
     words, before upgrading to MySQL 4.0, you should check your
     application for cases where you are subtracting a value from an
     unsigned entity and want a negative answer or subtracting an
     unsigned value from an integer column. You can disable this
     behaviour by using the `--sql-mode=NO_UNSIGNED_SUBTRACTION' option
     when starting `mysqld'.  *Note Cast Functions::.

   * To use `MATCH ... AGAINST (... IN BOOLEAN MODE)' with your tables,
     you need to rebuild them with `REPAIR TABLE table_name USE_FRM'.

   * `LOCATE()' and `INSTR()' are case-sensitive if one of the
     arguments is a binary string. Otherwise they are case-insensitive.

   * `STRCMP()' now uses the current character set when doing
     comparisons, which means that the default comparison behaviour now
     is case-insensitive.

   * `HEX(string)' now returns the characters in `string' converted to
     hexadecimal.  If you want to convert a number to hexadecimal, you
     should ensure that you call `HEX()' with a numeric argument.

   * In 3.23, `INSERT INTO ... SELECT' always had `IGNORE' enabled.  In
     4.0.1, MySQL will stop (and possibly roll back) by default in case
     of an error unless you specify `IGNORE'.

   * The old C API functions `mysql_drop_db()', `mysql_create_db()', and
     `mysql_connect()' are no longer supported unless you compile MySQL
     with `CFLAGS=-DUSE_OLD_FUNCTIONS'.  However, it is preferable to
     change client programs to use the new 4.0 API instead.

   * In the `MYSQL_FIELD' structure, `length' and `max_length' have
     changed from `unsigned int' to `unsigned long'. This should not
     cause any problems, except that they may generate warning messages
     when used as arguments in the `printf()' class of functions.

   * You should use `TRUNCATE TABLE' when you want to delete all rows
     from a table and you don't need to obtain a count of the number of
     rows that were deleted.  (`DELETE FROM table_name' returns a row
     count in 4.0, and `TRUNCATE TABLE' is faster.)

   * You will get an error if you have an active `LOCK TABLES' or
     transaction when trying to execute `TRUNCATE TABLE' or `DROP
     DATABASE'.

   * You should use integers to store values in `BIGINT' columns
     (instead of using strings, as you did in MySQL 3.23).  Using
     strings will still work, but using integers is more efficient.

   * The format of `SHOW OPEN TABLES' has changed.

   * Multi-threaded clients should use `mysql_thread_init()' and
     `mysql_thread_end()'. *Note Threaded clients::.

   * If you want to recompile the Perl `DBD::mysql' module, you must get
     `DBD-mysql' version 1.2218 or newer because older DBD modules used
     the deprecated `mysql_drop_db()' call.  Version 2.1022 or newer is
     recommended.

   * `RAND(seed)' returns a different random number series in 4.0 than
     in 3.23; this was done to further differentiate `RAND(seed)' and
     `RAND(seed+1)'.

   * The default type returned by `IFNULL(A,B)' is now set to be the
     more 'general' of the types of `A' and `B'. (The
     general-to-specific order is string, `REAL' or `INTEGER').


If you are running MySQL Server on Windows, please also see *Note
Windows upgrading::. If you are using replication, please also see
*Note Replication Implementation::.


Upgrading From Version 3.22 to 3.23
-----------------------------------

MySQL Version 3.23 supports tables of the new `MyISAM' type and the old
`ISAM' type.  You don't have to convert your old tables to use these
with Version 3.23.  By default, all new tables will be created with
type `MyISAM' (unless you start `mysqld' with the
`--default-table-type=isam' option). You can convert an `ISAM' table to
`MyISAM' format with `ALTER TABLE table_name TYPE=MyISAM' or the Perl
script `mysql_convert_table_format'.

Version 3.22 and 3.21 clients will work without any problems with a
Version 3.23 server.

The following list tells what you have to watch out for when upgrading
to Version 3.23:

   * All tables that use the `tis620' character set must be fixed with
     `myisamchk -r' or `REPAIR TABLE'.

   * If you do a `DROP DATABASE' on a symbolically-linked database,
     both the link and the original database are deleted.  (This didn't
     happen in 3.22 because `configure' didn't detect the availability
     of the `readlink()' system call.)

   * `OPTIMIZE TABLE' now works only for `MyISAM' tables.  For other
     table types, you can use `ALTER TABLE' to optimise the table.
     During `OPTIMIZE TABLE', the table is now locked to prevent it
     from being used by other threads.

   * The MySQL client `mysql' is now by default started with the option
     `--no-named-commands (-g)'. This option can be disabled with
     `--enable-named-commands (-G)'. This may cause incompatibility
     problems in some cases--for example, in SQL scripts that use named
     commands without a semicolon.  Long format commands still work
     from the first line.

   * Date functions that work on parts of dates (like `MONTH()') will
     now return 0 for `0000-00-00' dates. (In MySQL 3.22, these
     functions returned `NULL'.)

   * If you are using the `german' character sort order for `ISAM'
     tables, you must repair them with `isamchk -r', because we have
     made some changes in the sort order.

   * The default return type of `IF()' now depends on both arguments
     and not only the first argument.

   * `AUTO_INCREMENT' columns should not be used to store negative
     numbers. The reason for this is that negative numbers caused
     problems when wrapping from -1 to 0.  You should not store 0 in
     `AUTO_INCREMENT' columns, either; `CHECK TABLE' will complain
     about 0 values because they may change if you dump and restore the
     table.  `AUTO_INCREMENT' for `MyISAM' tables is now handled at a
     lower level and is much faster than before. In addition, for
     `MyISAM' tables, old numbers are no longer reused, even if you
     delete rows from the table.

   * `CASE', `DELAYED', `ELSE', `END', `FULLTEXT', `INNER', `RIGHT',
     `THEN', and `WHEN' are now reserved words.

   * `FLOAT(X)' is now a true floating-point type and not a value with a
     fixed number of decimals.

   * When declaring columns using a `DECIMAL(length,dec)' type, the
     `length' argument no longer includes a place for the sign or the
     decimal point.

   * A `TIME' string must now be of one of the following formats:
     `[[[DAYS] [H]H:]MM:]SS[.fraction]' or
     `[[[[[H]H]H]H]MM]SS[.fraction]'.

   * `LIKE' now compares strings using the same character comparison
     rules as for the `=' operator.  If you require the old behaviour,
     you can compile MySQL with the `CXXFLAGS=-DLIKE_CMP_TOUPPER' flag.

   * `REGEXP' is now case-insensitive if neither of the strings are
     binary strings.

   * When you check or repair `MyISAM' (`.MYI') tables, you should use
     the `CHECK TABLE' statement or the `myisamchk' command. For `ISAM'
     (`.ISM') tables, use the `isamchk' command.

   * If you want your `mysqldump' files to be compatible between MySQL
     Version 3.22 and Version 3.23, you should not use the `--opt' or
     `--all' option to `mysqldump'.

   * Check all your calls to `DATE_FORMAT()' to make sure there is a
     `%' before each format character.  (MySQL Version 3.22 and later
     already allowed this syntax.)

   * `mysql_fetch_fields_direct()' is now a function (it used to be a
     macro) and it returns a pointer to a `MYSQL_FIELD' instead of a
     `MYSQL_FIELD'.

   * `mysql_num_fields()' can no longer be used on a `MYSQL*' object
     (it's now a function that takes a `MYSQL_RES*' value as an
     argument). With a `MYSQL*' object, you should now use
     `mysql_field_count()' instead.

   * In MySQL Version 3.22, the output of `SELECT DISTINCT ...' was
     almost always sorted.  In Version 3.23, you must use `GROUP BY' or
     `ORDER BY' to obtain sorted output.

   * `SUM()' now returns `NULL' instead of 0 if there are no matching
     rows. This is required by SQL-99.

   * An `AND' or `OR' with `NULL' values will now return `NULL' instead
     of 0. This mostly affects queries that use `NOT' on an `AND/OR'
     expression as `NOT NULL' = `NULL'.

   * `LPAD()' and `RPAD()' now shorten the result string if it's longer
     than the length argument.


Upgrading from Version 3.21 to 3.22
-----------------------------------

Nothing that affects compatibility has changed between versions 3.21
and 3.22.  The only pitfall is that new tables that are created with
`DATE' type columns will use the new way to store the date. You can't
access these new columns from an old version of `mysqld'.

After installing MySQL Version 3.22, you should start the new server
and then run the `mysql_fix_privilege_tables' script. This will add the
new privileges that you need to use the `GRANT' command.  If you forget
this, you will get `Access denied' when you try to use `ALTER TABLE',
`CREATE INDEX', or `DROP INDEX'. The procedure for updating the grant
tables is described in *Note Upgrading-grant-tables::.

The C API interface to `mysql_real_connect()' has changed.  If you have
an old client program that calls this function, you must place a `0' for
the new `db' argument (or recode the client to send the `db' element
for faster connections).  You must also call `mysql_init()' before
calling `mysql_real_connect()'.  This change was done to allow the new
`mysql_options()' function to save options in the `MYSQL' handler
structure.

The `mysqld' variable `key_buffer' has been renamed to
`key_buffer_size', but you can still use the old name in your startup
files.


Upgrading from Version 3.20 to 3.21
-----------------------------------

If you are running a version older than Version 3.20.28 and want to
switch to Version 3.21, you need to do the following:

You can start the `mysqld' Version 3.21 server with the
`--old-protocol' option to use it with clients from a Version 3.20
distribution.  In this case, the new client function `mysql_errno()'
will not return any server error, only `CR_UNKNOWN_ERROR' (but it works
for client errors), and the server uses the old pre-3.21 `password()'
checking rather than the new method.

If you are *not* using the `--old-protocol' option to `mysqld', you
will need to make the following changes:

   * All client code must be recompiled. If you are using ODBC, you
     must get the new `MyODBC' 2.x driver.

   * The script `scripts/add_long_password' must be run to convert the
     `Password' field in the `mysql.user' table to `CHAR(16)'.

   * All passwords must be reassigned in the `mysql.user' table (to get
     62-bit rather than 31-bit passwords).

   * The table format hasn't changed, so you don't have to convert any
     tables.


MySQL Version 3.20.28 and above can handle the new `user' table format
without affecting clients. If you have a MySQL version earlier than
Version 3.20.28, passwords will no longer work with it if you convert
the `user' table. So to be safe, you should first upgrade to at least
Version 3.20.28 and then upgrade to Version 3.21.

The new client code works with a 3.20.x `mysqld' server, so if you
experience problems with 3.21.x, you can use the old 3.20.x server
without having to recompile the clients again.

If you are not using the `--old-protocol' option to `mysqld', old
clients will be unable to connect and will issue the following error
message:

     ERROR: Protocol mismatch. Server Version = 10 Client Version = 9

The new Perl `DBI'/`DBD' interface also supports the old `mysqlperl'
interface.  The only change you have to make if you use `mysqlperl' is
to change the arguments to the `connect()' function.  The new arguments
are: `host', `database', `user', and `password' (note that the `user'
and `password' arguments have changed places).  *Note Perl `DBI' Class:
Perl DBI Class.

The following changes may affect queries in old applications:

   * `HAVING' must now be specified before any `ORDER BY' clause.

   * The parameters to `LOCATE()' have been swapped.

   * There are some new reserved words. The most notable are `DATE',
     `TIME', and `TIMESTAMP'.



Upgrading the Grant Tables
--------------------------

Some releases introduce changes to the structure of the grant tables
(the tables in the `mysql' database) to add new  privileges or
features. To make sure that your grant tables are current when you
update to a new version of MySQL, you should update your grant tables
as well.

On Unix or Unix-like systems, update the grant tables by running the
`mysql_fix_privilege_tables' script:

     shell> mysql_fix_privilege_tables

You must run this script while the server is running. It attempts to
connect to the server running on the local host as `root'.  If your
`root' account requires a password, indicate the password on the
command line.  For MySQL 4.1 and up, specify the password like this:

     shell> mysql_fix_privilege_tables --password=root_password

Prior to MySQL 4.1, specify the password like this:

     shell> mysql_fix_privilege_tables root_password

The `mysql_fix_privilege_tables' script performs any actions necessary
to convert your grant tables to the current format. You may see some
`Duplicate column name' warnings as it runs; they can be ignored.

After running the script, stop the server and restart it.

On Windows systems, there isn't an easy way to update the grant tables
until MySQL 4.0.15.  From version 4.0.15 on, MySQL distributions
include a `mysql_fix_privilege_tables.sql' SQL script that you can run
using the `mysql' client.  If your MySQL installation is located at
`C:\mysql', the command looks like this (enter it all on one line):

     shell> C:\mysql\bin\mysql -f -u root -p mysql
                < C:\mysql\scripts\mysql_fix_privilege_tables.sql

If your installation is located in some other directory, adjust the
pathnames appropriately.

The command will prompt you for the `root' password; enter it when
prompted.

As with the Unix procedure, you may see some `Duplicate column name'
warnings as `mysql' processes the statements in the
`mysql_fix_privilege_tables.sql' script; they can be ignored.

After running the script, stop the server and restart it.


Upgrading to Another Architecture
---------------------------------

If you are using MySQL Version 3.23, you can copy the `.frm', `.MYI',
and `.MYD' files for `MyISAM' tables between different architectures
that support the same floating-point format.  (MySQL takes care of any
byte-swapping issues.)  *Note `MyISAM' Tables: MyISAM.

The MySQL `ISAM' data and index files (`.ISD' and `*.ISM',
respectively) are architecture-dependent and in some cases
OS-dependent.  If you want to move your applications to another machine
that has a different architecture or OS than your current machine, you
should not try to move a database by simply copying the files to the
other machine. Use `mysqldump' instead.

By default, `mysqldump' will create a file containing SQL statements.
You can then transfer the file to the other machine and feed it as input
to the `mysql' client.

Try `mysqldump --help' to see what options are available.  If you are
moving the data to a newer version of MySQL, you should use `mysqldump
--opt' with the newer version to get a fast, compact dump.

The easiest (although not the fastest) way to move a database between
two machines is to run the following commands on the machine on which
the database is located:

     shell> mysqladmin -h 'other hostname' create db_name
     shell> mysqldump --opt db_name \
             | mysql -h 'other hostname' db_name

If you want to copy a database from a remote machine over a slow
network, you can use:

     shell> mysqladmin create db_name
     shell> mysqldump -h 'other hostname' --opt --compress db_name \
             | mysql db_name

You can also store the result in a file, then transfer the file to the
target machine and load the file into the database there.  For example,
you can dump a database to a file on the source machine like this:

     shell> mysqldump --quick db_name | gzip > db_name.contents.gz

(The file created in this example is compressed.) Transfer the file
containing the database contents to the target machine and run these
commands there:

     shell> mysqladmin create db_name
     shell> gunzip < db_name.contents.gz | mysql db_name

You can also use `mysqldump' and `mysqlimport' to transfer the database.
For big tables, this is much faster than simply using `mysqldump'.  In
the following commands, `DUMPDIR' represents the full pathname of the
directory you use to store the output from `mysqldump'.

First, create the directory for the output files and dump the database:

     shell> mkdir DUMPDIR
     shell> mysqldump --tab=DUMPDIR db_name

Then transfer the files in the `DUMPDIR' directory to some corresponding
directory on the target machine and load the files into MySQL there:

     shell> mysqladmin create db_name           # create database
     shell> cat DUMPDIR/*.sql | mysql db_name   # create tables in database
     shell> mysqlimport db_name DUMPDIR/*.txt   # load data into tables

Also, don't forget to copy the `mysql' database because that's where the
grant tables (`user', `db', `host') are stored.  You may have to run
commands as the MySQL `root' user on the new machine until you have the
`mysql' database in place.

After you import the `mysql' database on the new machine, execute
`mysqladmin flush-privileges' so that the server reloads the grant table
information.


Upgrading MySQL under Windows
-----------------------------

When upgrading MySQL under Windows, please follow these steps:

  1. Download the latest Windows distribution of MySQL.

  2. Choose a time of day with low usage, where a maintenance break is
     acceptable.

  3. Alert the users that still are active about the maintenance break.

  4. Stop the running MySQL Server (for example, with `NET STOP mysql'
     if you are running MySQL as a service, or with `mysqladmin
     shutdown' otherwise).

  5. Exit the `WinMySQLadmin' program if it is running.

  6. Run the installation script of the Windows distribution, by
     clicking the "Install" button in WinZip and following the
     installation steps of the script.

  7. You may either overwrite your old MySQL installation (usually
     located at `C:\mysql'), or install it into a different directory,
     such as `C:\mysql4'. Overwriting the old installation is
     recommended.

  8. The version of MySQL that is started as a service is determined by
     the `basedir' parameter in the `my.ini' file of your Windows
     directory (for example, `C:\WINNT').

  9. Restart the server (for example, with `NET START mysql' if you run
     MYSQL as a service, or by invoking `mysqld' directly otherwise).

 10. Update the grant tables. The procedure is described in *Note
     Upgrading-grant-tables::.


Possible error situations:
     A system error has occurred.
     System error 1067 has occurred.
     The process terminated unexpectedly.

This cryptic error means that your `my.cnf' file (by default
`C:\my.cnf') contains an option that cannot be recognised by MySQL. You
can verify that this is the case by trying to restart MySQL with the
`my.cnf' file renamed, for example, to `my.cnf.old' to prevent the
server from using it.  Once you have verified it, you need to identify
which option is the culprit. Create a new `my.cnf' file and move parts
of the old file to it (restarting the server after you move each part)
until you determine which part causes server startup to fail.


Operating System Specific Notes
===============================

* Menu:

* Windows::                     Windows Notes
* Linux::                       Linux Notes (All Linux Versions)
* Solaris::                     Solaris Notes
* BSD Notes::                   BSD Notes
* Mac OS X::                    Mac OS X Notes
* Other Unix Notes::            Other Unix Notes
* OS/2::                        OS/2 Notes
* Novell NetWare::              Novell NetWare Notes
* BeOS::                        BeOS Notes


Windows Notes
-------------

This section describes using MySQL on Windows. This information is also
provided in the `README' file that comes with the MySQL Windows
distribution. *Note Windows installation::.

On Windows 95, 98, or Me, MySQL clients always connect to the server
using TCP/IP. On NT-based systems such as Windows NT, 2000, or XP,
clients have two options. They can use TCP/IP, or they can use a named
pipe if the server supports named pipe connections.

For information about which server binary to run, see *Note Windows
prepare environment::.

The examples in this section assume that MySQL is installed under the
default location of `C:\mysql'. Adjust the pathnames shown in the
examples if you have MySQL installed in a different location.

* Menu:

* Win95 start::                 Starting MySQL on Windows 95, 98, or Me
* NT start::                    Starting MySQL on Windows NT, 2000, or XP
* Windows running::             Running MySQL on Windows
* Windows and SSH::             Connecting to MySQL Remotely from Windows with SSH
* Windows symbolic links::      Distributing Data Across Different Disks on Windows
* Windows client compiling::    Compiling MySQL Clients on Windows
* Windows vs Unix::             MySQL for Windows Compared to Unix MySQL


Starting MySQL on Windows 95, 98, or Me
.......................................

On these versions of Windows, MySQL uses TCP/IP to connect a client to
a server. (This will allow any machine on your network to connect to
your MySQL server.)  Because of this, you must make sure that TCP/IP
support is installed on your machine before starting MySQL.  You can
find TCP/IP on your Windows CD-ROM.

Note that if you are using an old Windows 95 release (for example,
OSR2), it's likely that you have an old Winsock package; MySQL requires
Winsock 2! You can get the newest Winsock from
`http://www.microsoft.com/'.  Windows 98 has the new Winsock 2 library,
so it is unnecessary to update the library.

To start the `mysqld' server, you should start a console window (a
"DOS" window) and enter this command:

     shell> C:\mysql\bin\mysqld

This will start `mysqld' in the background. That is, after the server
starts up, you should see another command prompt. (Note that if you
start the server this way on Windows NT, 2000, or XP, the server will
run in the foreground and the next command prompt will not appear until
the server exits.  To run client programs while the server is running,
you should open another console window.)

You can stop the MySQL server by executing this command:

     shell> C:\mysql\bin\mysqladmin -u root shutdown

This invokes the MySQL administrative utility `mysqladmin' to connect
to the server as `root', which is the default administrative account in
the MySQL grant system. Please note that users in the MySQL grant
system are wholly independent from any login users under Windows.

If `mysqld' doesn't start, please check the error log to see if the
server wrote any messages there to indicate the cause of the problem.
The error log is located in the `C:\mysql\data' directory. It is the
file with a suffix of `.err'. You can also try to start the server as
`mysqld --console'; in this case, you may get some useful information
on the screen that may help solve the problem.

The last option is to start `mysqld' with `--standalone --debug'.  In
this case `mysqld' will write a log file `C:\mysqld.trace' that should
contain the reason why `mysqld' doesn't start. *Note Making trace
files::.

Use `mysqld --help' to display all the options that `mysqld'
understands!


Starting MySQL on Windows NT, 2000, or XP
.........................................

To get MySQL to work with TCP/IP on Windows NT 4, you must install
service pack 3 (or newer)!

Normally you should install MySQL as a service on Windows NT/2000/XP.
In case the server was already running, first stop it using the
following command:

     shell> C:\mysql\bin\mysqladmin -u root shutdown

This invokes the MySQL administrative utility `mysqladmin' to connect
to the server as `root', which is the default administrative account in
the MySQL grant system. Please note that users in the MySQL grant
system are wholly independent from any login users under Windows.

Now install the server as a service:

     shell> C:\mysql\bin\mysqld --install

The service is installed with the name `MySql'. Once installed, it can
be immediately started from the `Services' utility, or by using the
command `NET START MySql'.

Once running, `mysqld' can be stopped by using the Services utility,
the command `NET STOP MySql', or the command `mysqladmin shutdown'.

If any startup options are required, you can place them in the
`[mysqld]' group of any of the standard option files. As of MySQL
4.0.3, you can place options in the `[mysqld]' group of any option file
and use a `--defaults-file' option to tell the server the name of the
file when you install the service. For example:

     shell> C:\mysql\bin\mysqld --install MySql --defaults-file=C:\my-opts.cnf

You can also specify options as "`Start parameters'" in the Windows
`Services' utility before you start the MySQL service.

The `Services' utility (`Windows Service Control Manager') can be found
in the `Windows Control Panel' (under `Administrative Tools' on Windows
2000). It is advisable to close the Services utility while performing
the `--install' or `--remove' operations, this prevents some odd errors.

Please note that from MySQL version 3.23.44, you have the choice of
setting up the service as `Manual' instead (if you don't wish the
service to be started automatically during the boot process):

     shell> C:\mysql\bin\mysqld --install-manual

When MySQL is running as a service, the operating system will
automatically stop the server on computer shutdown. In MySQL versions
older than 3.23.47, Windows waited only for a few seconds for the
shutdown to complete, and killed the database server process if the
time limit was exceeded. This had the potential to cause problems.
(For example, at the next startup the `InnoDB' storage engine had to do
crash recovery.) Starting from MySQL version 3.23.48, Windows waits
longer for the MySQL server shutdown to complete. If you notice this
still is not enough for your installation, it is safest not to run the
MySQL server as a service. Instead, run it from the command-line
prompt, and shut it down with `mysqladmin shutdown'.

There is a problem that Windows NT (but not Windows 2000/XP) by default
only waits 20 seconds for a service to shut down, and after that kills
the service process. You can increase this default by opening the
Registry Editor `\winnt\system32\regedt32.exe' and editing the value of
`WaitToKillServiceTimeout' at
`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control' in the Registry
tree. Specify the new larger value in milliseconds (for example, 120000
to have Windows NT wait up to 120 seconds).

Please note that when run as a service, `mysqld' has no access to a
console and so no messages can be seen.  Errors can be checked in the
error log, which is located in the `C:\mysql\data' directory. It is the
file with a suffix of `.err'.

If you have problems installing `mysqld' as a service using just the
server name, try installing it using its full pathname:

     shell> C:\mysql\bin\mysqld --install

If that doesn't work, you can get `mysqld' to start properly by fixing
the path in the registry!

If you don't want to start `mysqld' as a service, you can start it from
the command line the same way as for Windows 95, 98, or Me. For
instructions, see *Note Win95 start::.


Running MySQL on Windows
........................

MySQL supports TCP/IP on all Windows platforms. The `mysqld-nt' and
`mysql-max-nt' servers support named pipes on NT, 2000, and XP.  The
default is to use TCP/IP regardless of the platform, because named
pipes are actually slower than TCP/IP, and because some users have
experienced problems shutting down the MySQL server when named pipes
are used. Starting from 3.23.50, named pipes are only enabled for
`mysqld-nt' and `mysql-max-nt' if they are started with the
`--enable-named-pipe' option.

You can force a MySQL client to use named pipes by specifying the
`--pipe' option or by specifying `.' as the host name.  Use the
`--socket' option to specify the name of the pipe.  In MySQL 4.1, you
should use the `--protocol=PIPE' option.

You can test whether the MySQL server is working by executing any of the
following commands:

     C:\> C:\mysql\bin\mysqlshow
     C:\> C:\mysql\bin\mysqlshow -u root mysql
     C:\> C:\mysql\bin\mysqladmin version status proc
     C:\> C:\mysql\bin\mysql test

If `mysqld' is slow to answer to connections on Windows 9x/Me, there is
probably a problem with your DNS.  In this case, start `mysqld' with the
`--skip-name-resolve' option and use only `localhost' and IP numbers in
the `Host' column of the MySQL grant tables.

There are two versions of the MySQL command-line tool:
*Binary**Description*
`mysql' Compiled on native Windows, offering
        limited text editing capabilities.
`mysqlc'Compiled with the Cygnus GNU compiler and
        libraries, which offers `readline' editing.

If you want to use `mysqlc', you must have a copy of the
`cygwinb19.dll' library installed somewhere that `mysqlc' can find it.
If your distribution of MySQL doesn't have this library installed in the
same directory as `mysqlc' (the `bin' directory under the base
directory of your MySQL installation, look in the `lib' directory to
find it and copy it to your Windows system directory (`\windows\system'
or similar place).

The default privileges on Windows give all local users full privileges
to all databases without specifying a password.  To make MySQL more
secure, you should set a password for all users and remove the row in
the `mysql.user' table that has `Host='localhost'' and `User='''.

You should also add a password for the `root' user. The following
example starts by removing the anonymous user that has all privileges,
then sets a `root' user password:

     C:\> C:\mysql\bin\mysql mysql
     mysql> DELETE FROM user WHERE Host='localhost' AND User='';
     mysql> QUIT
     C:\> C:\mysql\bin\mysqladmin reload
     C:\> C:\mysql\bin\mysqladmin -u root password your_password

After you've set the password, if you want to shut down the `mysqld'
server, you can do so using this command:

     C:\> mysqladmin --user=root --password=your_password shutdown

If you are using the old shareware version of MySQL Version 3.21 under
Windows, the above command will fail with an error: `parse error near
'SET password''.  The solution to this problem is to upgrade to a newer
version of MySQL.

With the current MySQL versions you can easily add new users and change
privileges with `GRANT' and `REVOKE' commands.  *Note `GRANT': GRANT.


Connecting to MySQL Remotely from Windows with SSH
..................................................

Here is a note about how to connect to get a secure connection to remote
MySQL server with SSH (by David Carlson <dcarlson@mplcomm.com>):

  1. Install an SSH client on your Windows machine.  As a user, the
     best non-free one I've found is from `SecureCRT' from
     `http://www.vandyke.com/'.  Another option is `f-secure' from
     `http://www.f-secure.com/'. You can also find some free ones on
     `Google' at
     `http://directory.google.com/Top/Computers/Security/Products_and_Tools/Cryptography/SSH/Clients/Windows/'.

  2. Start your Windows SSH client.  Set `Host_Name =
     yourmysqlserver_URL_or_IP'.  Set `userid=your_userid' to log in to
     your server (probably not the same as your MySQL login/password.

  3. Set up port forwarding. Either do a remote forward (Set
     `local_port: 3306', `remote_host: yourmysqlservername_or_ip',
     `remote_port: 3306' ) or a local forward (Set `port: 3306',
     `host: localhost', `remote port: 3306').

  4. Save everything, otherwise you'll have to redo it the next time.

  5. Log in to your server with SSH session you just created.

  6. On your Windows machine, start some ODBC application (such as
     Access).

  7. Create a new file in Windows and link to MySQL using the ODBC
     driver the same way you normally do, except type in `localhost'
     for the MySQL host server--not `yourmysqlservername'.

You should now have an ODBC connection to MySQL, encrypted using SSH.


Distributing Data Across Different Disks on Windows
...................................................

Beginning with MySQL Version 3.23.16, the `mysqld-max' and
`mysql-max-nt' servers in the MySQL distribution are compiled with the
`-DUSE_SYMDIR' option.  This allows you to put a database on a
different disk by setting up a symbolic link to it (in a manner similar
to the way that symbolic links work on Unix).

On Windows, you make a symbolic link to a database by creating a file
that contains the path to the destination directory and saving this in
the data directory using the filename `db_name.sym', where `db_name' is
the database name.  Note that the symbolic link will not be used if a
directory with the database name exists.

For example, if the MySQL data directory is `C:\mysql\data' and you
want to have database `foo' located at `D:\data\foo', you should create
the file `C:\mysql\data\foo.sym' that contains the text `D:\data\foo\'.
After that, all tables created in the database `foo' will be created
in `D:\data\foo'.

Note that because of the speed penalty you get when opening every table,
we have not enabled this by default even if you have compiled MySQL
with support for this. To enable symlinks you should put in your
`my.cnf' or `my.ini' file the following entry:

     [mysqld]
     symbolic-links

In MySQL 4.0, symbolic links are enabled by default. If you don't need
them, you can disable them with the `skip-symbolic-links' option.


Compiling MySQL Clients on Windows
..................................

In your source files, you should include `my_global.h' before `mysql.h':

     #include <my_global.h>
     #include <mysql.h>

`my_global.h' includes any other files needed for Windows compatibility
(such as `windows.h') if you compile your program on Windows.

You can either link your code with the dynamic `libmysql.lib' library,
which is just a wrapper to load in `libmysql.dll' on demand, or link
with the static `mysqlclient.lib' library.

Note that because the MySQL client libraries are compiled as threaded
libraries, you should also compile your code to be multi-threaded!


MySQL for Windows Compared to Unix MySQL
........................................

MySQL for Windows has by now proven itself to be very stable. The
Windows version of MySQL has the same features as the corresponding
Unix version, with the following exceptions:

*Windows 95 and threads*
     Windows 95 leaks about 200 bytes of main memory for each thread
     creation.  Each connection in MySQL creates a new thread, so you
     shouldn't run `mysqld' for an extended time on Windows 95 if your
     server handles many connections!  Other versions of Windows don't
     suffer from this bug.

*Concurrent reads*
     MySQL depends on the `pread()' and `pwrite()' calls to be able to
     mix `INSERT' and `SELECT'.  Currently we use mutexes to emulate
     `pread()'/`pwrite()'.  We will, in the long run, replace the file
     level interface with a virtual interface so that we can use the
     `readfile()'/`writefile()' interface on NT/2000/XP to get more
     speed.  The current implementation limits the number of open files
     MySQL can use to 1024, which means that you will not be able to
     run as many concurrent threads on NT/2000/XP as on Unix.

*Blocking read*
     MySQL uses a blocking read for each connection, which has the
     following implications:

        * A connection will not be disconnected automatically after 8
          hours, as happens with the Unix version of MySQL.

        * If a connection hangs, it's impossible to break it without
          killing MySQL.

        * `mysqladmin kill' will not work on a sleeping connection.

        * `mysqladmin shutdown' can't abort as long as there are
          sleeping connections.

     We plan to fix this problem when our Windows developers have
     figured out a nice workaround.

*`DROP DATABASE'*
     You can't drop a database that is in use by some thread.

*Killing MySQL from the task manager*
     You can't kill MySQL from the task manager or with the shutdown
     utility in Windows 95.  You must take it down with `mysqladmin
     shutdown'.

*Case-insensitive names*
     Filenames are case-insensitive on Windows, so database and table
     names are also case-insensitive in MySQL for Windows.  The only
     restriction is that database and table names must be specified
     using the same case throughout a given statement.  *Note Name case
     sensitivity::.

*The `\' directory character*
     Pathname components in Windows 95 are separated by the `\'
     character, which is also the escape character in MySQL.  If you
     are using `LOAD DATA INFILE' or `SELECT ... INTO OUTFILE', you
     must double the `\' character:

          mysql> LOAD DATA INFILE "C:\\tmp\\skr.txt" INTO TABLE skr;
          mysql> SELECT * INTO OUTFILE 'C:\\tmp\\skr.txt' FROM skr;

     Alternatively, use Unix style filenames with `/' characters:

          mysql> LOAD DATA INFILE "C:/tmp/skr.txt" INTO TABLE skr;
          mysql> SELECT * INTO OUTFILE 'C:/tmp/skr.txt' FROM skr;

*Problems with pipes.*
     Pipes doesn't work reliably in the Windows command-line prompt.
     If the pipe includes the character `^Z' / `CHAR(24)', Windows will
     think it has encountered end-of-file and abort the program.

     This is mainly a problem when you try to apply a binary log as
     follows:

          mysqlbinlog binary-log-name | mysql --user=root

     If you get a problem applying the log and suspect it's because of
     an `^Z' / `CHAR(24)' character you can use the following
     workaround:

          mysqlbinlog binary-log-file --result-file=/tmp/bin.sql
          mysql --user=root --execute "source /tmp/bin.sql"

     The latter command also can be used to reliably read in any SQL
     file that may contain binary data.

*`Can't open named pipe' error*
     If you use a MySQL 3.22 version on NT with the newest mysql-clients
     you will get the following error:

          error 2017: can't open named pipe to host: . pipe...

     This is because the release version of MySQL uses named pipes on NT
     by default.  You can avoid this error by using the
     `--host=localhost' option to the new MySQL clients or create an
     option file `C:\my.cnf' that contains the following information:

          [client]
          host = localhost

     Starting from 3.23.50, named pipes are enabled only if `mysqld-nt'
     or `mysqld-max-nt' is started with `--enable-named-pipe'.

*`Access denied for user' error*
     If you get the error `Access denied for user: 'some-user@unknown'
     to database 'mysql'' when accessing a MySQL server on the same
     machine, this means that MySQL can't resolve your host name
     properly.

     To fix this, you should create a file `\windows\hosts' with the
     following information:

          127.0.0.1       localhost

*`ALTER TABLE'*
     While you are executing an `ALTER TABLE' statement, the table is
     locked from usage by other threads.  This has to do with the fact
     that on Windows, you can't delete a file that is in use by another
     threads.  (In the future, we may find some way to work around this
     problem.)

*`DROP TABLE'*
     `DROP TABLE' on a table that is in use by a `MERGE' table will not
     work on Windows because the `MERGE' handler does the table mapping
     hidden from the upper layer of MySQL.  Because Windows doesn't
     allow you to drop files that are open, you first must flush all
     `MERGE' tables (with `FLUSH TABLES') or drop the `MERGE' table
     before dropping the table.  We will fix this at the same time we
     introduce `VIEW's.

*`DATA DIRECTORY' and `INDEX DIRECTORY'*
     The `DATA DIRECTORY' and `INDEX DIRECTORY' options for `CREATE
     TABLE' are ignored on Windows, because Windows doesn't support
     symbolic links.

Here are some open issues for anyone who might want to help us with the
Windows release:

   * Add some nice start and shutdown icons to the MySQL installation.

   * It would be really nice to be able to kill `mysqld' from the task
     manager.  For the moment, you must use `mysqladmin shutdown'.

   * Port `readline' to Windows for use in the `mysql' command-line
     tool.

   * GUI versions of the standard MySQL clients (`mysql', `mysqlshow',
     `mysqladmin', and `mysqldump') would be nice.

   * It would be nice if the socket read and write functions in `net.c'
     were interruptible. This would make it possible to kill open
     threads with `mysqladmin kill' on Windows.

   * Add macros to use the faster thread-safe increment/decrement
     methods provided by Windows.

Other Windows-specific issues are described in the `README' file that
comes with the Windows distribution of MySQL.


Linux Notes (All Linux Versions)
--------------------------------

* Menu:

* Binary notes-Linux::          Linux Notes for Binary Distributions
* Linux-x86::                   Linux x86 Notes
* Linux-SPARC::                 Linux SPARC Notes
* Linux-Alpha::                 Linux Alpha Notes
* Linux-PowerPC::               Linux PowerPC Notes
* Linux-MIPS::                  Linux MIPS Notes
* Linux-IA-64::                 Linux IA-64 Notes

The following notes regarding `glibc' apply only to the situation when
you build MySQL yourself. If you are running Linux on an x86 machine,
in most cases it is much better for you to just use our binary. We link
our binaries against the best patched version of `glibc' we can come up
with and with the best compiler options, in an attempt to make it
suitable for a high-load server. So if you read the following text, and
are in doubt about what you should do, try our binary first to see if
it meets your needs, and worry about your own build only after you have
discovered that our binary is not good enough. In that case, we would
appreciate a note about it, so we can build a better binary next time.
For a typical user, even for setups with a lot of concurrent
connections and/or tables exceeding the 2G limit, our binary in most
cases is the best choice.

MySQL uses LinuxThreads on Linux.  If you are using an old Linux
version that doesn't have `glibc2', you must install LinuxThreads
before trying to compile MySQL.   You can get LinuxThreads at
`http://www.mysql.com/downloads/os-linux.html'.

*Note*: we have seen some strange problems with Linux 2.2.14 and MySQL
on SMP systems. If you have a SMP system, we recommend you upgrade to
Linux 2.4 as soon as possible.  Your system will be faster and more
stable by doing this.

Note that `glibc' versions before and including Version 2.1.1 have a
fatal bug in `pthread_mutex_timedwait' handling, which is used when you
do `INSERT DELAYED'.  We recommend that you not use `INSERT DELAYED'
before upgrading glibc.

If you plan to have 1000+ concurrent connections, you will need to make
some changes to LinuxThreads, recompile it, and relink MySQL against
the new `libpthread.a'.  Increase `PTHREAD_THREADS_MAX' in
`sysdeps/unix/sysv/linux/bits/local_lim.h' to 4096 and decrease
`STACK_SIZE' in `linuxthreads/internals.h' to 256 KB. The paths are
relative to the root of `glibc' Note that MySQL will not be stable with
around 600-1000 connections if `STACK_SIZE' is the default of 2 MB.

If MySQL can't open enough files, or connections, it may be that you
haven't configured Linux to handle enough files.

In Linux 2.2 and onward, you can check the number of allocated file
handles by doing:

     cat /proc/sys/fs/file-max
     cat /proc/sys/fs/dquot-max
     cat /proc/sys/fs/super-max

If you have more than 16 MB of memory, you should add something like the
following to your init scripts (for example, `/etc/init.d/boot.local'
on SuSE Linux):

     echo 65536 > /proc/sys/fs/file-max
     echo 8192 > /proc/sys/fs/dquot-max
     echo 1024 > /proc/sys/fs/super-max

You can also run the preceding commands from the command-line as root,
but these settings will be lost the next time your computer reboots.

Alternatively, you can set these parameters on bootup by using the
`sysctl' tool, which is used by many Linux distributions (SuSE has
added it as well, beginning with SuSE Linux 8.0). Just put the following
values into a file named `/etc/sysctl.conf':

     # Increase some values for MySQL
     fs.file-max = 65536
     fs.dquot-max = 8192
     fs.super-max = 1024

You should also add the following to `/etc/my.cnf':

     [mysqld_safe]
     open-files-limit=8192

This should allow MySQL to create up to 8192 connections + files.

The `STACK_SIZE' constant in LinuxThreads controls the spacing of thread
stacks in the address space.  It needs to be large enough so that there
will be plenty of room for the stack of each individual thread, but
small enough to keep the stack of some threads from running into the
global `mysqld' data.  Unfortunately, the Linux implementation of
`mmap()', as we have experimentally discovered, will successfully unmap
an already mapped region if you ask it to map out an address already in
use, zeroing out the data on the entire page, instead of returning an
error.  So, the safety of `mysqld' or any other threaded application
depends on the "gentleman" behaviour of the code that creates threads.
The user must take measures to make sure the number of running threads
at any time is sufficiently low for thread stacks to stay away from the
global heap.  With `mysqld', you should enforce this "gentleman"
behaviour by setting a reasonable value for the `max_connections'
variable.

If you build MySQL yourself and do not want to mess with patching
LinuxThreads, you should set `max_connections' to a value no higher
than 500.  It should be even less if you have a large key buffer,  large
heap tables, or some other things that make `mysqld' allocate a lot of
memory, or if you are running a 2.2 kernel with a 2G patch. If you are
using our binary or RPM version 3.23.25 or later, you can safely set
`max_connections' at 1500, assuming no large key buffer or heap tables
with lots of data.  The more you reduce `STACK_SIZE' in LinuxThreads
the more threads you can safely create.  We recommend the values between
128K and 256K.

If you use a lot of concurrent connections, you may suffer from a
"feature" in the 2.2 kernel that penalises a process for forking or
cloning a child in an attempt to prevent a fork bomb attack.  This will
cause MySQL not to scale well as you increase the number of concurrent
clients.  On single-CPU systems, we have seen this manifested in a very
slow thread creation, which means it may take a long time to connect to
MySQL (as long as 1 minute), and it may take just as long to shut it
down.  On multiple-CPU systems, we have observed a gradual drop in
query speed as the number of clients increases.  In the process of
trying to find a solution, we have received a kernel patch from one of
our users, who claimed it made a lot of difference for his site.  The
patch is available at
`http://www.mysql.com/Downloads/Patches/linux-fork.patch'. We have now
done rather extensive testing of this patch on both development and
production systems.  It has significantly improved `MySQL' performance
without causing any problems and we now recommend it to our users who
are still running high-load servers on 2.2 kernels.  This issue has
been fixed in the 2.4 kernel, so if you are not satisfied with the
current performance of your system, rather than patching your 2.2
kernel, it might be easier to just upgrade to 2.4, which will also give
you a nice SMP boost in addition to fixing this fairness bug.

We have tested MySQL on the 2.4 kernel on a 2-CPU machine and found
MySQL scales *much* better--there was virtually no slowdown on queries
throughput all the way up to 1000 clients, and the MySQL scaling factor
(computed as the ratio of maximum throughput to the throughput with one
client) was 180%.  We have observed similar results on a 4-CPU
system--virtually no slowdown as the number of clients was increased up
to 1000, and 300% scaling factor. So for a high-load SMP server we
would definitely recommend the 2.4 kernel at this point. We have
discovered that it is essential to run `mysqld' process with the
highest possible priority on the 2.4 kernel to achieve maximum
performance.  This can be done by adding `renice -20 $$' command to
`mysqld_safe'. In our testing on a 4-CPU machine, increasing the
priority gave 60% increase in throughput with 400 clients.

We are currently also trying to collect more information on how well
`MySQL' performs on 2.4 kernel on 4-way and 8-way systems. If you have
access such a system and have done some benchmarks, please send a mail
to <docs@mysql.com> with the results - we will include them in the
manual.

There is another issue that greatly hurts MySQL performance, especially
on SMP systems.  The implementation of mutex in LinuxThreads in
`glibc-2.1' is very bad for programs with many threads that only hold
the mutex for a short time. On an SMP system, ironic as it is, if you
link MySQL against unmodified `LinuxThreads', removing processors from
the machine improves MySQL performance in many cases.  We have made a
patch available for `glibc 2.1.3' to correct this behaviour
(`http://www.mysql.com/Downloads/Linux/linuxthreads-2.1-patch').

With `glibc-2.2.2' MySQL version 3.23.36 will use the adaptive mutex,
which is much better than even the patched one in `glibc-2.1.3'. Be
warned, however, that under some conditions, the current mutex code in
`glibc-2.2.2' overspins, which hurts MySQL performance. The chance of
this condition can be reduced by renicing `mysqld' process to the
highest priority. We have also been able to correct the overspin
behaviour with a patch, available at
`http://www.mysql.com/Downloads/Linux/linuxthreads-2.2.2.patch'.  It
combines the correction of overspin, maximum number of threads, and
stack spacing all in one. You will need to apply it in the
`linuxthreads' directory with `patch -p0
</tmp/linuxthreads-2.2.2.patch'.  We hope it will be included in some
form in to the future releases of `glibc-2.2'. In any case, if you link
against `glibc-2.2.2' you still need to correct `STACK_SIZE' and
`PTHREAD_THREADS_MAX'. We hope that the defaults will be corrected to
some more acceptable values for high-load MySQL setup in the future, so
that your own build can be reduced to `./configure; make; make install'.

We recommend that you use the above patches to build a special static
version of `libpthread.a' and use it only for statically linking
against `MySQL'. We know that the patches are safe for `MySQL' and
significantly improve its performance, but we cannot say anything about
other applications. If you link other applications against the patched
version of the library, or build a patched shared version and install
it on your system, you are doing it at your own risk with regard to
other applications that depend on `LinuxThreads'.

If you experience any strange problems during the installation of
MySQL, or with some common utilities hanging, it is very likely that
they are either library or compiler related. If this is the case, using
our binary will resolve them.

One known problem with the binary distribution is that with older Linux
systems that use `libc' (like Red Hat 4.x or Slackware), you will get
some non-fatal problems with hostname resolution.  *Note Binary
notes-Linux::.

When using LinuxThreads you will see a minimum of three processes
running.  These are in fact threads.  There will be one thread for the
LinuxThreads manager, one thread to handle connections, and one thread
to handle alarms and signals.

Note that the Linux kernel and the LinuxThread library can by default
only have 1024 threads.  This means that you can only have up to 1021
connections to MySQL on an unpatched system.  The page
`http://www.volano.com/linuxnotes.html' contains information how to go
around this limit.

If you see a dead `mysqld' daemon process with `ps', this usually means
that you have found a bug in MySQL or you have a corrupted table. *Note
Crashing::.

To get a core dump on Linux if `mysqld' dies with a `SIGSEGV' signal,
you can start `mysqld' with the `--core-file' option.  Note that you
also probably need to raise the `core file size' by adding `ulimit -c
1000000' to `mysqld_safe' or starting `mysqld_safe' with
`--core-file-size=1000000'.  *Note `mysqld_safe': mysqld_safe.

If you are linking your own MySQL client and get the error:

     ld.so.1: ./my: fatal: libmysqlclient.so.4:
     open failed: No such file or directory

When executing them, the problem can be avoided by one of the following
methods:

   * Link the client with the following flag (instead of `-Lpath'):
     `-Wl,r/path-libmysqlclient.so'.

   * Copy `libmysqclient.so' to `/usr/lib'.

   * Add the pathname of the directory where `libmysqlclient.so' is
     located to the `LD_RUN_PATH' environment variable before running
     your client.

If you are using the Fujitsu compiler `(fcc / FCC)' you will have some
problems compiling MySQL because the Linux header files are very `gcc'
oriented.

The following `configure' line should work with `fcc/FCC':

     CC=fcc CFLAGS="-O -K fast -K lib -K omitfp -Kpreex -D_GNU_SOURCE \
     -DCONST=const -DNO_STRTOLL_PROTO" CXX=FCC CXXFLAGS="-O -K fast -K lib \
     -K omitfp -K preex --no_exceptions --no_rtti -D_GNU_SOURCE -DCONST=const \
     -Dalloca=__builtin_alloca -DNO_STRTOLL_PROTO \
     '-D_EXTERN_INLINE=static __inline'" ./configure --prefix=/usr/local/mysql \
     --enable-assembler --with-mysqld-ldflags=-all-static --disable-shared \
     --with-low-memory


Linux Notes for Binary Distributions
....................................

MySQL needs at least Linux Version 2.0.

*Warning*: We have reports from some MySQL users that they have got
serious stability problems with MySQL with Linux kernel 2.2.14.  If you
are using this kernel you should upgrade to 2.2.19 (or newer) or to a
2.4 kernel.  If you have a multi-cpu box, then you should seriously
consider using 2.4 as this will give you a significant speed boost.

The binary release is linked with `-static', which means you do not
normally need to worry about which version of the system libraries you
have. You need not install LinuxThreads, either.  A program linked with
`-static' is slightly bigger than a dynamically linked program but also
slightly faster (3-5%).  One problem, however, is that you can't use
user-definable functions (UDFs) with a statically linked program.  If
you are going to write or use UDFs (this is something for C or C++
programmers only), you must compile MySQL yourself, using dynamic
linking.

If you are using a `libc'-based system (instead of a `glibc2' system),
you will probably get some problems with hostname resolving and
`getpwnam()' with the binary release. (This is because `glibc'
unfortunately depends on some external libraries to resolve hostnames
and `getpwent()', even when compiled with `-static'). In this case you
probably get the following error message when you run
`mysql_install_db':

     Sorry, the host 'xxxx' could not be looked up

or the following error when you try to run `mysqld' with the `--user'
option:

     getpwnam: No such file or directory

You can solve this problem in one of the following ways:

   * Get a MySQL source distribution (an RPM or the `tar.gz'
     distribution) and install this instead.

   * Execute `mysql_install_db --force'; this will not execute the
     `resolveip' test in `mysql_install_db'.  The downside is that you
     can't use host names in the grant tables; you must use IP numbers
     instead (except for `localhost').  If you are using an old MySQL
     release that doesn't support `--force', you have to remove the
     `resolveip' test in `mysql_install' with an editor.

   * Start `mysqld' with `su' instead of using `--user'.

The Linux-Intel binary and RPM releases of MySQL are configured for the
highest possible speed.  We are always trying to use the fastest stable
compiler available.

MySQL Perl support requires Version Perl 5.004_03 or newer.

On some Linux 2.2 versions, you may get the error `Resource temporarily
unavailable' when you do a lot of new connections to a `mysqld' server
over TCP/IP.

The problem is that Linux has a delay between when you close a TCP/IP
socket and until this is actually freed by the system.  As there is only
room for a finite number of TCP/IP slots, you will get the above error
if you try to do too many new TCP/IP connections during a small time,
like when you run the MySQL `test-connect' benchmark over TCP/IP.

We have mailed about this problem a couple of times to different Linux
mailing lists but have never been able to resolve this properly.

The only known 'fix' to this problem is to use persistent connections in
your clients or use sockets, if you are running the database server and
clients on the same machine.  We hope that the `Linux 2.4' kernel will
fix this problem in the future.


Linux x86 Notes
...............

MySQL requires `libc' Version 5.4.12 or newer. It's known to work with
`libc' 5.4.46.  `glibc' Version 2.0.6 and later should also work. There
have been some problems with the `glibc' RPMs from Red Hat, so if you
have problems, check whether there are any updates.  The `glibc'
2.0.7-19 and 2.0.7-29 RPMs are known to work.

If you are using Red Hat 8.0 or a new `glibc' 2.2.x library, you should
start `mysqld' with the option `--thread-stack=192K'.  (Use `-O
thread_stack=192K' before MySQL 4.) If you don't do this, `mysqld' will
die in `gethostbyaddr()' because the new `glibc' library requires a
stack size greater than 128K for this call. This stack size is now the
default on MySQL 4.0.10 and above.

If you are using `gcc' 3.0 and above to compile MySQL, you must install
the `libstdc++v3' library before compiling MySQL; if you don't do this,
you will get an error about a missing `__cxa_pure_virtual' symbol
during linking.

On some older Linux distributions, `configure' may produce an error
like this:

     Syntax error in sched.h. Change _P to __P in the /usr/include/sched.h file.
     See the Installation chapter in the Reference Manual.

Just do what the error message says and add an extra underscore to the
`_P' macro that has only one underscore, then try again.

You may get some warnings when compiling; those shown here can be
ignored:

     mysqld.cc -o objs-thread/mysqld.o
     mysqld.cc: In function `void init_signals()':
     mysqld.cc:315: warning: assignment of negative value `-1' to
     `long unsigned int'
     mysqld.cc: In function `void * signal_hand(void *)':
     mysqld.cc:346: warning: assignment of negative value `-1' to
     `long unsigned int'

`mysql.server' can be found in the `share/mysql' directory under the
MySQL installation directory or in the `support-files' directory of the
MySQL source tree.

If `mysqld' always core dumps when it starts up, the problem may be that
you have an old `/lib/libc.a'.  Try renaming it, then remove
`sql/mysqld' and do a new `make install' and try again.  This problem
has been reported on some Slackware installations.

If you get the following error when linking `mysqld', it means that
your `libg++.a' is not installed correctly:

     /usr/lib/libc.a(putc.o): In function `_IO_putc':
     putc.o(.text+0x0): multiple definition of `_IO_putc'

You can avoid using `libg++.a' by running `configure' like this:

     shell> CXX=gcc ./configure


Linux SPARC Notes
.................

In some implementations, `readdir_r()' is broken.  The symptom is that
`SHOW DATABASES' always returns an empty set.  This can be fixed by
removing `HAVE_READDIR_R' from `config.h' after configuring and before
compiling.


Linux Alpha Notes
.................

MySQL Version 3.23.12 is the first MySQL version that is tested on
Linux-Alpha.  If you plan to use MySQL on Linux-Alpha, you should
ensure that you have this version or newer.

We have tested MySQL on Alpha with our benchmarks and test suite, and
it appears to work nicely.

We currently build the MySQL binary packages on SuSE Linux 7.0 for AXP,
kernel 2.4.4-SMP, Compaq C compiler (V6.2-505) and Compaq C++ compiler
(V6.3-006) on a Compaq DS20 machine with an Alpha EV6 processor.

You can find the above compilers at
`http://www.support.compaq.com/alpha-tools/'.  By using these compilers,
instead of gcc, we get about 9-14% better performance with MySQL.

Note that until MySQL version 3.23.52 and 4.0.2 we optimised the binary
for the current CPU only (by using the `-fast' compile option); this
meant that you could only use our binaries if you had an Alpha EV6
processor.

Starting with all following releases we added the `-arch generic' flag
to our compile options, which makes sure the binary runs on all Alpha
processors. We also compile statically to avoid library problems.

     CC=ccc CFLAGS="-fast -arch generic" CXX=cxx \
     CXXFLAGS="-fast -arch generic -noexceptions -nortti" \
     ./configure --prefix=/usr/local/mysql --disable-shared \
     --with-extra-charsets=complex --enable-thread-safe-client \
     --with-mysqld-ldflags=-non_shared --with-client-ldflags=-non_shared

If you want to use egcs the following configure line worked for us:

     CFLAGS="-O3 -fomit-frame-pointer" CXX=gcc \
     CXXFLAGS="-O3 -fomit-frame-pointer -felide-constructors \
     -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql \
     --disable-shared

Some known problems when running MySQL on Linux-Alpha:

   * Debugging threaded applications like MySQL will not work with `gdb
     4.18'.  You should download and use gdb 5.1 instead!

   * If you try linking `mysqld' statically when using `gcc', the
     resulting image will core dump at start.  In other words, *don't*
     use `--with-mysqld-ldflags=-all-static' with `gcc'.


Linux PowerPC Notes
...................

MySQL should work on MkLinux with the newest `glibc' package (tested
with `glibc' 2.0.7).


Linux MIPS Notes
................

To get MySQL to work on Qube2, (Linux Mips), you need the newest
`glibc' libraries (`glibc-2.0.7-29C2' is known to work).  You must also
use the `egcs' C++ compiler (`egcs-1.0.2-9', `gcc 2.95.2' or newer).


Linux IA-64 Notes
.................

To get MySQL to compile on Linux IA-64, we use the following compile
line: Using `gcc-2.96':

     CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc \
     CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors \
     -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql \
     "--with-comment=Official MySQL binary" --with-extra-charsets=complex

On IA-64, the MySQL client binaries use shared libraries. This means
that if you install our binary distribution in some other place than
`/usr/local/mysql' you need to add the path of the directory where you
have `libmysqlclient.so' installed either to the `/etc/ld.so.conf' file
or to the value of your `LD_LIBRARY_PATH' environment variable.

*Note Link errors::.


Solaris Notes
-------------

On Solaris, you may run into trouble even before you get the MySQL
distribution unpacked!  Solaris `tar' can't handle long file names, so
you may see an error like this when you unpack MySQL:

     x mysql-3.22.12-beta/bench/Results/ATIS-mysql_odbc-NT_4.0-cmp-db2,\
     informix,ms-sql,mysql,oracle,solid,sybase, 0 bytes, 0 tape blocks
     tar: directory checksum error

In this case, you must use GNU `tar' (`gtar') to unpack the
distribution.  You can find a precompiled copy for Solaris at
`http://www.mysql.com/downloads/os-solaris.html'.

Sun native threads only work on Solaris 2.5 and higher.  For Version
2.4 and earlier, MySQL will automatically use MIT-pthreads.  *Note
MIT-pthreads::.

If you get the following error from configure:

     checking for restartable system calls... configure: error can not run test
     programs while cross compiling

This means that you have something wrong with your compiler
installation!  In this case you should upgrade your compiler to a newer
version.  You may also be able to solve this problem by inserting the
following row into the `config.cache' file:

     ac_cv_sys_restartable_syscalls=${ac_cv_sys_restartable_syscalls='no'}

If you are using Solaris on a SPARC, the recommended compiler is `gcc'
2.95.2 or 3.2. You can find this at `http://gcc.gnu.org/'.  Note that
`egcs' 1.1.1 and `gcc' 2.8.1 don't work reliably on SPARC!

The recommended `configure' line when using `gcc' 2.95.2 is:

     CC=gcc CFLAGS="-O3" \
     CXX=gcc CXXFLAGS="-O3 -felide-constructors -fno-exceptions -fno-rtti" \
     ./configure --prefix=/usr/local/mysql --with-low-memory --enable-assembler

If you have an UltraSPARC, you can get 4% more performance by adding
"-mcpu=v8 -Wa,-xarch=v8plusa" to CFLAGS and CXXFLAGS.

If you have Sun's Forte 5.0 (or newer) compiler, you can run
`configure' like this:

     CC=cc CFLAGS="-Xa -fast -native -xstrconst -mt" \
     CXX=CC CXXFLAGS="-noex -mt" \
     ./configure --prefix=/usr/local/mysql --enable-assembler

You can create a 64 bit binary using Sun's Forte compiler with the
following compile flags:

     CC=cc CFLAGS="-Xa -fast -native -xstrconst -mt -xarch=v9" \
     CXX=CC CXXFLAGS="-noex -mt -xarch=v9" ASFLAGS="-xarch=v9" \
     ./configure --prefix=/usr/local/mysql --enable-assembler

To create a 64bit Solaris binary using `gcc', add `-m64' to `CFLAGS'
and `CXXFLAGS'. Note that this only works with MySQL 4.0 and up - MySQL
3.23 does not include the required modifications to support this.

In the MySQL benchmarks, we got a 4% speedup on an UltraSPARC when using
Forte 5.0 in 32 bit mode compared to using gcc 3.2 with -mcpu flags.

If you create a 64 bit binary, it's 4 % slower than the 32 bit binary,
but `mysqld' can instead handle more treads and memory.

If you get a problem with `fdatasync' or `sched_yield', you can fix
this by adding `LIBS=-lrt' to the configure line

The following paragraph is only relevant for older compilers than
WorkShop 5.3:

You may also have to edit the `configure' script to change this line:

     #if !defined(__STDC__) || __STDC__ != 1

to this:

     #if !defined(__STDC__)

If you turn on `__STDC__' with the `-Xc' option, the Sun compiler can't
compile with the Solaris `pthread.h' header file.  This is a Sun bug
(broken compiler or broken include file).

If `mysqld' issues the error message shown here when you run it, you
have tried to compile MySQL with the Sun compiler without enabling the
multi-thread option (`-mt'):

     libc internal error: _rmutex_unlock: rmutex not held

Add `-mt' to `CFLAGS' and `CXXFLAGS' and try again.

If you are using the SFW version of gcc (which comes with Solaris 8),
you must add `/opt/sfw/lib' to the environment variable
`LD_LIBRARY_PATH' before running configure.

If you are using the gcc available from `sunfreeware.com', you may have
many problems.  You should recompile gcc and GNU binutils on the
machine you will be running them from to avoid any problems.

If you get the following error when compiling MySQL with `gcc', it
means that your `gcc' is not configured for your version of Solaris:

     shell> gcc -O3 -g -O2 -DDBUG_OFF  -o thr_alarm ...
     ./thr_alarm.c: In function `signal_hand':
     ./thr_alarm.c:556: too many arguments to function `sigwait'

The proper thing to do in this case is to get the newest version of
`gcc' and compile it with your current `gcc' compiler!  At least for
Solaris 2.5, almost all binary versions of `gcc' have old, unusable
include files that will break all programs that use threads (and
possibly other programs)!

Solaris doesn't provide static versions of all system libraries
(`libpthreads' and `libdl'), so you can't compile MySQL with
`--static'.  If you try to do so, you will get the error:

     ld: fatal: library -ldl: not found
     
     or
     
     undefined reference to `dlopen'
     
     or
     
     cannot find -lrt

If too many processes try to connect very rapidly to `mysqld', you will
see this error in the MySQL log:

     Error in accept: Protocol error

You might try starting the server with the `--set-variable back_log=50'
option as a workaround for this. Please note that `--set-variable' is
deprecated since MySQL 4.0, just use `--back_log=50' on its own.  *Note
Command-line options::.

If you are linking your own MySQL client, you might get the following
error when you try to execute it:

     ld.so.1: ./my: fatal: libmysqlclient.so.#:
     open failed: No such file or directory

The problem can be avoided by one of the following methods:

   * Link the client with the following flag (instead of `-Lpath'):
     `-Wl,r/full-path-to-libmysqlclient.so'.

   * Copy `libmysqclient.so' to `/usr/lib'.

   * Add the pathname of the directory where `libmysqlclient.so' is
     located to the `LD_RUN_PATH' environment variable before running
     your client.

If you have problems with configure trying to link with `-lz' and you
don't have `zlib' installed, you have two options:

   * If you want to be able to use the compressed communication
     protocol, you need to get and install zlib from ftp.gnu.org.

   * Configure with `--with-named-z-libs=no'.

If you are using gcc and have problems with loading user defined
functions (`UDF's) into MySQL, try adding `-lgcc' to the link line for
the `UDF'.

If you would like MySQL to start automatically, you can copy
`support-files/mysql.server' to `/etc/init.d' and create a symbolic
link to it named `/etc/rc3.d/S99mysql.server'.

As Solaris doesn't support core files for `setuid()' applications, you
can't get a core file from `mysqld' if you are using the `--user'
option.

* Menu:

* Solaris 2.7::                 Solaris 2.7/2.8 Notes
* Solaris x86::                 Solaris x86 Notes


Solaris 2.7/2.8 Notes
.....................

You can normally use a Solaris 2.6 binary on Solaris 2.7 and 2.8.  Most
of the Solaris 2.6 issues also apply for Solaris 2.7 and 2.8.

Note that MySQL Version 3.23.4 and above should be able to autodetect
new versions of Solaris and enable workarounds for the following
problems!

Solaris 2.7 / 2.8 has some bugs in the include files.  You may see the
following error when you use `gcc':

     /usr/include/widec.h:42: warning: `getwc' redefined
     /usr/include/wchar.h:326: warning: this is the location of the previous
     definition

If this occurs, you can do the following to fix the problem:

Copy `/usr/include/widec.h' to `.../lib/gcc-lib/os/gcc-version/include'
and change line 41 from:

     #if     !defined(lint) && !defined(__lint)
     
     to
     
     #if     !defined(lint) && !defined(__lint) && !defined(getwc)

Alternatively, you can edit `/usr/include/widec.h' directly.  Either
way, after you make the fix, you should remove `config.cache' and run
`configure' again!

If you get errors like this when you run `make', it's because
`configure' didn't detect the `curses.h' file (probably because of the
error in `/usr/include/widec.h'):

     In file included from mysql.cc:50:
     /usr/include/term.h:1060: syntax error before `,'
     /usr/include/term.h:1081: syntax error before `;'

The solution to this is to do one of the following:

   * Configure with `CFLAGS=-DHAVE_CURSES_H CXXFLAGS=-DHAVE_CURSES_H
     ./configure'.

   * Edit `/usr/include/widec.h' as indicted above and rerun configure.

   * Remove the `#define HAVE_TERM' line from `config.h' file and run
     `make' again.

If you get a problem that your linker can't find `-lz' when linking
your client program, the problem is probably that your `libz.so' file is
installed in `/usr/local/lib'.  You can fix this by one of the
following methods:

   * Add `/usr/local/lib' to `LD_LIBRARY_PATH'.

   * Add a link to `libz.so' from `/lib'.

   * If you are using Solaris 8, you can install the optional zlib from
     your Solaris 8 CD distribution.

   * Configure MySQL with the `--with-named-z-libs=no' option.


Solaris x86 Notes
.................

On Solaris 8 on x86, `mysqld' will dump core if you remove the debug
symbols using `strip'.

If you are using `gcc' or `egcs' on Solaris x86 and you experience
problems with core dumps under load, you should use the following
`configure' command:

     CC=gcc CFLAGS="-O3 -fomit-frame-pointer -DHAVE_CURSES_H" \
     CXX=gcc \
     CXXFLAGS="-O3 -fomit-frame-pointer -felide-constructors -fno-exceptions \
     -fno-rtti -DHAVE_CURSES_H" \
     ./configure --prefix=/usr/local/mysql

This will avoid problems with the `libstdc++' library and with C++
exceptions.

If this doesn't help, you should compile a debug version and run it
with a trace file or under `gdb'.  *Note Using gdb on mysqld::.


BSD Notes
---------

This section provides information for the various BSD flavours, as well
as specific versions within those.

* Menu:

* FreeBSD::                     FreeBSD Notes
* NetBSD::                      NetBSD Notes
* OpenBSD::                     OpenBSD 2.5 Notes
* OpenBSD 2.8::                 OpenBSD 2.8 Notes
* BSDI::                        BSD/OS Version 2.x Notes
* BSDI3::                       BSD/OS Version 3.x Notes
* BSDI4::                       BSD/OS Version 4.x Notes


FreeBSD Notes
.............

FreeBSD 4.x or newer is recommended for running MySQL since the thread
package is much more integrated.

The easiest and therefore the preferred way to install is to use the
mysql-server and mysql-client ports available on
`http://www.freebsd.org/'.

Using these gives you:
   * A working MySQL with all optimisations known to work on your
     version of FreeBSD enabled.

   * Automatic configuration and build.

   * Startup scripts installed in /usr/local/etc/rc.d.

   * Ability to see which files that are installed with pkg_info -L.
     And to remove them all with pkg_delete if you no longer want MySQL
     on that machine.

It is recommended you use MIT-pthreads on FreeBSD 2.x and native
threads on Versions 3 and up. It is possible to run with native threads
on some late 2.2.x versions but you may encounter problems shutting
down `mysqld'.

Unfortunately, certain function calls on FreeBSD are not yet fully
thread-safe, most notably the `gethostbyname()' function, which is used
by MySQL to convert host names into IP addresses. Under certain
circumstances, the `mysqld' process will suddenly cause 100% CPU load
and will be unresponsive. If you encounter this, try to start up MySQL
using the `--skip-name-resolve' option.

Alternatively, you can link MySQL on FreeBSD 4.x against the
LinuxThreads library, which avoids a few of the problems that the
native FreeBSD thread implementation has. For a very good comparison of
LinuxThreads vs. native threads have a look at Jeremy Zawodny's article
"FreeBSD or Linux for your MySQL Server?" at
`http://jeremy.zawodny.com/blog/archives/000697.html'

The known problems when using LinuxThreads on FreeBSD are:

   * `wait_timeout' is not working (probably signal handling problem in
     FreeBSD/LinuxThreads).  This is supposed to get fixed in FreeBSD
     5.0.  The symptom is that persistent connections can hang for *a
     long* time without getting closed done.

The MySQL `Makefile's require GNU make (`gmake') to work.  If you want
to compile MySQL you need to install GNU `make' first.

Be sure to have your name resolver setup correct.  Otherwise, you may
experience resolver delays or failures when connecting to `mysqld'.

Make sure that the `localhost' entry in the `/etc/hosts' file is
correct (otherwise, you will have problems connecting to the database).
The `/etc/hosts' file should start with a line:

     127.0.0.1       localhost localhost.your.domain

The recommended way to compile and install MySQL on FreeBSD with gcc
(2.95.2 and up) is:

     CC=gcc CFLAGS="-O2 -fno-strength-reduce" \
     CXX=gcc CXXFLAGS="-O2 -fno-rtti -fno-exceptions -felide-constructors \
     -fno-strength-reduce" \
     ./configure --prefix=/usr/local/mysql --enable-assembler
     gmake
     gmake install
     ./scripts/mysql_install_db
     cd /usr/local/mysql
     ./bin/mysqld_safe &

If you notice that `configure' will use MIT-pthreads, you should read
the MIT-pthreads notes.  *Note MIT-pthreads::.

If you get an error from `make install' that it can't find
`/usr/include/pthreads', `configure' didn't detect that you need
MIT-pthreads.  This is fixed by executing these commands:

     shell> rm config.cache
     shell> ./configure --with-mit-threads

FreeBSD is also known to have a very low default file handle limit.
*Note Not enough file handles::.  Uncomment the `ulimit -n' section in
`mysqld_safe' or raise the limits for the `mysqld' user in
/etc/login.conf (and rebuild it with cap_mkdb /etc/login.conf).  Also
be sure you set the appropriate class for this user in the password
file if you are not using the default (use: chpass mysqld-user-name).
*Note `mysqld_safe': mysqld_safe.

If you have a lot of memory you should consider rebuilding the kernel
to allow MySQL to take more than 512M of RAM.  Take a look at `option
MAXDSIZ' in the LINT config file for more info.

If you get problems with the current date in MySQL, setting the `TZ'
variable will probably help.  *Note Environment variables::.

To get a secure and stable system you should only use FreeBSD kernels
that are marked `-RELEASE'.


NetBSD Notes
............

To compile on NetBSD you need GNU `make'. Otherwise, the compile will
crash when `make' tries to run `lint' on C++ files.


OpenBSD 2.5 Notes
.................

On OpenBSD Version 2.5, you can compile MySQL with native threads with
the following options:

     CFLAGS=-pthread CXXFLAGS=-pthread ./configure --with-mit-threads=no


OpenBSD 2.8 Notes
.................

Our users have reported that OpenBSD 2.8 has a threading bug which
causes problems with MySQL.  The OpenBSD Developers have fixed the
problem, but as of January 25th, 2001, it's only available in the
"-current" branch.  The symptoms of this threading bug are: slow
response, high load, high CPU usage, and crashes.

If you get an error like `Error in accept:: Bad file descriptor' or
error 9 when trying to open tables or directories, the problem is
probably that you haven't allocated enough file descriptors for MySQL.

In this case, try starting `mysqld_safe' as `root' with the following
options:

     shell> mysqld_safe --user=mysql --open-files-limit=2048 &


BSD/OS Version 2.x Notes
........................

If you get the following error when compiling MySQL, your `ulimit'
value for virtual memory is too low:

     item_func.h: In method `Item_func_ge::Item_func_ge(const Item_func_ge &)':
     item_func.h:28: virtual memory exhausted
     make[2]: *** [item_func.o] Error 1

Try using `ulimit -v 80000' and run `make' again.  If this doesn't work
and you are using `bash', try switching to `csh' or `sh'; some BSDI
users have reported problems with `bash' and `ulimit'.

If you are using `gcc', you may also use have to use the
`--with-low-memory' flag for `configure' to be able to compile
`sql_yacc.cc'.

If you get problems with the current date in MySQL, setting the `TZ'
variable will probably help.  *Note Environment variables::.


BSD/OS Version 3.x Notes
........................

Upgrade to BSD/OS Version 3.1.  If that is not possible, install
BSDIpatch M300-038.

Use the following command when configuring MySQL:

     shell> env CXX=shlicc++ CC=shlicc2 \
            ./configure \
                --prefix=/usr/local/mysql \
                --localstatedir=/var/mysql \
                --without-perl \
                --with-unix-socket-path=/var/mysql/mysql.sock

The following is also known to work:

     shell> env CC=gcc CXX=gcc CXXFLAGS=-O3 \
            ./configure \
                --prefix=/usr/local/mysql \
                --with-unix-socket-path=/var/mysql/mysql.sock

You can change the directory locations if you wish, or just use the
defaults by not specifying any locations.

If you have problems with performance under heavy load, try using the
`--skip-thread-priority' option to `mysqld'!  This will run all threads
with the same priority; on BSDI Version 3.1, this gives better
performance (at least until BSDI fixes their thread scheduler).

If you get the error `virtual memory exhausted' while compiling, you
should try using `ulimit -v 80000' and run `make' again.  If this
doesn't work and you are using `bash', try switching to `csh' or `sh';
some BSDI users have reported problems with `bash' and `ulimit'.


BSD/OS Version 4.x Notes
........................

BSDI Version 4.x has some thread-related bugs.  If you want to use
MySQL on this, you should install all thread-related patches.  At least
M400-023 should be installed.

On some BSDI Version 4.x systems, you may get problems with shared
libraries.  The symptom is that you can't execute any client programs,
for example, `mysqladmin'.  In this case you need to reconfigure not to
use shared libraries with the `--disable-shared' option to configure.

Some customers have had problems on BSDI 4.0.1 that the `mysqld' binary
after a while can't open tables.  This is because some library/system
related bug causes `mysqld' to change current directory without asking
for this!

The fix is to either upgrade to 3.23.34 or after running `configure'
remove the line `#define HAVE_REALPATH' from `config.h' before running
make.

Note that the above means that you can't symbolic link a database
directories to another database directory or symbolic link a table to
another database on BSDI!  (Making a symbolic link to another disk is
okay).


Mac OS X Notes
--------------

* Menu:

* Mac OS X 10.x::               Mac OS X 10.x
* Mac OS X Server::             Mac OS X Server 1.2 (Rhapsody)


Mac OS X 10.x
.............

MySQL should work without any problems on Mac OS X 10.x (Darwin). You
don't need the pthread patches for this OS!

This also applies to Mac OS X 10.x Server. Compiling for the Server
platform is the same as for the client version of Mac OS X. However
please note that MySQL comes preinstalled on the Server!

Our binary for Mac OS X is compiled on Darwin 6.3 with the following
configure line:

     CC=gcc CFLAGS="-O3 -fno-omit-frame-pointer" CXX=gcc \
     CXXFLAGS="-O3 -fno-omit-frame-pointer -felide-constructors \
     -fno-exceptions -fno-rtti" ./configure --prefix=/usr/local/mysql \
     --with-extra-charsets=complex --enable-thread-safe-client \
     --enable-local-infile --disable-shared

*Note Mac OS X installation::.


Mac OS X Server 1.2 (Rhapsody)
..............................

Before trying to configure MySQL on Mac OS X Server 1.2 (aka Rhapsody)
you must first install the pthread package from
`http://www.prnet.de/RegEx/mysql.html'.

*Note Mac OS X installation::.


Other Unix Notes
----------------

* Menu:

* Binary notes-HP-UX::          HP-UX Notes for Binary Distributions
* HP-UX 10.20::                 HP-UX Version 10.20 Notes
* HP-UX 11.x::                  HP-UX Version 11.x Notes
* IBM-AIX::                     IBM-AIX notes
* SunOS::                       SunOS 4 Notes
* Alpha-DEC-UNIX::              Alpha-DEC-UNIX Notes (Tru64)
* Alpha-DEC-OSF1::              Alpha-DEC-OSF/1 Notes
* SGI-Irix::                    SGI Irix Notes
* SCO::                         SCO Notes
* SCO UnixWare::                SCO UnixWare Version 7.1.x Notes


HP-UX Notes for Binary Distributions
....................................

Some of the binary distributions of MySQL for HP-UX are distributed as
an HP depot file and as a tar file.  To use the depot file you must be
running at least HP-UX 10.x to have access to HP's software depot tools.

The HP version of MySQL was compiled on an HP 9000/8xx server under
HP-UX 10.20, and uses MIT-pthreads.  It is known to work well under
this configuration.  MySQL Version 3.22.26 and newer can also be built
with HP's native thread package.

Other configurations that may work:

   * HP 9000/7xx running HP-UX 10.20+

   * HP 9000/8xx running HP-UX 10.30

The following configurations almost definitely won't work:

   * HP 9000/7xx or 8xx running HP-UX 10.x where x < 2

   * HP 9000/7xx or 8xx running HP-UX 9.x

To install the distribution, use one of the commands here, where
`/path/to/depot' is the full pathname of the depot file:

   * To install everything, including the server, client and
     development tools:

          shell> /usr/sbin/swinstall -s /path/to/depot mysql.full

   * To install only the server:

          shell> /usr/sbin/swinstall -s /path/to/depot mysql.server

   * To install only the client package:

          shell> /usr/sbin/swinstall -s /path/to/depot mysql.client

   * To install only the development tools:

          shell> /usr/sbin/swinstall -s /path/to/depot mysql.developer

The depot places binaries and libraries in `/opt/mysql' and data in
`/var/opt/mysql'. The depot also creates the appropriate entries in
`/etc/init.d' and `/etc/rc2.d' to start the server automatically at
boot time.  Obviously, this entails being `root' to install.

To install the HP-UX tar.gz distribution, you must have a copy of GNU
`tar'.


HP-UX Version 10.20 Notes
.........................

There are a couple of small problems when compiling MySQL on HP-UX.  We
recommend that you use `gcc' instead of the HP-UX native compiler,
because `gcc' produces better code!

We recommend using `gcc' 2.95 on HP-UX.  Don't use high optimisation
flags (like -O6) as this may not be safe on HP-UX.

The following `configure' line should work with `gcc' 2.95:

     CFLAGS="-I/opt/dce/include -fpic" \
     CXXFLAGS="-I/opt/dce/include -felide-constructors -fno-exceptions \
     -fno-rtti" CXX=gcc ./configure --with-pthread \
     --with-named-thread-libs='-ldce' --prefix=/usr/local/mysql --disable-shared

The following `configure' line should work with `gcc' 3.1:

     CFLAGS="-DHPUX -I/opt/dce/include -O3 -fPIC" CXX=gcc \
     CXXFLAGS="-DHPUX -I/opt/dce/include -felide-constructors -fno-exceptions \
     -fno-rtti -O3 -fPIC" ./configure --prefix=/usr/local/mysql \
     --with-extra-charsets=complex --enable-thread-safe-client \
     --enable-local-infile  --with-pthread \
     --with-named-thread-libs=-ldce --with-lib-ccflags=-fPIC
     --disable-shared


HP-UX Version 11.x Notes
........................

For HP-UX Version 11.x, we recommend MySQL Version 3.23.15 or later.

Because of some critical bugs in the standard HP-UX libraries, you
should install the following patches before trying to run MySQL on
HP-UX 11.0:

     PHKL_22840 Streams cumulative
     PHNE_22397 ARPA cumulative

This will solve the problem of getting `EWOULDBLOCK' from `recv()' and
`EBADF' from `accept()' in threaded applications.

If you are using `gcc' 2.95.1 on an unpatched HP-UX 11.x system, you
will get the error:

     In file included from /usr/include/unistd.h:11,
                      from ../include/global.h:125,
                      from mysql_priv.h:15,
                      from item.cc:19:
     /usr/include/sys/unistd.h:184: declaration of C function ...
     /usr/include/sys/pthread.h:440: previous declaration ...
     In file included from item.h:306,
                      from mysql_priv.h:158,
                      from item.cc:19:

The problem is that HP-UX doesn't define `pthreads_atfork()'
consistently.  It has conflicting prototypes in
`/usr/include/sys/unistd.h':184 and `/usr/include/sys/pthread.h':440
(details below).

One solution is to copy `/usr/include/sys/unistd.h' into
`mysql/include' and edit `unistd.h' and change it to match the
definition in `pthread.h'.  Here's the diff:

     183,184c183,184
     <      extern int pthread_atfork(void (*prepare)(), void (*parent)(),
     <                                                void (*child)());
     ---
     >      extern int pthread_atfork(void (*prepare)(void), void (*parent)(void),
     >                                                void (*child)(void));

After this, the following configure line should work:

     CFLAGS="-fomit-frame-pointer -O3 -fpic" CXX=gcc \
     CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti -O3" \
     ./configure --prefix=/usr/local/mysql --disable-shared

If you are using MySQL 4.0.5 with the HP-UX compiler you can use:
(tested with cc B.11.11.04):

     CC=cc CXX=aCC CFLAGS=+DD64 CXXFLAGS=+DD64 ./configure --with-extra-character-set=complex

You can ignore any errors of the following type:

     aCC: warning 901: unknown option: `-3': use +help for online documentation

If you get the following error from `configure'

     checking for cc option to accept ANSI C... no
     configure: error: MySQL requires a ANSI C compiler (and a C++ compiler).
     Try gcc. See the Installation chapter in the Reference Manual.

Check that you don't have the path to the K&R compiler before the path
to the HP-UX C and C++ compiler.

Another reason for not beeing able to compile is that you didn't define
the `+DD64' flags above.

Another possibility for HP-UX 11 is to use MySQL binaries for HP-UX
10.20.  We have received reports from some users that these binaries
work fine on HP-UX 11.00. If you encounter problems, be sure to check
your HP-UX patch level.


IBM-AIX notes
.............

Automatic detection of `xlC' is missing from Autoconf, so a `configure'
command something like this is needed when compiling MySQL (This
example uses the IBM compiler):

     export CC="xlc_r -ma -O3 -qstrict -qoptimize=3 -qmaxmem=8192 "
     export CXX="xlC_r -ma -O3 -qstrict -qoptimize=3 -qmaxmem=8192"
     export CFLAGS="-I /usr/local/include"
     export LDFLAGS="-L /usr/local/lib"
     export CPPFLAGS=$CFLAGS
     export CXXFLAGS=$CFLAGS
     
     ./configure --prefix=/usr/local \
                     --localstatedir=/var/mysql \
                     --sysconfdir=/etc/mysql \
                     --sbindir='/usr/local/bin' \
                     --libexecdir='/usr/local/bin' \
                     --enable-thread-safe-client \
                     --enable-large-files

Above are the options used to compile the MySQL distribution that can
be found at `http://www-frec.bull.com/'.

If you change the `-O3' to `-O2' in the above configure line, you must
also remove the `-qstrict' option (this is a limitation in the IBM C
compiler).

If you are using `gcc' or `egcs' to compile MySQL, you *must* use the
`-fno-exceptions' flag, as the exception handling in `gcc'/`egcs' is
not thread-safe!  (This is tested with `egcs' 1.1.)  There are also
some known problems with IBM's assembler, which may cause it to
generate bad code when used with gcc.

We recommend the following `configure' line with `egcs' and `gcc 2.95'
on AIX:

     CC="gcc -pipe -mcpu=power -Wa,-many" \
     CXX="gcc -pipe -mcpu=power -Wa,-many" \
     CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti" \
     ./configure --prefix=/usr/local/mysql --with-low-memory

The `-Wa,-many' is necessary for the compile to be successful.  IBM is
aware of this problem but is in to hurry to fix it because of the
workaround available.  We don't know if the `-fno-exceptions' is
required with `gcc 2.95', but as MySQL doesn't use exceptions and the
above option generates faster code, we recommend that you should always
use this option with `egcs / gcc'.

If you get a problem with assembler code try changing the -mcpu=xxx to
match your CPU. Typically power2, power, or powerpc may need to be used,
alternatively you might need to use 604 or 604e. I'm not positive but I
would think using "power" would likely be safe most of the time, even on
a power2 machine.

If you don't know what your CPU is then do a "uname -m", this will give
you back a string that looks like "000514676700", with a format of
xxyyyyyymmss where xx and ss are always 0's, yyyyyy is a unique system
ID and mm is the ID of the CPU Planar. A chart of these values can be
found at
`http://publib.boulder.ibm.com/doc_link/en_US/a_doc_lib/cmds/aixcmds5/uname.htm'.
This will give you a machine type and a machine model you can use to
determine what type of CPU you have.

If you have problems with signals (MySQL dies unexpectedly under high
load) you may have found an OS bug with threads and signals.  In this
case you can tell MySQL not to use signals by configuring with:

     shell> CFLAGS=-DDONT_USE_THR_ALARM CXX=gcc \
            CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti \
            -DDONT_USE_THR_ALARM" \
            ./configure --prefix=/usr/local/mysql --with-debug --with-low-memory

This doesn't affect the performance of MySQL, but has the side effect
that you can't kill clients that are "sleeping" on a connection with
`mysqladmin kill' or `mysqladmin shutdown'.  Instead, the client will
die when it issues its next command.

On some versions of AIX, linking with `libbind.a' makes `getservbyname'
core dump.  This is an AIX bug and should be reported to IBM.

For AIX 4.2.1 and gcc you have to do the following changes.

After configuring, edit `config.h' and `include/my_config.h' and change
the line that says

     #define HAVE_SNPRINTF 1

to

     #undef HAVE_SNPRINTF

And finally, in `mysqld.cc' you need to add a prototype for initgoups.

     #ifdef _AIX41
     extern "C" int initgroups(const char *,int);
     #endif

If you need to allocate a lot of memory to the mysqld process, it's not
enough to just set 'ulimit -d unlimited'. You may also have to set in
`mysqld_safe' something like:

     export LDR_CNTRL='MAXDATA=0x80000000'

You can find more about using a lot of memory at:
`http://publib16.boulder.ibm.com/pseries/en_US/aixprggd/genprogc/lrg_prg_support.htm'.


SunOS 4 Notes
.............

On SunOS 4, MIT-pthreads is needed to compile MySQL, which in turn
means you will need GNU `make'.

Some SunOS 4 systems have problems with dynamic libraries and `libtool'.
You can use the following `configure' line to avoid this problem:

     shell> ./configure --disable-shared --with-mysqld-ldflags=-all-static

When compiling `readline', you may get warnings about duplicate defines.
These may be ignored.

When compiling `mysqld', there will be some `implicit declaration of
function' warnings. These may be ignored.


Alpha-DEC-UNIX Notes (Tru64)
............................

If you are using egcs 1.1.2 on Digital Unix, you should upgrade to gcc
2.95.2, as egcs on DEC has some serious bugs!

When compiling threaded programs under Digital Unix, the documentation
recommends using the `-pthread' option for `cc' and `cxx' and the
libraries `-lmach -lexc' (in addition to `-lpthread').  You should run
`configure' something like this:

     CC="cc -pthread" CXX="cxx -pthread -O" \
     ./configure --with-named-thread-libs="-lpthread -lmach -lexc -lc"

When compiling `mysqld', you may see a couple of warnings like this:

     mysqld.cc: In function void handle_connections()':
     mysqld.cc:626: passing long unsigned int *' as argument 3 of
     accept(int,sockadddr *, int *)'

You can safely ignore these warnings.  They occur because `configure'
can detect only errors, not warnings.

If you start the server directly from the command-line, you may have
problems with it dying when you log out.  (When you log out, your
outstanding processes receive a `SIGHUP' signal.)  If so, try starting
the server like this:

     shell> nohup mysqld [options] &

`nohup' causes the command following it to ignore any `SIGHUP' signal
sent from the terminal.  Alternatively, start the server by running
`mysqld_safe', which invokes `mysqld' using `nohup' for you.  *Note
`mysqld_safe': mysqld_safe.

If you get a problem when compiling mysys/get_opt.c, just remove the
line #define _NO_PROTO from the start of that file!

If you are using Compaq's CC compiler, the following configure line
should work:

     CC="cc -pthread"
     CFLAGS="-O4 -ansi_alias -ansi_args -fast -inline speed all -arch host"
     CXX="cxx -pthread"
     CXXFLAGS="-O4 -ansi_alias -ansi_args -fast -inline speed all -arch host \
     -noexceptions -nortti"
     export CC CFLAGS CXX CXXFLAGS
     ./configure \
     --prefix=/usr/local/mysql \
     --with-low-memory \
     --enable-large-files \
     --enable-shared=yes \
     --with-named-thread-libs="-lpthread -lmach -lexc -lc"
     gnumake

If you get a problem with libtool, when compiling with shared libraries
as above, when linking `mysql', you should be able to get around this
by issuing:

     cd mysql
     /bin/sh ../libtool --mode=link cxx -pthread  -O3 -DDBUG_OFF \
     -O4 -ansi_alias -ansi_args -fast -inline speed \
     -speculate all \ -arch host  -DUNDEF_HAVE_GETHOSTBYNAME_R \
     -o mysql  mysql.o readline.o sql_string.o completion_hash.o \
     ../readline/libreadline.a -lcurses \
     ../libmysql/.libs/libmysqlclient.so  -lm
     cd ..
     gnumake
     gnumake install
     scripts/mysql_install_db


Alpha-DEC-OSF/1 Notes
.....................

If you have problems compiling and have DEC `CC' and `gcc' installed,
try running `configure' like this:

     CC=cc CFLAGS=-O CXX=gcc CXXFLAGS=-O3 \
     ./configure --prefix=/usr/local/mysql

If you get problems with the `c_asm.h' file, you can create and use a
'dummy' `c_asm.h' file with:

     touch include/c_asm.h
     CC=gcc CFLAGS=-I./include \
     CXX=gcc CXXFLAGS=-O3 \
     ./configure --prefix=/usr/local/mysql

Note that the following problems with the `ld' program can be fixed by
downloading the latest DEC (Compaq) patch kit from:
`http://ftp.support.compaq.com/public/unix/'.

On OSF/1 V4.0D and compiler "DEC C V5.6-071 on Digital Unix V4.0 (Rev.
878)" the compiler had some strange behaviour (undefined `asm' symbols).
`/bin/ld' also appears to be broken (problems with `_exit undefined'
errors occurring while linking `mysqld').  On this system, we have
managed to compile MySQL with the following `configure' line, after
replacing `/bin/ld' with the version from OSF 4.0C:

     CC=gcc CXX=gcc CXXFLAGS=-O3 ./configure --prefix=/usr/local/mysql

With the Digital compiler "C++ V6.1-029", the following should work:

     CC=cc -pthread
     CFLAGS=-O4 -ansi_alias -ansi_args -fast -inline speed -speculate all \
            -arch host
     CXX=cxx -pthread
     CXXFLAGS=-O4 -ansi_alias -ansi_args -fast -inline speed -speculate all \
               -arch host -noexceptions -nortti
     export CC CFLAGS CXX CXXFLAGS
     ./configure --prefix=/usr/mysql/mysql --with-mysqld-ldflags=-all-static \
                 --disable-shared --with-named-thread-libs="-lmach -lexc -lc"

In some versions of OSF/1, the `alloca()' function is broken. Fix this
by removing the line in `config.h' that defines `'HAVE_ALLOCA''.

The `alloca()' function also may have an incorrect prototype in
`/usr/include/alloca.h'.  This warning resulting from this can be
ignored.

`configure' will use the following thread libraries automatically:
`--with-named-thread-libs="-lpthread -lmach -lexc -lc"'.

When using `gcc', you can also try running `configure' like this:

     shell> CFLAGS=-D_PTHREAD_USE_D4 CXX=gcc CXXFLAGS=-O3 ./configure ...

If you have problems with signals (MySQL dies unexpectedly under high
load), you may have found an OS bug with threads and signals. In this
case you can tell MySQL not to use signals by configuring with:

     shell> CFLAGS=-DDONT_USE_THR_ALARM \
            CXXFLAGS=-DDONT_USE_THR_ALARM \
            ./configure ...

This doesn't affect the performance of MySQL, but has the side effect
that you can't kill clients that are "sleeping" on a connection with
`mysqladmin kill' or `mysqladmin shutdown'.  Instead, the client will
die when it issues its next command.

With `gcc' 2.95.2, you will probably run into the following compile
error:

     sql_acl.cc:1456: Internal compiler error in `scan_region', at except.c:2566
     Please submit a full bug report.

To fix this you should change to the `sql' directory and do a "cut and
paste" of the last `gcc' line, but change `-O3' to `-O0' (or add `-O0'
immediately after `gcc' if you don't have any `-O' option on your
compile line).  After this is done you can just change back to the
top-level directly and run `make' again.


SGI Irix Notes
..............

If you are using Irix Version 6.5.3 or newer `mysqld' will only be able
to create threads if you run it as a user with `CAP_SCHED_MGT'
privileges (like `root') or give the `mysqld' server this privilege
with the following shell command:

     shell> chcap "CAP_SCHED_MGT+epi" /opt/mysql/libexec/mysqld

You may have to undefine some things in `config.h' after running
`configure' and before compiling.

In some Irix implementations, the `alloca()' function is broken.  If the
`mysqld' server dies on some `SELECT' statements, remove the lines from
`config.h' that define `HAVE_ALLOC' and `HAVE_ALLOCA_H'.  If
`mysqladmin create' doesn't work, remove the line from `config.h' that
defines `HAVE_READDIR_R'.  You may have to remove the `HAVE_TERM_H'
line as well.

SGI recommends that you install all of the patches on this page as a
set:
`http://support.sgi.com/surfzone/patches/patchset/6.2_indigo.rps.html'

At the very minimum, you should install the latest kernel rollup, the
latest `rld' rollup, and the latest `libc' rollup.

You definitely need all the POSIX patches on this page, for pthreads
support:

`http://support.sgi.com/surfzone/patches/patchset/6.2_posix.rps.html'

If you get the something like the following error when compiling
`mysql.cc':

     "/usr/include/curses.h", line 82: error(1084): invalid combination of type

Type the following in the top-level directory of your MySQL source tree:

     shell> extra/replace bool curses_bool < /usr/include/curses.h \
     > include/curses.h
     shell> make

There have also been reports of scheduling problems.  If only one
thread is running, things go slow.  Avoid this by starting another
client.  This may lead to a 2-to-10-fold increase in execution speed
thereafter for the other thread.  This is a poorly understood problem
with Irix threads; you may have to improvise to find solutions until
this can be fixed.

If you are compiling with `gcc', you can use the following `configure'
command:

     CC=gcc CXX=gcc CXXFLAGS=-O3 \
     ./configure --prefix=/usr/local/mysql --enable-thread-safe-client \
     --with-named-thread-libs=-lpthread

On Irix 6.5.11 with native Irix C and C++ compilers ver. 7.3.1.2, the
following is reported to work

     CC=cc CXX=CC CFLAGS='-O3 -n32 -TARG:platform=IP22 -I/usr/local/include \
     -L/usr/local/lib' CXXFLAGS='-O3 -n32 -TARG:platform=IP22 \
     -I/usr/local/include -L/usr/local/lib' ./configure \
     --prefix=/usr/local/mysql --with-innodb --with-berkeley-db \
     --with-libwrap=/usr/local \
     --with-named-curses-libs=/usr/local/lib/libncurses.a


SCO Notes
.........

The current port is tested only on "sco3.2v5.0.5", "sco3.2v5.0.6" and
"sco3.2v5.0.7" systems.  There has also been a lot of progress on a
port to "sco 3.2v4.2".

For the moment the recommended compiler on OpenServer is gcc 2.95.2.
With this you should be able to compile MySQL with just:

     CC=gcc CXX=gcc ./configure ... (options)

  1. For OpenServer 5.0.x you need to use gcc-2.95.2p1 or newer from the
     Skunkware.  `http://www.sco.com/skunkware/' and choose browser
     OpenServer packages or by ftp to ftp2.caldera.com in the
     pub/skunkware/osr5/devtools/gcc directory.

  2. You need the port of GCC 2.5.x for this product and the Development
     system.  They are required on this version of SCO Unix.  You cannot
     just use the GCC Dev system.

  3. You should get the FSU Pthreads package and install it first.
     This can be found at
     `http://moss.csc.ncsu.edu/~mueller/ftp/pub/PART/pthreads.tar.gz'.
     You can also get a precompiled package from
     `http://www.mysql.com/Downloads/SCO/FSU-threads-3.5c.tar.gz'.

  4. FSU Pthreads can be compiled with SCO Unix 4.2 with tcpip.  Or
     OpenServer 3.0 or Open Desktop 3.0 (OS 3.0 ODT 3.0), with the SCO
     Development System installed using a good port of GCC 2.5.x ODT or
     OS 3.0 you will need a good port of GCC 2.5.x There are a lot of
     problems without a good port.  The port for this product requires
     the SCO Unix Development system.  Without it, you are missing the
     libraries and the linker that is needed.

  5. To build FSU Pthreads on your system, do the following:

       1. Run `./configure' in the `threads/src' directory and select
          the SCO OpenServer option. This command copies
          `Makefile.SCO5' to `Makefile'.

       2. Run `make'.

       3. To install in the default `/usr/include' directory, login as
          root, then `cd' to the `thread/src' directory, and run `make
          install'.

  6. Remember to use GNU `make' when making MySQL.

  7. If you don't start `mysqld_safe' as `root', you probably will get
     only the default 110 open files per process.  `mysqld' will write
     a note about this in the log file.

  8. With SCO 3.2V5.0.5, you should use FSU Pthreads version 3.5c or
     newer.  You should also use gcc 2.95.2 or newer!

     The following `configure' command should work:

          shell> ./configure --prefix=/usr/local/mysql --disable-shared

  9. With SCO 3.2V4.2, you should use FSU Pthreads version 3.5c or
     newer.  The following `configure' command should work:

          shell> CFLAGS="-D_XOPEN_XPG4" CXX=gcc CXXFLAGS="-D_XOPEN_XPG4" \
                 ./configure \
                     --prefix=/usr/local/mysql \
                     --with-named-thread-libs="-lgthreads -lsocket -lgen -lgthreads" \
                     --with-named-curses-libs="-lcurses"

     You may get some problems with some include files. In this case,
     you can find new SCO-specific include files at
     `http://www.mysql.com/Downloads/SCO/SCO-3.2v4.2-includes.tar.gz'.
     You should unpack this file in the `include' directory of your
     MySQL source tree.

SCO development notes:

   * MySQL should automatically detect FSU Pthreads and link `mysqld'
     with `-lgthreads -lsocket -lgthreads'.

   * The SCO development libraries are re-entrant in FSU Pthreads.  SCO
     claim's that its libraries' functions are re-entrant, so they must
     be reentrant with FSU Pthreads.  FSU Pthreads on OpenServer tries
     to use the SCO scheme to make re-entrant libraries.

   * FSU Pthreads (at least the version at `http://www.mysql.com/')
     comes linked with GNU `malloc'.  If you encounter problems with
     memory usage, make sure that `gmalloc.o' is included in
     `libgthreads.a' and `libgthreads.so'.

   * In FSU Pthreads, the following system calls are pthreads-aware:
     `read()', `write()', `getmsg()', `connect()', `accept()',
     `select()', and `wait()'.

   * The CSSA-2001-SCO.35.2 (the patch is listed in custom as
     erg711905-dscr_remap security patch (version 2.0.0) breaks FSU
     threads and makes mysqld unstable.  You have to remove this one if
     you want to run mysqld on an OpenServer 5.0.6 machine.

   * SCO provides Operating Systems Patches at
     `ftp://ftp.sco.com/pub/openserver5' for OpenServer 5.0.x

   * SCO provides secruity fixes and libsocket.so.2 at
     `ftp://ftp.sco.com/pub/security/OpenServer' and
     `ftp://ftp.sco.com/pub/security/sse' for OpenServer 5.0.x

   * pre-OSR506 security fixes. Also, the telnetd fix at
     `ftp://stage.caldera.com/pub/security/openserver/' or
     `ftp://stage.caldera.com/pub/security/openserver/CSSA-2001-SCO.10/'
     as both libsocket.so.2 and libresolv.so.1 with instructions for
     installing on pre-OSR506 systems.

     It's probably a good idea to install the above patches before
     trying to compile/use MySQL.

If you want to install DBI on SCO, you have to edit the `Makefile' in
DBI-xxx and each subdirectory.

Note that the following assumes gcc 2.95.2 or newer:

     OLD:                                  NEW:
     CC = cc                               CC = gcc
     CCCDLFLAGS = -KPIC -W1,-Bexport       CCCDLFLAGS = -fpic
     CCDLFLAGS = -wl,-Bexport              CCDLFLAGS =
     
     LD = ld                               LD = gcc -G -fpic
     LDDLFLAGS = -G -L/usr/local/lib       LDDLFLAGS = -L/usr/local/lib
     LDFLAGS = -belf -L/usr/local/lib      LDFLAGS = -L/usr/local/lib
     
     LD = ld                               LD = gcc -G -fpic
     OPTIMISE = -Od                        OPTIMISE = -O1
     
     OLD:
     CCCFLAGS = -belf -dy -w0 -U M_XENIX -DPERL_SCO5 -I/usr/local/include
     
     NEW:
     CCFLAGS = -U M_XENIX -DPERL_SCO5 -I/usr/local/include

This is because the Perl dynaloader will not load the `DBI' modules if
they were compiled with `icc' or `cc'.

Perl works best when compiled with `cc'.


SCO UnixWare Version 7.1.x Notes
................................

You must use a version of MySQL at least as recent as Version 3.22.13
and of UnixWare 7.1.0 because these version fixes some portability and
OS problems under UnixWare.

We have been able to compile MySQL with the following `configure'
command on UnixWare Version 7.1.x:

     CC=cc CXX=CC ./configure --prefix=/usr/local/mysql

If you want to use `gcc', you must use `gcc' 2.95.2 or newer.

     CC=gcc CXX=g++ ./configure --prefix=/usr/local/mysql

  1. SCO provides Operating Systems Patches at
     `ftp://ftp.sco.com/pub/unixware7' for UnixWare 7.1.1 and 7.1.3
     `ftp://ftp.sco.com/pub/openunix8' for OpenUNIX 8.0.0

  2. SCO provides information about Security Fixes at
     `ftp://ftp.sco.com/pub/security/OpenUNIX' for OpenUNIX
     `ftp://ftp.sco.com/pub/security/UnixWare' for UnixWare


OS/2 Notes
----------

MySQL uses quite a few open files. Because of this, you should add
something like the following to your `CONFIG.SYS' file:

     SET EMXOPT=-c -n -h1024

If you don't do this, you will probably run into the following error:

     File 'xxxx' not found (Errcode: 24)

When using MySQL with OS/2 Warp 3, FixPack 29 or above is required.
With OS/2 Warp 4, FixPack 4 or above is required. This is a requirement
of the Pthreads library.  MySQL must be installed in a partition that
supports long filenames such as HPFS, FAT32, etc.

The `INSTALL.CMD' script must be run from OS/2's own `CMD.EXE' and may
not work with replacement shells such as `4OS2.EXE'.

The `scripts/mysql-install-db' script has been renamed.  It is now
called `install.cmd' and is a REXX script, which will set up the default
MySQL security settings and create the WorkPlace Shell icons for MySQL.

Dynamic module support is compiled in but not fully tested. Dynamic
modules should be compiled using the Pthreads run-time library.

     gcc -Zdll -Zmt -Zcrtdll=pthrdrtl -I../include -I../regex -I.. \
         -o example udf_example.cc -L../lib -lmysqlclient udf_example.def
     mv example.dll example.udf

*Note*: Due to limitations in OS/2, UDF module name stems must not
exceed 8 characters. Modules are stored in the `/mysql2/udf' directory;
the `safe-mysqld.cmd' script will put this directory in the
`BEGINLIBPATH' environment variable. When using UDF modules, specified
extensions are ignored--it is assumed to be `.udf'.  For example, in
Unix, the shared module might be named `example.so' and you would load
a function from it like this:

     mysql> CREATE FUNCTION metaphon RETURNS STRING SONAME "example.so";

In OS/2, the module would be named `example.udf', but you would not
specify the module extension:

     mysql> CREATE FUNCTION metaphon RETURNS STRING SONAME "example";


Novell NetWare Notes
--------------------

Porting `MySQL' to `NetWare' was an effort spearheaded by `Novell'.
Novell customers will be pleased to note that NetWare 6.5 will ship
with bundled MySQL binaries, complete with an automatic commercial use
license for all servers running that version of NetWare.

*Note NetWare installation::.

MySQL for NetWare is compiled using a combination of `Metrowerks
Codewarrior for NetWare' and special cross-compilation versions of the
GNU autotools. Check back here in the future for more information on
building and optimising MySQL for NetWare.


BeOS Notes
----------

We have in the past talked with some BeOS developers that have said that
MySQL is 80% ported to BeOS, but we haven't heard from them in a while.


Perl Installation Comments
==========================

* Menu:

* Perl installation::           Installing Perl on Unix
* ActiveState Perl::            Installing ActiveState Perl on Windows
* Perl support problems::       Problems Using the Perl `DBI'/`DBD' Interface


Installing Perl on Unix
-----------------------

Perl support for MySQL is provided by means of the `DBI'/`DBD' client
interface.  *Note Perl::.  The Perl `DBD'/`DBI' client code requires
Perl Version 5.004 or later.  The interface *will not work* if you have
an older version of Perl.

MySQL Perl support also requires that you've installed MySQL client
programming support.  If you installed MySQL from RPM files, client
programs are in the client RPM, but client programming support is in
the developer RPM.  Make sure you've installed the latter RPM.

As of Version 3.22.8, Perl support is distributed separately from the
main MySQL distribution.  If you want to install Perl support, the files
you will need can be obtained from
`http://www.mysql.com/downloads/api-dbi.html'.

The Perl distributions are provided as compressed `tar' archives and
have names like `MODULE-VERSION.tar.gz', where `MODULE' is the module
name and `VERSION' is the version number.  You should get the
`Data-Dumper', `DBI', and `DBD-mysql' distributions and install them in
that order.  The installation procedure is shown here.  The example
shown is for the `Data-Dumper' module, but the procedure is the same
for all three distributions:

  1. Unpack the distribution into the current directory:
          shell> gunzip < Data-Dumper-VERSION.tar.gz | tar xvf -
     This command creates a directory named `Data-Dumper-VERSION'.

  2. Change into the top-level directory of the unpacked distribution:
          shell> cd Data-Dumper-VERSION

  3. Build the distribution and compile everything:
          shell> perl Makefile.PL
          shell> make
          shell> make test
          shell> make install

The `make test' command is important because it verifies that the
module is working.  Note that when you run that command during the
`DBD-mysql' installation to exercise the interface code, the MySQL
server must be running or the test will fail.

It is a good idea to rebuild and reinstall the `DBD-mysql' distribution
whenever you install a new release of MySQL, particularly if you notice
symptoms such as all your `DBI' scripts dumping core after you upgrade
MySQL.

If you don't have the right to install Perl modules in the system
directory or if you to install local Perl modules, the following
reference may help you:

     `http://www.iserver.com/support/contrib/perl5/modules.html'

Look under the heading `Installing New Modules that Require Locally
Installed Modules'.


Installing ActiveState Perl on Windows
--------------------------------------

To install the MySQL `DBD' module with ActiveState Perl on Windows, you
should do the following:

   * Get ActiveState Perl from
     `http://www.activestate.com/Products/ActivePerl/' and install it.

   * Open a DOS shell.

   * If required, set the HTTP_proxy variable. For example, you might
     try:

          set HTTP_proxy=my.proxy.com:3128

   * Start the PPM program:

          C:\> c:\perl\bin\ppm.pl

   * If you have not already done so, install `DBI':

          ppm> install DBI

   * If this succeeds, run the following command:

          install \
          ftp://ftp.de.uu.net/pub/CPAN/authors/id/JWIED/DBD-mysql-1.2212.x86.ppd

The above should work at least with ActiveState Perl Version 5.6.

If you can't get the above to work, you should instead install the
`MyODBC' driver and connect to MySQL server through ODBC:

     use DBI;
     $dbh= DBI->connect("DBI:ODBC:$dsn","$user","$password") ||
       die "Got error $DBI::errstr when connecting to $dsn\n";


Problems Using the Perl `DBI'/`DBD' Interface
---------------------------------------------

If Perl reports that it can't find the `../mysql/mysql.so' module, then
the problem is probably that Perl can't locate the shared library
`libmysqlclient.so'.

You can fix this by any of the following methods:

   * Compile the `DBD-mysql' distribution with `perl Makefile.PL
     -static -config' rather than `perl Makefile.PL'.

   * Copy `libmysqlclient.so' to the directory where your other shared
     libraries are located (probably `/usr/lib' or `/lib').

   * On Linux you can add the pathname of the directory where
     `libmysqlclient.so' is located to the `/etc/ld.so.conf' file.

   * Add the pathname of the directory where `libmysqlclient.so' is
     located to the `LD_RUN_PATH' environment variable.

If you get the following errors from `DBD-mysql', you are probably
using `gcc' (or using an old binary compiled with `gcc'):

     /usr/bin/perl: can't resolve symbol '__moddi3'
     /usr/bin/perl: can't resolve symbol '__divdi3'

Add `-L/usr/lib/gcc-lib/... -lgcc' to the link command when the
`mysql.so' library gets built (check the output from `make' for
`mysql.so' when you compile the Perl client).  The `-L' option should
specify the pathname of the directory where `libgcc.a' is located on
your system.

Another cause of this problem may be that Perl and MySQL aren't both
compiled with `gcc'.  In this case, you can solve the mismatch by
compiling both with `gcc'.

If you get the following error from `DBD-mysql' when you run the tests:

     t/00base............install_driver(mysql) failed:
     Can't load '../blib/arch/auto/DBD/mysql/mysql.so' for module DBD::mysql:
     ../blib/arch/auto/DBD/mysql/mysql.so: undefined symbol:
     uncompress at /usr/lib/perl5/5.00503/i586-linux/DynaLoader.pm line 169.

it means that you need to include the compression library, -lz, to the
link line. This can be doing the following change in the file
`lib/DBD/mysql/Install.pm':

     $sysliblist .= " -lm";
     
     to
     
     $sysliblist .= " -lm -lz";

After this, you *must* run 'make realclean' and then proceed with the
installation from the beginning.

If you want to use the Perl module on a system that doesn't support
dynamic linking (like SCO) you can generate a static version of Perl
that includes `DBI' and `DBD-mysql'.  The way this works is that you
generate a version of Perl with the `DBI' code linked in and install it
on top of your current Perl.  Then you use that to build a version of
Perl that additionally has the `DBD' code linked in, and install that.

On SCO, you must have the following environment variables set:

     shell> LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:/usr/progressive/lib
     or
     shell> LD_LIBRARY_PATH=/usr/lib:/lib:/usr/local/lib:/usr/ccs/lib:\
     /usr/progressive/lib:/usr/skunk/lib
     shell> LIBPATH=/usr/lib:/lib:/usr/local/lib:/usr/ccs/lib:\
     /usr/progressive/lib:/usr/skunk/lib
     shell> MANPATH=scohelp:/usr/man:/usr/local1/man:/usr/local/man:\
     /usr/skunk/man:

First, create a Perl that includes a statically linked `DBI' by running
these commands in the directory where your `DBI' distribution is
located:

     shell> perl Makefile.PL -static -config
     shell> make
     shell> make install
     shell> make perl

Then you must install the new Perl. The output of `make perl' will
indicate the exact `make' command you will need to execute to perform
the installation.  On SCO, this is `make -f Makefile.aperl inst_perl
MAP_TARGET=perl'.

Next, use the just-created Perl to create another Perl that also
includes a statically-linked `DBD::mysql' by running these commands in
the directory where your `DBD-mysql' distribution is located:

     shell> perl Makefile.PL -static -config
     shell> make
     shell> make install
     shell> make perl

Finally, you should install this new Perl.  Again, the output of `make
perl' indicates the command to use.

